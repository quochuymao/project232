
DOAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800305c  0800305c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800305c  0800305c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000000c  08003070  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08003070  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000faa5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023aa  00000000  00000000  0002fb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c83  00000000  00000000  00032ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f00  00000000  00000000  00033b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a11  00000000  00000000  00035a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eef4  00000000  00000000  0004845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004460  00000000  00000000  000d7350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000db7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003018 	.word	0x08003018

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003018 	.word	0x08003018

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc00 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9e2 	bl	8000520 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9c2 	bl	80004e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f866 	bl	8000230 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8ce 	bl	8000304 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000168:	f000 f8fa 	bl	8000360 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 800016c:	f000 f998 	bl	80004a0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000170:	e7fe      	b.n	8000170 <main+0x24>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 ff1c 	bl	8002fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fc85 	bl	8001ad8 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d4:	f000 fa12 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80001e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2101      	movs	r1, #1
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fef1 	bl	8001fdc <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000200:	f000 f9fc 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000204:	2312      	movs	r3, #18
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800020c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800020e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000212:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f002 f85a 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000222:	f000 f9eb 	bl	80005fc <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000242:	4a2f      	ldr	r2, [pc, #188]	; (8000300 <MX_ADC1_Init+0xd0>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000250:	2200      	movs	r2, #0
 8000252:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000256:	2200      	movs	r2, #0
 8000258:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_ADC1_Init+0xcc>)
 800025c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000262:	4b26      	ldr	r3, [pc, #152]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000268:	4b24      	ldr	r3, [pc, #144]	; (80002fc <MX_ADC1_Init+0xcc>)
 800026a:	2204      	movs	r2, #4
 800026c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026e:	4823      	ldr	r0, [pc, #140]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000270:	f000 fbd2 	bl	8000a18 <HAL_ADC_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800027a:	f000 f9bf 	bl	80005fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000282:	2301      	movs	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	481b      	ldr	r0, [pc, #108]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000290:	f000 fc9a 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800029a:	f000 f9af 	bl	80005fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4814      	ldr	r0, [pc, #80]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002ac:	f000 fc8c 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002b6:	f000 f9a1 	bl	80005fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002be:	2303      	movs	r3, #3
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002c8:	f000 fc7e 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002d2:	f000 f993 	bl	80005fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002d6:	2303      	movs	r3, #3
 80002d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002da:	2304      	movs	r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002e4:	f000 fc70 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002ee:	f000 f985 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000028 	.word	0x20000028
 8000300:	40012400 	.word	0x40012400

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_I2C1_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	; (8000358 <MX_I2C1_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_I2C1_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_I2C1_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_I2C1_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_I2C1_Init+0x50>)
 8000342:	f001 f985 	bl	8001650 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f956 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	2000009c 	.word	0x2000009c
 8000358:	40005400 	.word	0x40005400
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b096      	sub	sp, #88	; 0x58
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2220      	movs	r2, #32
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f002 fe10 	bl	8002fbe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800039e:	4b3e      	ldr	r3, [pc, #248]	; (8000498 <MX_TIM1_Init+0x138>)
 80003a0:	4a3e      	ldr	r2, [pc, #248]	; (800049c <MX_TIM1_Init+0x13c>)
 80003a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	; (8000498 <MX_TIM1_Init+0x138>)
 80003a6:	2217      	movs	r2, #23
 80003a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b3b      	ldr	r3, [pc, #236]	; (8000498 <MX_TIM1_Init+0x138>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <MX_TIM1_Init+0x138>)
 80003b2:	2263      	movs	r2, #99	; 0x63
 80003b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b38      	ldr	r3, [pc, #224]	; (8000498 <MX_TIM1_Init+0x138>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <MX_TIM1_Init+0x138>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b35      	ldr	r3, [pc, #212]	; (8000498 <MX_TIM1_Init+0x138>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c8:	4833      	ldr	r0, [pc, #204]	; (8000498 <MX_TIM1_Init+0x138>)
 80003ca:	f002 f837 	bl	800243c <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80003d4:	f000 f912 	bl	80005fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003e2:	4619      	mov	r1, r3
 80003e4:	482c      	ldr	r0, [pc, #176]	; (8000498 <MX_TIM1_Init+0x138>)
 80003e6:	f002 f993 	bl	8002710 <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80003f0:	f000 f904 	bl	80005fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003f4:	4828      	ldr	r0, [pc, #160]	; (8000498 <MX_TIM1_Init+0x138>)
 80003f6:	f002 f870 	bl	80024da <HAL_TIM_PWM_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000400:	f000 f8fc 	bl	80005fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000404:	2300      	movs	r3, #0
 8000406:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800040c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000410:	4619      	mov	r1, r3
 8000412:	4821      	ldr	r0, [pc, #132]	; (8000498 <MX_TIM1_Init+0x138>)
 8000414:	f002 fcc4 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800041e:	f000 f8ed 	bl	80005fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000422:	2360      	movs	r3, #96	; 0x60
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042a:	2300      	movs	r3, #0
 800042c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800042e:	2300      	movs	r3, #0
 8000430:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800043a:	2300      	movs	r3, #0
 800043c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800043e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	4814      	ldr	r0, [pc, #80]	; (8000498 <MX_TIM1_Init+0x138>)
 8000448:	f002 f8a0 	bl	800258c <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000452:	f000 f8d3 	bl	80005fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800046a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <MX_TIM1_Init+0x138>)
 800047a:	f002 fcef 	bl	8002e5c <HAL_TIMEx_ConfigBreakDeadTime>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000484:	f000 f8ba 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <MX_TIM1_Init+0x138>)
 800048a:	f000 f9b3 	bl	80007f4 <HAL_TIM_MspPostInit>

}
 800048e:	bf00      	nop
 8000490:	3758      	adds	r7, #88	; 0x58
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000f0 	.word	0x200000f0
 800049c:	40012c00 	.word	0x40012c00

080004a0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <MX_USB_PCD_Init+0x40>)
 80004a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004ac:	2208      	movs	r2, #8
 80004ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_USB_PCD_Init+0x3c>)
 80004ca:	f001 fa05 	bl	80018d8 <HAL_PCD_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004d4:	f000 f892 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000138 	.word	0x20000138
 80004e0:	40005c00 	.word	0x40005c00

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <MX_DMA_Init+0x38>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_DMA_Init+0x38>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f000 fd6f 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f000 fd88 	bl	8001022 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <MX_GPIO_Init+0xd0>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xd0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOAD_CTR_Pin|TEST_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f640 0101 	movw	r1, #2049	; 0x801
 8000582:	481c      	ldr	r0, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xd4>)
 8000584:	f001 f84c 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	481a      	ldr	r0, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xd8>)
 8000590:	f001 f846 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LOAD_CHECK_Pin */
  GPIO_InitStruct.Pin = LOAD_CHECK_Pin;
 8000594:	2310      	movs	r3, #16
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOAD_CHECK_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <MX_GPIO_Init+0xd8>)
 80005a8:	f000 feb6 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_CTR_Pin TEST_Pin */
  GPIO_InitStruct.Pin = LOAD_CTR_Pin|TEST_Pin;
 80005ac:	f640 0301 	movw	r3, #2049	; 0x801
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <MX_GPIO_Init+0xd4>)
 80005c6:	f000 fea7 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUCK_EN_Pin */
  GPIO_InitStruct.Pin = BUCK_EN_Pin;
 80005ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_EN_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_GPIO_Init+0xd8>)
 80005e4:	f000 fe98 	bl	8001318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40010800 	.word	0x40010800

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_MspInit+0x5c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_MspInit+0x5c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x5c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x5c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_MspInit+0x60>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_MspInit+0x60>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000
 8000668:	40010000 	.word	0x40010000

0800066c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d149      	bne.n	8000720 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <HAL_ADC_MspInit+0xc0>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <HAL_ADC_MspInit+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|CURRENT_OUT_Pin|VADC_IN_Pin|VADC_OUT_Pin;
 80006bc:	230f      	movs	r3, #15
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4819      	ldr	r0, [pc, #100]	; (8000730 <HAL_ADC_MspInit+0xc4>)
 80006cc:	f000 fe24 	bl	8001318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xcc>)
 80006d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 80006fa:	2220      	movs	r2, #32
 80006fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 8000706:	f000 fca7 	bl	8001058 <HAL_DMA_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000710:	f7ff ff74 	bl	80005fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 8000718:	621a      	str	r2, [r3, #32]
 800071a:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_ADC_MspInit+0xc8>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40012400 	.word	0x40012400
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800
 8000734:	20000058 	.word	0x20000058
 8000738:	40020008 	.word	0x40020008

0800073c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <HAL_I2C_MspInit+0x70>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d123      	bne.n	80007a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000774:	23c0      	movs	r3, #192	; 0xc0
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <HAL_I2C_MspInit+0x78>)
 8000788:	f000 fdc6 	bl	8001318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 8000792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000796:	61d3      	str	r3, [r2, #28]
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2C_MspInit+0x74>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a09      	ldr	r2, [pc, #36]	; (80007ec <HAL_TIM_Base_MspInit+0x34>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d10b      	bne.n	80007e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_TIM_Base_MspInit+0x38>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_TIM_Base_MspInit+0x38>)
 80007d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_TIM_Base_MspInit+0x38>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40012c00 	.word	0x40012c00
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_TIM_MspPostInit+0x5c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d118      	bne.n	8000846 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_TIM_MspPostInit+0x60>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_TIM_MspPostInit+0x60>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_TIM_MspPostInit+0x60>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_TIM_MspPostInit+0x64>)
 8000842:	f000 fd69 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40012c00 	.word	0x40012c00
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800

0800085c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <HAL_PCD_MspInit+0x34>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_PCD_MspInit+0x38>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_PCD_MspInit+0x38>)
 8000874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_PCD_MspInit+0x38>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40005c00 	.word	0x40005c00
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 f87f 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <DMA1_Channel1_IRQHandler+0x10>)
 80008ee:	f000 fc0d 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000058 	.word	0x20000058

080008fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000908:	f7ff fff8 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800090e:	490c      	ldr	r1, [pc, #48]	; (8000940 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000924:	4c09      	ldr	r4, [pc, #36]	; (800094c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000932:	f002 fb4d 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fc09 	bl	800014c <main>
  bx lr
 800093a:	4770      	bx	lr
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000944:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 8000948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800094c:	2000042c 	.word	0x2000042c

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>
	...

08000954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_Init+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_Init+0x28>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 fb35 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f808 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff fe4a 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x54>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x58>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fb4d 	bl	800103e <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00e      	b.n	80009cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d80a      	bhi.n	80009ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 fb15 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <HAL_InitTick+0x5c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x1c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x20>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <HAL_IncTick+0x20>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000428 	.word	0x20000428

08000a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <HAL_GetTick+0x10>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000428 	.word	0x20000428

08000a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0be      	b.n	8000bb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fe08 	bl	800066c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f9ab 	bl	8000db8 <ADC_ConversionStop_Disable>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 8099 	bne.w	8000ba6 <HAL_ADC_Init+0x18e>
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8095 	bne.w	8000ba6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a84:	f023 0302 	bic.w	r3, r3, #2
 8000a88:	f043 0202 	orr.w	r2, r3, #2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7b1b      	ldrb	r3, [r3, #12]
 8000a9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0xa2>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <HAL_ADC_Init+0xa8>
 8000aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abe:	e000      	b.n	8000ac2 <HAL_ADC_Init+0xaa>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d1b      	ldrb	r3, [r3, #20]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d119      	bne.n	8000b04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7b1b      	ldrb	r3, [r3, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	035a      	lsls	r2, r3, #13
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	e00b      	b.n	8000b04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f043 0220 	orr.w	r2, r3, #32
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	f043 0201 	orr.w	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_ADC_Init+0x1a8>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b34:	d003      	beq.n	8000b3e <HAL_ADC_Init+0x126>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	051b      	lsls	r3, r3, #20
 8000b46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_ADC_Init+0x1ac>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d10b      	bne.n	8000b84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b76:	f023 0303 	bic.w	r3, r3, #3
 8000b7a:	f043 0201 	orr.w	r2, r3, #1
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b82:	e018      	b.n	8000bb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f023 0312 	bic.w	r3, r3, #18
 8000b8c:	f043 0210 	orr.w	r2, r3, #16
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b98:	f043 0201 	orr.w	r2, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba4:	e007      	b.n	8000bb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f043 0210 	orr.w	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000bc4:	ff1f0efe 	.word	0xff1f0efe

08000bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x20>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e0dc      	b.n	8000da2 <HAL_ADC_ConfigChannel+0x1da>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b06      	cmp	r3, #6
 8000bf6:	d81c      	bhi.n	8000c32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	3b05      	subs	r3, #5
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4019      	ands	r1, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b05      	subs	r3, #5
 8000c24:	fa00 f203 	lsl.w	r2, r0, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c30:	e03c      	b.n	8000cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b0c      	cmp	r3, #12
 8000c38:	d81c      	bhi.n	8000c74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	3b23      	subs	r3, #35	; 0x23
 8000c4c:	221f      	movs	r2, #31
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4019      	ands	r1, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	3b23      	subs	r3, #35	; 0x23
 8000c66:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
 8000c72:	e01b      	b.n	8000cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	3b41      	subs	r3, #65	; 0x41
 8000c86:	221f      	movs	r2, #31
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4019      	ands	r1, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3b41      	subs	r3, #65	; 0x41
 8000ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	d91c      	bls.n	8000cee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68d9      	ldr	r1, [r3, #12]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b1e      	subs	r3, #30
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6898      	ldr	r0, [r3, #8]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b1e      	subs	r3, #30
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	e019      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6919      	ldr	r1, [r3, #16]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2207      	movs	r2, #7
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4019      	ands	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	d003      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d2e:	2b11      	cmp	r3, #17
 8000d30:	d132      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_ADC_ConfigChannel+0x1e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d125      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d126      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b10      	cmp	r3, #16
 8000d60:	d11a      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9a      	lsrs	r2, r3, #18
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d78:	e002      	b.n	8000d80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f9      	bne.n	8000d7a <HAL_ADC_ConfigChannel+0x1b2>
 8000d86:	e007      	b.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f043 0220 	orr.w	r2, r3, #32
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40012400 	.word	0x40012400
 8000db0:	20000000 	.word	0x20000000
 8000db4:	431bde83 	.word	0x431bde83

08000db8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12e      	bne.n	8000e30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000de2:	f7ff fe0f 	bl	8000a04 <HAL_GetTick>
 8000de6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000de8:	e01b      	b.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dea:	f7ff fe0b 	bl	8000a04 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d914      	bls.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10d      	bne.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f043 0210 	orr.w	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e007      	b.n	8000e32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d0dc      	beq.n	8000dea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff2d 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff42 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff35 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e043      	b.n	80010f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_DMA_Init+0xa8>)
 8001076:	4413      	add	r3, r2
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_DMA_Init+0xac>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	009a      	lsls	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_DMA_Init+0xb0>)
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2204      	movs	r2, #4
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d04f      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xc8>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d04a      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a66      	ldr	r2, [pc, #408]	; (80012fc <HAL_DMA_IRQHandler+0x1f0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d029      	beq.n	80011ba <HAL_DMA_IRQHandler+0xae>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_DMA_IRQHandler+0x1f4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d022      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xaa>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a63      	ldr	r2, [pc, #396]	; (8001304 <HAL_DMA_IRQHandler+0x1f8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a62      	ldr	r2, [pc, #392]	; (8001308 <HAL_DMA_IRQHandler+0x1fc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d012      	beq.n	80011aa <HAL_DMA_IRQHandler+0x9e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a60      	ldr	r2, [pc, #384]	; (800130c <HAL_DMA_IRQHandler+0x200>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00a      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x98>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_DMA_IRQHandler+0x204>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d102      	bne.n	800119e <HAL_DMA_IRQHandler+0x92>
 8001198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119c:	e00e      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 800119e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011a2:	e00b      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a8:	e008      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ae:	e005      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	e002      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	e000      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011ba:	2304      	movs	r3, #4
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_DMA_IRQHandler+0x208>)
 80011be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8094 	beq.w	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011d2:	e08e      	b.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2202      	movs	r2, #2
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <HAL_DMA_IRQHandler+0x186>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d051      	beq.n	8001292 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 020a 	bic.w	r2, r2, #10
 800120a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a38      	ldr	r2, [pc, #224]	; (80012fc <HAL_DMA_IRQHandler+0x1f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d029      	beq.n	8001272 <HAL_DMA_IRQHandler+0x166>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a37      	ldr	r2, [pc, #220]	; (8001300 <HAL_DMA_IRQHandler+0x1f4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d022      	beq.n	800126e <HAL_DMA_IRQHandler+0x162>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a35      	ldr	r2, [pc, #212]	; (8001304 <HAL_DMA_IRQHandler+0x1f8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x15c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_DMA_IRQHandler+0x1fc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0x156>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_DMA_IRQHandler+0x200>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00a      	beq.n	800125c <HAL_DMA_IRQHandler+0x150>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_DMA_IRQHandler+0x204>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <HAL_DMA_IRQHandler+0x14a>
 8001250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001254:	e00e      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800125a:	e00b      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	e008      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	e005      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126c:	e002      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 800126e:	2320      	movs	r3, #32
 8001270:	e000      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001272:	2302      	movs	r3, #2
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_DMA_IRQHandler+0x208>)
 8001276:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d034      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001290:	e02f      	b.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	2208      	movs	r2, #8
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d028      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d023      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 020e 	bic.w	r2, r2, #14
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
    }
  }
  return;
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
}
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40020008 	.word	0x40020008
 8001300:	4002001c 	.word	0x4002001c
 8001304:	40020030 	.word	0x40020030
 8001308:	40020044 	.word	0x40020044
 800130c:	40020058 	.word	0x40020058
 8001310:	4002006c 	.word	0x4002006c
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e12b      	b.n	80018ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f860 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b4:	f000 fdda 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <HAL_I2C_Init+0x274>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d807      	bhi.n	80016d4 <HAL_I2C_Init+0x84>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_I2C_Init+0x278>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e006      	b.n	80016e2 <HAL_I2C_Init+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <HAL_I2C_Init+0x27c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_I2C_Init+0x280>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_I2C_Init+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d802      	bhi.n	8001724 <HAL_I2C_Init+0xd4>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	e009      	b.n	8001738 <HAL_I2C_Init+0xe8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_I2C_Init+0x284>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800174a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	; (80018c4 <HAL_I2C_Init+0x274>)
 8001754:	428b      	cmp	r3, r1
 8001756:	d819      	bhi.n	800178c <HAL_I2C_Init+0x13c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb1 f3f3 	udiv	r3, r1, r3
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800176c:	400b      	ands	r3, r1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_I2C_Init+0x138>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e59      	subs	r1, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	e051      	b.n	800182c <HAL_I2C_Init+0x1dc>
 8001788:	2304      	movs	r3, #4
 800178a:	e04f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_I2C_Init+0x168>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e012      	b.n	80017de <HAL_I2C_Init+0x18e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e022      	b.n	800182c <HAL_I2C_Init+0x1dc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_I2C_Init+0x1bc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1e58      	subs	r0, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180a:	e00f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6809      	ldr	r1, [r1, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800185a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68d2      	ldr	r2, [r2, #12]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	af06      	add	r7, sp, #24
 80018de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0f1      	b.n	8001ace <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7fe ffac 	bl	800085c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fb04 	bl	8002f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	687e      	ldr	r6, [r7, #4]
 800191e:	466d      	mov	r5, sp
 8001920:	f106 0410 	add.w	r4, r6, #16
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	602b      	str	r3, [r5, #0]
 800192c:	1d33      	adds	r3, r6, #4
 800192e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001930:	6838      	ldr	r0, [r7, #0]
 8001932:	f001 fae4 	bl	8002efe <USB_CoreInit>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0c2      	b.n	8001ace <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f001 faff 	bl	8002f52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e040      	b.n	80019dc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3301      	adds	r3, #1
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	3303      	adds	r3, #3
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	333c      	adds	r3, #60	; 0x3c
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3340      	adds	r3, #64	; 0x40
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3301      	adds	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3b9      	bcc.n	800195a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e044      	b.n	8001a76 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3b5      	bcc.n	80019ec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	687e      	ldr	r6, [r7, #4]
 8001a88:	466d      	mov	r5, sp
 8001a8a:	f106 0410 	add.w	r4, r6, #16
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	602b      	str	r3, [r5, #0]
 8001a96:	1d33      	adds	r3, r6, #4
 8001a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f001 fa65 	bl	8002f6a <USB_DevInit>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00d      	b.n	8001ace <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fa6f 	bl	8002faa <USB_DevDisconnect>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e272      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b04:	4b8f      	ldr	r3, [pc, #572]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x12c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e24c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x76>
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xbc>
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a71      	ldr	r2, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b94:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff26 	bl	8000a04 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe ff22 	bl	8000a04 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e200      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe4>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe ff12 	bl	8000a04 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7fe ff0e 	bl	8000a04 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1ec      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x10c>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1e:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1c0      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe fec7 	bl	8000a04 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7fe fec3 	bl	8000a04 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1a1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fea6 	bl	8000a04 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7fe fea2 	bl	8000a04 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e180      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03a      	beq.n	8001d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe86 	bl	8000a04 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fe82 	bl	8000a04 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e160      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 faba 	bl	8002294 <RCC_Delay>
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fe6c 	bl	8000a04 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	e00f      	b.n	8001d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7fe fe68 	bl	8000a04 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d908      	bls.n	8001d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e146      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	42420000 	.word	0x42420000
 8001d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b92      	ldr	r3, [pc, #584]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e9      	bne.n	8001d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a6 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a87      	ldr	r2, [pc, #540]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7e      	ldr	r2, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fe29 	bl	8000a04 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe fe25 	bl	8000a04 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e103      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4c8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a6e      	ldr	r2, [pc, #440]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001df2:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a69      	ldr	r2, [pc, #420]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a66      	ldr	r2, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	e01c      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x356>
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a60      	ldr	r2, [pc, #384]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fdd9 	bl	8000a04 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fdd5 	bl	8000a04 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0b1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCC_OscConfig+0x37e>
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe fdc3 	bl	8000a04 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7fe fdbf 	bl	8000a04 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e09b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d061      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d146      	bne.n	8001f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fd93 	bl	8000a04 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fd8f 	bl	8000a04 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e06d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4921      	ldr	r1, [pc, #132]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a19      	ldr	r1, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	491b      	ldr	r1, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fd63 	bl	8000a04 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fd5f 	bl	8000a04 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e03d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46a>
 8001f60:	e035      	b.n	8001fce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fd4c 	bl	8000a04 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fd48 	bl	8000a04 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e026      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x498>
 8001f8e:	e01e      	b.n	8001fce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e019      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x500>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0d0      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4965      	ldr	r1, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4936      	ldr	r1, [pc, #216]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fc9a 	bl	8000a04 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe fc96 	bl	8000a04 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e053      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fbf8 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003030 	.word	0x08003030
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x30>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x36>
 80021de:	e027      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e027      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0c5b      	lsrs	r3, r3, #17
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	fb03 f202 	mul.w	r2, r3, r2
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e004      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	693b      	ldr	r3, [r7, #16]
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	007a1200 	.word	0x007a1200
 800224c:	08003048 	.word	0x08003048
 8002250:	08003058 	.word	0x08003058
 8002254:	003d0900 	.word	0x003d0900

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_RCC_GetHCLKFreq+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002270:	f7ff fff2 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08003040 	.word	0x08003040

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d07d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	61d3      	str	r3, [r2, #28]
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002314:	2301      	movs	r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a42      	ldr	r2, [pc, #264]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002330:	f7fe fb68 	bl	8000a04 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	e008      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fb64 	bl	8000a04 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e06d      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02e      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d027      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d014      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fb33 	bl	8000a04 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fb2f 	bl	8000a04 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e036      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ee      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4917      	ldr	r1, [pc, #92]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	490b      	ldr	r1, [pc, #44]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	42420440 	.word	0x42420440

0800243c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe f9a8 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 fa10 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e041      	b.n	8002570 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f839 	bl	8002578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4610      	mov	r0, r2
 800251a:	f000 f9c1 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0ae      	b.n	8002708 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	f200 809f 	bhi.w	80026f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025f5 	.word	0x080025f5
 80025c4:	080026f9 	.word	0x080026f9
 80025c8:	080026f9 	.word	0x080026f9
 80025cc:	080026f9 	.word	0x080026f9
 80025d0:	08002635 	.word	0x08002635
 80025d4:	080026f9 	.word	0x080026f9
 80025d8:	080026f9 	.word	0x080026f9
 80025dc:	080026f9 	.word	0x080026f9
 80025e0:	08002677 	.word	0x08002677
 80025e4:	080026f9 	.word	0x080026f9
 80025e8:	080026f9 	.word	0x080026f9
 80025ec:	080026f9 	.word	0x080026f9
 80025f0:	080026b7 	.word	0x080026b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f9b2 	bl	8002964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6999      	ldr	r1, [r3, #24]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	619a      	str	r2, [r3, #24]
      break;
 8002632:	e064      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f9f8 	bl	8002a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6999      	ldr	r1, [r3, #24]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	021a      	lsls	r2, r3, #8
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	619a      	str	r2, [r3, #24]
      break;
 8002674:	e043      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fa41 	bl	8002b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0208 	orr.w	r2, r2, #8
 8002690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0204 	bic.w	r2, r2, #4
 80026a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69d9      	ldr	r1, [r3, #28]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	61da      	str	r2, [r3, #28]
      break;
 80026b4:	e023      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa8b 	bl	8002bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69d9      	ldr	r1, [r3, #28]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	61da      	str	r2, [r3, #28]
      break;
 80026f6:	e002      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
      break;
 80026fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIM_ConfigClockSource+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e0b4      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x186>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d03e      	beq.n	80027e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	f200 8087 	bhi.w	800287c <HAL_TIM_ConfigClockSource+0x16c>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	f000 8086 	beq.w	8002882 <HAL_TIM_ConfigClockSource+0x172>
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277a:	d87f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d01a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d87b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b60      	cmp	r3, #96	; 0x60
 8002786:	d050      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x11a>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d877      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b50      	cmp	r3, #80	; 0x50
 800278e:	d03c      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xfa>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d873      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d058      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x13a>
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d86f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d064      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15a>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d86b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d060      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15a>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d867      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d05a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x15a>
 80027b4:	e062      	b.n	800287c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	f000 facc 	bl	8002d62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	609a      	str	r2, [r3, #8]
      break;
 80027e2:	e04f      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	f000 fab5 	bl	8002d62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002806:	609a      	str	r2, [r3, #8]
      break;
 8002808:	e03c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	461a      	mov	r2, r3
 8002818:	f000 fa2c 	bl	8002c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2150      	movs	r1, #80	; 0x50
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa83 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002828:	e02c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002836:	461a      	mov	r2, r3
 8002838:	f000 fa4a 	bl	8002cd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2160      	movs	r1, #96	; 0x60
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fa73 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002848:	e01c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	461a      	mov	r2, r3
 8002858:	f000 fa0c 	bl	8002c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa63 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002868:	e00c      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f000 fa5a 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 800287a:	e003      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e000      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a29      	ldr	r2, [pc, #164]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <TIM_Base_SetConfig+0xbc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <TIM_Base_SetConfig+0xc0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <TIM_Base_SetConfig+0xbc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <TIM_Base_SetConfig+0xc0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800

08002964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 0201 	bic.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f023 0302 	bic.w	r3, r3, #2
 80029ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <TIM_OC1_SetConfig+0xc8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10c      	bne.n	80029da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f023 0308 	bic.w	r3, r3, #8
 80029c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <TIM_OC1_SetConfig+0xc8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d111      	bne.n	8002a06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40012c00 	.word	0x40012c00

08002a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 0210 	bic.w	r2, r3, #16
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0320 	bic.w	r3, r3, #32
 8002a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <TIM_OC2_SetConfig+0xd0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10d      	bne.n	8002aac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <TIM_OC2_SetConfig+0xd0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d113      	bne.n	8002adc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00

08002b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <TIM_OC3_SetConfig+0xd0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10d      	bne.n	8002b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <TIM_OC3_SetConfig+0xd0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00

08002bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <TIM_OC4_SetConfig+0x98>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	40012c00 	.word	0x40012c00

08002c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 030a 	bic.w	r3, r3, #10
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	031b      	lsls	r3, r3, #12
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	621a      	str	r2, [r3, #32]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 0307 	orr.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	021a      	lsls	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	609a      	str	r2, [r3, #8]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e046      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800

08002e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e03d      	b.n	8002ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002efe:	b084      	sub	sp, #16
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	f107 0014 	add.w	r0, r7, #20
 8002f0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	b004      	add	sp, #16
 8002f1c:	4770      	bx	lr

08002f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f26:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	f107 0014 	add.w	r0, r7, #20
 8002f78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	b004      	add	sp, #16
 8002fa8:	4770      	bx	lr

08002faa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <memset>:
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4402      	add	r2, r0
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d100      	bne.n	8002fc8 <memset+0xa>
 8002fc6:	4770      	bx	lr
 8002fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8002fcc:	e7f9      	b.n	8002fc2 <memset+0x4>
	...

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4d0c      	ldr	r5, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	f000 f81a 	bl	8003018 <_init>
 8002fe4:	2600      	movs	r6, #0
 8002fe6:	4d0a      	ldr	r5, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	0800305c 	.word	0x0800305c
 800300c:	0800305c 	.word	0x0800305c
 8003010:	0800305c 	.word	0x0800305c
 8003014:	08003060 	.word	0x08003060

08003018 <_init>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr

08003024 <_fini>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr
