
DOAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003c00  08003c00  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c00  08003c00  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000014  08003c20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08003c20  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010af2  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a9  00000000  00000000  00030b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00033320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ceb  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf3  00000000  00000000  000350a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b2b  00000000  00000000  00037d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000922e9  00000000  00000000  0004b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047c4  00000000  00000000  000ddbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e2370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bbc 	.word	0x08003bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003bbc 	.word	0x08003bbc

0800014c <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fceb 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000a8 	.word	0x200000a8

080001ac <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80001b0:	2033      	movs	r0, #51	; 0x33
 80001b2:	f7ff ffcb 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f7ff ffc8 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	; 0x32
 80001be:	f000 fd23 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80001c2:	2028      	movs	r0, #40	; 0x28
 80001c4:	f7ff ffc2 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001c8:	2032      	movs	r0, #50	; 0x32
 80001ca:	f000 fd1d 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffbc 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001d4:	2032      	movs	r0, #50	; 0x32
 80001d6:	f000 fd17 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80001da:	2006      	movs	r0, #6
 80001dc:	f7ff ffb6 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 fd11 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80001e6:	200c      	movs	r0, #12
 80001e8:	f7ff ffb0 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001ec:	2032      	movs	r0, #50	; 0x32
 80001ee:	f000 fd0b 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80001f2:	2002      	movs	r0, #2
 80001f4:	f7ff ffaa 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001f8:	2032      	movs	r0, #50	; 0x32
 80001fa:	f000 fd05 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x80);
 80001fe:	2080      	movs	r0, #128	; 0x80
 8000200:	f7ff ffa4 	bl	800014c <lcd_send_cmd>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <lcd_clear_display>:
{
	while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ff9d 	bl	800014c <lcd_send_cmd>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <PWM_Control>:
#include "PWM_Control.h"

const int TIM_CLOCK = 24000000;

void PWM_Control(int dutyCycle, int frequency)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	TIM1->ARR  =  TIM_CLOCK/frequency;
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <PWM_Control+0x38>)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	fb92 f2f3 	sdiv	r2, r2, r3
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <PWM_Control+0x3c>)
 800022c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = ((dutyCycle)*(TIM1->ARR))/100;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <PWM_Control+0x3c>)
 8000230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <PWM_Control+0x3c>)
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <PWM_Control+0x40>)
 800023c:	fba1 1303 	umull	r1, r3, r1, r3
 8000240:	095b      	lsrs	r3, r3, #5
 8000242:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	016e3600 	.word	0x016e3600
 8000254:	40012c00 	.word	0x40012c00
 8000258:	51eb851f 	.word	0x51eb851f

0800025c <PWM_Enable>:

void PWM_Enable(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4802      	ldr	r0, [pc, #8]	; (800026c <PWM_Enable+0x10>)
 8000264:	f002 fe38 	bl	8002ed8 <HAL_TIM_PWM_Start>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000fc 	.word	0x200000fc

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc66 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f828 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9fc 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f9dc 	bl	800063c <MX_DMA_Init>
  MX_ADC1_Init();
 8000284:	f000 f880 	bl	8000388 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000288:	f000 f8e8 	bl	800045c <MX_I2C1_Init>
  MX_TIM1_Init();
 800028c:	f000 f914 	bl	80004b8 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000290:	f000 f9b2 	bl	80005f8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000294:	f7ff ff8a 	bl	80001ac <lcd_init>
  lcd_clear_display();
 8000298:	f7ff ffb6 	bl	8000208 <lcd_clear_display>
  PWM_Control(dutyCycle,100000);
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <main+0x50>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4908      	ldr	r1, [pc, #32]	; (80002c4 <main+0x54>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffb8 	bl	8000218 <PWM_Control>
  PWM_Enable();
 80002a8:	f7ff ffd8 	bl	800025c <PWM_Enable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80002ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <main+0x58>)
 80002b2:	f001 fae9 	bl	8001888 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80002b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ba:	f000 fca5 	bl	8000c08 <HAL_Delay>
	  HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80002be:	e7f5      	b.n	80002ac <main+0x3c>
 80002c0:	20000000 	.word	0x20000000
 80002c4:	000186a0 	.word	0x000186a0
 80002c8:	40011000 	.word	0x40011000

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 fbdb 	bl	8003a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800031c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	4618      	mov	r0, r3
 8000324:	f002 f87e 	bl	8002424 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032e:	f000 fa57 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800033e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	2101      	movs	r1, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f002 faea 	bl	8002928 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800035a:	f000 fa41 	bl	80007e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800035e:	2312      	movs	r3, #18
 8000360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000366:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800036c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f002 fc53 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800037c:	f000 fa30 	bl	80007e0 <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	; 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <MX_ADC1_Init+0xcc>)
 800039a:	4a2f      	ldr	r2, [pc, #188]	; (8000458 <MX_ADC1_Init+0xd0>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800039e:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ba:	4b26      	ldr	r3, [pc, #152]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c6:	4823      	ldr	r0, [pc, #140]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003c8:	f000 fc42 	bl	8000c50 <HAL_ADC_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003d2:	f000 fa05 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003da:	2301      	movs	r3, #1
 80003dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	481b      	ldr	r0, [pc, #108]	; (8000454 <MX_ADC1_Init+0xcc>)
 80003e8:	f000 fd0a 	bl	8000e00 <HAL_ADC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f9f5 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4814      	ldr	r0, [pc, #80]	; (8000454 <MX_ADC1_Init+0xcc>)
 8000404:	f000 fcfc 	bl	8000e00 <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800040e:	f000 f9e7 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000412:	2302      	movs	r3, #2
 8000414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000416:	2303      	movs	r3, #3
 8000418:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_ADC1_Init+0xcc>)
 8000420:	f000 fcee 	bl	8000e00 <HAL_ADC_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800042a:	f000 f9d9 	bl	80007e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800042e:	2303      	movs	r3, #3
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000432:	2304      	movs	r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <MX_ADC1_Init+0xcc>)
 800043c:	f000 fce0 	bl	8000e00 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000446:	f000 f9cb 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000034 	.word	0x20000034
 8000458:	40012400 	.word	0x40012400

0800045c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_I2C1_Init+0x50>)
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <MX_I2C1_Init+0x54>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_I2C1_Init+0x50>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_I2C1_Init+0x58>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_I2C1_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_I2C1_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_I2C1_Init+0x50>)
 800047a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_I2C1_Init+0x50>)
 800049a:	f001 fa27 	bl	80018ec <HAL_I2C_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 f99c 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000a8 	.word	0x200000a8
 80004b0:	40005400 	.word	0x40005400
 80004b4:	000186a0 	.word	0x000186a0

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2220      	movs	r2, #32
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fad0 	bl	8003a96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f6:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <MX_TIM1_Init+0x138>)
 80004f8:	4a3e      	ldr	r2, [pc, #248]	; (80005f4 <MX_TIM1_Init+0x13c>)
 80004fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004fc:	4b3c      	ldr	r3, [pc, #240]	; (80005f0 <MX_TIM1_Init+0x138>)
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000502:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <MX_TIM1_Init+0x138>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000508:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <MX_TIM1_Init+0x138>)
 800050a:	2263      	movs	r2, #99	; 0x63
 800050c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <MX_TIM1_Init+0x138>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000514:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <MX_TIM1_Init+0x138>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <MX_TIM1_Init+0x138>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000520:	4833      	ldr	r0, [pc, #204]	; (80005f0 <MX_TIM1_Init+0x138>)
 8000522:	f002 fc31 	bl	8002d88 <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800052c:	f000 f958 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800053a:	4619      	mov	r1, r3
 800053c:	482c      	ldr	r0, [pc, #176]	; (80005f0 <MX_TIM1_Init+0x138>)
 800053e:	f002 fe2f 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 f94a 	bl	80007e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800054c:	4828      	ldr	r0, [pc, #160]	; (80005f0 <MX_TIM1_Init+0x138>)
 800054e:	f002 fc6a 	bl	8002e26 <HAL_TIM_PWM_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000558:	f000 f942 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000568:	4619      	mov	r1, r3
 800056a:	4821      	ldr	r0, [pc, #132]	; (80005f0 <MX_TIM1_Init+0x138>)
 800056c:	f003 f984 	bl	8003878 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000576:	f000 f933 	bl	80007e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057a:	2360      	movs	r3, #96	; 0x60
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000586:	2300      	movs	r3, #0
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	4814      	ldr	r0, [pc, #80]	; (80005f0 <MX_TIM1_Init+0x138>)
 80005a0:	f002 fd3c 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80005aa:	f000 f919 	bl	80007e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4619      	mov	r1, r3
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <MX_TIM1_Init+0x138>)
 80005d2:	f003 f9af 	bl	8003934 <HAL_TIMEx_ConfigBreakDeadTime>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005dc:	f000 f900 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <MX_TIM1_Init+0x138>)
 80005e2:	f000 f9f9 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 80005e6:	bf00      	nop
 80005e8:	3758      	adds	r7, #88	; 0x58
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000fc 	.word	0x200000fc
 80005f4:	40012c00 	.word	0x40012c00

080005f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_USB_PCD_Init+0x40>)
 8000600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000604:	2208      	movs	r2, #8
 8000606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800060a:	2202      	movs	r2, #2
 800060c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000622:	f001 fdff 	bl	8002224 <HAL_PCD_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800062c:	f000 f8d8 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000144 	.word	0x20000144
 8000638:	40005c00 	.word	0x40005c00

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_DMA_Init+0x38>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <MX_DMA_Init+0x38>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_DMA_Init+0x38>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	200b      	movs	r0, #11
 8000660:	f000 fddf 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000664:	200b      	movs	r0, #11
 8000666:	f000 fdf8 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068c:	4b43      	ldr	r3, [pc, #268]	; (800079c <MX_GPIO_Init+0x124>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a42      	ldr	r2, [pc, #264]	; (800079c <MX_GPIO_Init+0x124>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b40      	ldr	r3, [pc, #256]	; (800079c <MX_GPIO_Init+0x124>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a4:	4b3d      	ldr	r3, [pc, #244]	; (800079c <MX_GPIO_Init+0x124>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <MX_GPIO_Init+0x124>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b3a      	ldr	r3, [pc, #232]	; (800079c <MX_GPIO_Init+0x124>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b37      	ldr	r3, [pc, #220]	; (800079c <MX_GPIO_Init+0x124>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a36      	ldr	r2, [pc, #216]	; (800079c <MX_GPIO_Init+0x124>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_GPIO_Init+0x124>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_GPIO_Init+0x124>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a30      	ldr	r2, [pc, #192]	; (800079c <MX_GPIO_Init+0x124>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <MX_GPIO_Init+0x124>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	482b      	ldr	r0, [pc, #172]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006f4:	f001 f8b0 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOAD_CTR_Pin|TESTB11_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f640 0101 	movw	r1, #2049	; 0x801
 80006fe:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000700:	f001 f8aa 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	4827      	ldr	r0, [pc, #156]	; (80007a8 <MX_GPIO_Init+0x130>)
 800070c:	f001 f8a4 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	481d      	ldr	r0, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x128>)
 800072a:	f000 ff11 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_DISPLAY_Pin */
  GPIO_InitStruct.Pin = CHANGE_DISPLAY_Pin;
 800072e:	2310      	movs	r3, #16
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_GPIO_Init+0x134>)
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHANGE_DISPLAY_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	4819      	ldr	r0, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x130>)
 8000742:	f000 ff05 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_CTR_Pin TESTB11_Pin */
  GPIO_InitStruct.Pin = LOAD_CTR_Pin|TESTB11_Pin;
 8000746:	f640 0301 	movw	r3, #2049	; 0x801
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000760:	f000 fef6 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUCK_EN_Pin */
  GPIO_InitStruct.Pin = BUCK_EN_Pin;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_EN_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <MX_GPIO_Init+0x130>)
 800077e:	f000 fee7 	bl	8001550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200a      	movs	r0, #10
 8000788:	f000 fd4b 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800078c:	200a      	movs	r0, #10
 800078e:	f000 fd64 	bl	800125a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	40011000 	.word	0x40011000
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	40010800 	.word	0x40010800
 80007ac:	10210000 	.word	0x10210000

080007b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CHANGE_DISPLAY_Pin)
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	2b10      	cmp	r3, #16
 80007be:	d106      	bne.n	80007ce <HAL_GPIO_EXTI_Callback+0x1e>
	{
		display = ~display;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80007ca:	701a      	strb	r2, [r3, #0]
	} else
	{
		__NOP();
	}

}
 80007cc:	e000      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 80007ce:	bf00      	nop
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000030 	.word	0x20000030

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_MspInit+0x5c>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_MspInit+0x5c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x5c>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_MspInit+0x5c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_MspInit+0x60>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_MspInit+0x60>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000
 800084c:	40010000 	.word	0x40010000

08000850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a28      	ldr	r2, [pc, #160]	; (800090c <HAL_ADC_MspInit+0xbc>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d149      	bne.n	8000904 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_ADC_MspInit+0xc0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|CURRENT_OUT_Pin|VADC_IN_Pin|VADC_OUT_Pin;
 80008a0:	230f      	movs	r3, #15
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a4:	2303      	movs	r3, #3
 80008a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4819      	ldr	r0, [pc, #100]	; (8000914 <HAL_ADC_MspInit+0xc4>)
 80008b0:	f000 fe4e 	bl	8001550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008b6:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_ADC_MspInit+0xcc>)
 80008b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008de:	2220      	movs	r2, #32
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008ea:	f000 fcd1 	bl	8001290 <HAL_DMA_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008f4:	f7ff ff74 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 80008fc:	621a      	str	r2, [r3, #32]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_ADC_MspInit+0xc8>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40012400 	.word	0x40012400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	20000064 	.word	0x20000064
 800091c:	40020008 	.word	0x40020008

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <HAL_I2C_MspInit+0x70>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d123      	bne.n	8000988 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_I2C_MspInit+0x74>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_I2C_MspInit+0x74>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_I2C_MspInit+0x74>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000958:	23c0      	movs	r3, #192	; 0xc0
 800095a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_I2C_MspInit+0x78>)
 800096c:	f000 fdf0 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_I2C_MspInit+0x74>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_I2C_MspInit+0x74>)
 8000976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097a:	61d3      	str	r3, [r2, #28]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_I2C_MspInit+0x74>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40005400 	.word	0x40005400
 8000994:	40021000 	.word	0x40021000
 8000998:	40010c00 	.word	0x40010c00

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <HAL_TIM_Base_MspInit+0x34>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10b      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_TIM_MspPostInit+0x5c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d118      	bne.n	8000a2a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_TIM_MspPostInit+0x60>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_TIM_MspPostInit+0x60>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_TIM_MspPostInit+0x60>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_TIM_MspPostInit+0x64>)
 8000a26:	f000 fd93 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <HAL_PCD_MspInit+0x34>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d10b      	bne.n	8000a6a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_PCD_MspInit+0x38>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_PCD_MspInit+0x38>)
 8000a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_PCD_MspInit+0x38>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	40005c00 	.word	0x40005c00
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 f885 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_DISPLAY_Pin);
 8000ace:	2010      	movs	r0, #16
 8000ad0:	f000 fef4 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ade:	f000 fc31 	bl	8001344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000064 	.word	0x20000064

08000aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
                                                                                                                                                                                                                                                                                        bl  SystemInit
 8000af8:	f7ff fff8 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000afe:	490c      	ldr	r1, [pc, #48]	; (8000b30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b14:	4c09      	ldr	r4, [pc, #36]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 ffc1 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fba3 	bl	8000270 <main>
  bx lr
 8000b2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b34:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000b38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b3c:	200005d0 	.word	0x200005d0

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x28>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 fb59 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe44 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fb71 	bl	8001276 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 fb39 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000434 	.word	0x20000434

08000bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000434 	.word	0x20000434

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff fff0 	bl	8000bf4 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffe0 	bl	8000bf4 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c

08000c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e0be      	b.n	8000df0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fdde 	bl	8000850 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f9ab 	bl	8000ff0 <ADC_ConversionStop_Disable>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8099 	bne.w	8000dde <HAL_ADC_Init+0x18e>
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8095 	bne.w	8000dde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	f043 0202 	orr.w	r2, r3, #2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7b1b      	ldrb	r3, [r3, #12]
 8000cd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce8:	d003      	beq.n	8000cf2 <HAL_ADC_Init+0xa2>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d102      	bne.n	8000cf8 <HAL_ADC_Init+0xa8>
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	e000      	b.n	8000cfa <HAL_ADC_Init+0xaa>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7d1b      	ldrb	r3, [r3, #20]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d119      	bne.n	8000d3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7b1b      	ldrb	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	035a      	lsls	r2, r3, #13
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e00b      	b.n	8000d3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f043 0220 	orr.w	r2, r3, #32
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_ADC_Init+0x1a8>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d6c:	d003      	beq.n	8000d76 <HAL_ADC_Init+0x126>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d104      	bne.n	8000d80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	051b      	lsls	r3, r3, #20
 8000d7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_ADC_Init+0x1ac>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d10b      	bne.n	8000dbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f023 0303 	bic.w	r3, r3, #3
 8000db2:	f043 0201 	orr.w	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dba:	e018      	b.n	8000dee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f023 0312 	bic.w	r3, r3, #18
 8000dc4:	f043 0210 	orr.w	r2, r3, #16
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ddc:	e007      	b.n	8000dee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f043 0210 	orr.w	r2, r3, #16
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dfc:	ff1f0efe 	.word	0xff1f0efe

08000e00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x20>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0dc      	b.n	8000fda <HAL_ADC_ConfigChannel+0x1da>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d81c      	bhi.n	8000e6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b05      	subs	r3, #5
 8000e42:	221f      	movs	r2, #31
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4019      	ands	r1, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	3b05      	subs	r3, #5
 8000e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
 8000e68:	e03c      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	d81c      	bhi.n	8000eac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3b23      	subs	r3, #35	; 0x23
 8000e84:	221f      	movs	r2, #31
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b23      	subs	r3, #35	; 0x23
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eaa:	e01b      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	3b41      	subs	r3, #65	; 0x41
 8000ebe:	221f      	movs	r2, #31
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3b41      	subs	r3, #65	; 0x41
 8000ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d91c      	bls.n	8000f26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68d9      	ldr	r1, [r3, #12]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	3b1e      	subs	r3, #30
 8000efe:	2207      	movs	r2, #7
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4019      	ands	r1, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6898      	ldr	r0, [r3, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	e019      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6919      	ldr	r1, [r3, #16]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	2207      	movs	r2, #7
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d003      	beq.n	8000f6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f66:	2b11      	cmp	r3, #17
 8000f68:	d132      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d125      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d126      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d11a      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_ADC_ConfigChannel+0x1ec>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	0c9a      	lsrs	r2, r3, #18
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <HAL_ADC_ConfigChannel+0x1b2>
 8000fbe:	e007      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f043 0220 	orr.w	r2, r3, #32
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12e      	bne.n	8001068 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0201 	bic.w	r2, r2, #1
 8001018:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800101a:	f7ff fdeb 	bl	8000bf4 <HAL_GetTick>
 800101e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001020:	e01b      	b.n	800105a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001022:	f7ff fde7 	bl	8000bf4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d914      	bls.n	800105a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10d      	bne.n	800105a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f043 0210 	orr.w	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	f043 0201 	orr.w	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e007      	b.n	800106a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0dc      	beq.n	8001022 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4906      	ldr	r1, [pc, #24]	; (800110c <__NVIC_EnableIRQ+0x34>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff90 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff2d 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff42 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff90 	bl	8001164 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5f 	bl	8001110 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff35 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e043      	b.n	800132e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_DMA_Init+0xa8>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_DMA_Init+0xac>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	009a      	lsls	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_DMA_Init+0xb0>)
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	bffdfff8 	.word	0xbffdfff8
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2204      	movs	r2, #4
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d04f      	beq.n	800140c <HAL_DMA_IRQHandler+0xc8>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d04a      	beq.n	800140c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d107      	bne.n	8001394 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a66      	ldr	r2, [pc, #408]	; (8001534 <HAL_DMA_IRQHandler+0x1f0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d029      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xae>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_DMA_IRQHandler+0x1f4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d022      	beq.n	80013ee <HAL_DMA_IRQHandler+0xaa>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a63      	ldr	r2, [pc, #396]	; (800153c <HAL_DMA_IRQHandler+0x1f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0xa4>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a62      	ldr	r2, [pc, #392]	; (8001540 <HAL_DMA_IRQHandler+0x1fc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x9e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a60      	ldr	r2, [pc, #384]	; (8001544 <HAL_DMA_IRQHandler+0x200>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00a      	beq.n	80013dc <HAL_DMA_IRQHandler+0x98>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5f      	ldr	r2, [pc, #380]	; (8001548 <HAL_DMA_IRQHandler+0x204>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d102      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x92>
 80013d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d4:	e00e      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013da:	e00b      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013e0:	e008      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e6:	e005      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ec:	e002      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013f2:	2304      	movs	r3, #4
 80013f4:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_DMA_IRQHandler+0x208>)
 80013f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8094 	beq.w	800152a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800140a:	e08e      	b.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2202      	movs	r2, #2
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d056      	beq.n	80014ca <HAL_DMA_IRQHandler+0x186>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d051      	beq.n	80014ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020a 	bic.w	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <HAL_DMA_IRQHandler+0x1f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d029      	beq.n	80014aa <HAL_DMA_IRQHandler+0x166>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a37      	ldr	r2, [pc, #220]	; (8001538 <HAL_DMA_IRQHandler+0x1f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x162>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a35      	ldr	r2, [pc, #212]	; (800153c <HAL_DMA_IRQHandler+0x1f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x15c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_DMA_IRQHandler+0x1fc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d012      	beq.n	800149a <HAL_DMA_IRQHandler+0x156>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_DMA_IRQHandler+0x200>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00a      	beq.n	8001494 <HAL_DMA_IRQHandler+0x150>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a31      	ldr	r2, [pc, #196]	; (8001548 <HAL_DMA_IRQHandler+0x204>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <HAL_DMA_IRQHandler+0x14a>
 8001488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800148c:	e00e      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 800148e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001492:	e00b      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 8001494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001498:	e008      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	e005      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a4:	e002      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014a6:	2320      	movs	r3, #32
 80014a8:	e000      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014aa:	2302      	movs	r3, #2
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_DMA_IRQHandler+0x208>)
 80014ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d034      	beq.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014c8:	e02f      	b.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2208      	movs	r2, #8
 80014d0:	409a      	lsls	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d028      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d023      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020e 	bic.w	r2, r2, #14
 80014f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
    }
  }
  return;
 800152a:	bf00      	nop
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020008 	.word	0x40020008
 8001538:	4002001c 	.word	0x4002001c
 800153c:	40020030 	.word	0x40020030
 8001540:	40020044 	.word	0x40020044
 8001544:	40020058 	.word	0x40020058
 8001548:	4002006c 	.word	0x4002006c
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e169      	b.n	8001838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8158 	bne.w	8001832 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a9a      	ldr	r2, [pc, #616]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d05e      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 800158c:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d875      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 8001592:	4a98      	ldr	r2, [pc, #608]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d058      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 8001598:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d86f      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 800159e:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d052      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015a4:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d869      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015aa:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04c      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015b0:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d863      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015b6:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d046      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015bc:	4a90      	ldr	r2, [pc, #576]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d85d      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d82a      	bhi.n	800161c <HAL_GPIO_Init+0xcc>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d859      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HAL_GPIO_Init+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001637 	.word	0x08001637
 80015dc:	08001679 	.word	0x08001679
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	0800167f 	.word	0x0800167f
 80015e8:	0800167f 	.word	0x0800167f
 80015ec:	0800167f 	.word	0x0800167f
 80015f0:	0800167f 	.word	0x0800167f
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	0800167f 	.word	0x0800167f
 8001600:	0800167f 	.word	0x0800167f
 8001604:	0800167f 	.word	0x0800167f
 8001608:	0800167f 	.word	0x0800167f
 800160c:	0800167f 	.word	0x0800167f
 8001610:	0800167f 	.word	0x0800167f
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001641 	.word	0x08001641
 800161c:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_GPIO_Init+0x2b4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001622:	e02c      	b.n	800167e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e029      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e024      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3308      	adds	r3, #8
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e01f      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	330c      	adds	r3, #12
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e01a      	b.n	8001680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e013      	b.n	8001680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e009      	b.n	8001680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x130>
          break;
 800167e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d801      	bhi.n	800168a <HAL_GPIO_Init+0x13a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_GPIO_Init+0x13e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d802      	bhi.n	800169c <HAL_GPIO_Init+0x14c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x152>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3b08      	subs	r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	210f      	movs	r1, #15
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80b1 	beq.w	8001832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2bc>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a40      	ldr	r2, [pc, #256]	; (8001810 <HAL_GPIO_Init+0x2c0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1ec>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3f      	ldr	r2, [pc, #252]	; (8001814 <HAL_GPIO_Init+0x2c4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1e4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_GPIO_Init+0x2cc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1e0>
 800172c:	2303      	movs	r3, #3
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001730:	2304      	movs	r3, #4
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800173c:	2300      	movs	r3, #0
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	492f      	ldr	r1, [pc, #188]	; (800180c <HAL_GPIO_Init+0x2bc>)
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	492c      	ldr	r1, [pc, #176]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4928      	ldr	r1, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4922      	ldr	r1, [pc, #136]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4918      	ldr	r1, [pc, #96]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4914      	ldr	r1, [pc, #80]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e021      	b.n	8001832 <HAL_GPIO_Init+0x2e2>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400
 8001820:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_GPIO_Init+0x304>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	43db      	mvns	r3, r3
 800182c:	4909      	ldr	r1, [pc, #36]	; (8001854 <HAL_GPIO_Init+0x304>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f ae8e 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43d9      	mvns	r1, r3
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	400b      	ands	r3, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe ff68 	bl	80007b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12b      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff f804 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001950:	f001 f932 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a81      	ldr	r2, [pc, #516]	; (8001b60 <HAL_I2C_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d807      	bhi.n	8001970 <HAL_I2C_Init+0x84>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a80      	ldr	r2, [pc, #512]	; (8001b64 <HAL_I2C_Init+0x278>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e006      	b.n	800197e <HAL_I2C_Init+0x92>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a7d      	ldr	r2, [pc, #500]	; (8001b68 <HAL_I2C_Init+0x27c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	bf94      	ite	ls
 8001978:	2301      	movls	r3, #1
 800197a:	2300      	movhi	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	; (8001b6c <HAL_I2C_Init+0x280>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d802      	bhi.n	80019c0 <HAL_I2C_Init+0xd4>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	e009      	b.n	80019d4 <HAL_I2C_Init+0xe8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a69      	ldr	r2, [pc, #420]	; (8001b70 <HAL_I2C_Init+0x284>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	495c      	ldr	r1, [pc, #368]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d819      	bhi.n	8001a28 <HAL_I2C_Init+0x13c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_I2C_Init+0x138>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	e051      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x168>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x18e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x196>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff f834 	bl	8000bf4 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	; (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f964 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f89c 	bl	8001d70 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa22 	bl	80020a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fa19 	bl	8002138 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d006      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d003      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d98:	d108      	bne.n	8001dac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e00b      	b.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d107      	bne.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f84f 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dea:	d103      	bne.n	8001df4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e035      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e00:	d108      	bne.n	8001e14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	e01b      	b.n	8001e4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e14:	897b      	ldrh	r3, [r7, #10]
 8001e16:	11db      	asrs	r3, r3, #7
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 0306 	and.w	r3, r3, #6
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f063 030f 	orn	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <I2C_MasterRequestWrite+0xfc>)
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f898 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e010      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <I2C_MasterRequestWrite+0x100>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f888 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010008 	.word	0x00010008
 8001e70:	00010002 	.word	0x00010002

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e048      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d044      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7fe feb1 	bl	8000bf4 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d139      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10d      	bne.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	e00c      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d116      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e023      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d093      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f76:	e071      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d123      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e067      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d041      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7fe fe0c 	bl	8000bf4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d136      	bne.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e00b      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e021      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10c      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e00b      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f af6d 	bne.w	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f886 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e034      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d028      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7fe fd91 	bl	8000bf4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11d      	bne.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d016      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d1c3      	bne.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	e034      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f83e 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e034      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7fe fd49 	bl	8000bf4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11d      	bne.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d016      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d1c3      	bne.n	8002146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d11b      	bne.n	8002218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af06      	add	r7, sp, #24
 800222a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0f1      	b.n	800241a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fbf8 	bl	8000a40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fbca 	bl	80039f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	687e      	ldr	r6, [r7, #4]
 800226a:	466d      	mov	r5, sp
 800226c:	f106 0410 	add.w	r4, r6, #16
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	602b      	str	r3, [r5, #0]
 8002278:	1d33      	adds	r3, r6, #4
 800227a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f001 fbaa 	bl	80039d6 <USB_CoreInit>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0c2      	b.n	800241a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f001 fbc5 	bl	8003a2a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e040      	b.n	8002328 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3301      	adds	r3, #1
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3303      	adds	r3, #3
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	333c      	adds	r3, #60	; 0x3c
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	3340      	adds	r3, #64	; 0x40
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3b9      	bcc.n	80022a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e044      	b.n	80023c2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	f203 1369 	addw	r3, r3, #361	; 0x169
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3b5      	bcc.n	8002338 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	687e      	ldr	r6, [r7, #4]
 80023d4:	466d      	mov	r5, sp
 80023d6:	f106 0410 	add.w	r4, r6, #16
 80023da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	1d33      	adds	r3, r6, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f001 fb2b 	bl	8003a42 <USB_DevInit>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00d      	b.n	800241a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fb35 	bl	8003a82 <USB_DevDisconnect>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e272      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00c      	beq.n	800246a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002450:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d112      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
 800245c:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06c      	beq.n	8002550 <HAL_RCC_OscConfig+0x12c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d168      	bne.n	8002550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e24c      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x76>
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e02e      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xbc>
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a71      	ldr	r2, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fb78 	bl	8000bf4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fb74 	bl	8000bf4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e200      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xe4>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fb64 	bl	8000bf4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fb60 	bl	8000bf4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1ec      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x10c>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c0      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4939      	ldr	r1, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fb19 	bl	8000bf4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe fb15 	bl	8000bf4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a1      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4927      	ldr	r1, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe faf8 	bl	8000bf4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe faf4 	bl	8000bf4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e180      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03a      	beq.n	80026a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe fad8 	bl	8000bf4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fad4 	bl	8000bf4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e160      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002666:	2001      	movs	r0, #1
 8002668:	f000 faba 	bl	8002be0 <RCC_Delay>
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe fabe 	bl	8000bf4 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267a:	e00f      	b.n	800269c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe faba 	bl	8000bf4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d908      	bls.n	800269c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e146      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	42420000 	.word	0x42420000
 8002698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e9      	bne.n	800267c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a6 	beq.w	8002802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a87      	ldr	r2, [pc, #540]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7e      	ldr	r2, [pc, #504]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fa7b 	bl	8000bf4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe fa77 	bl	8000bf4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e103      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x312>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e02d      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x334>
 800273e:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a66      	ldr	r2, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x356>
 8002760:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a5a      	ldr	r2, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe fa2b 	bl	8000bf4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fa27 	bl	8000bf4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0b1      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x37e>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fa15 	bl	8000bf4 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fa11 	bl	8000bf4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e09b      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a3b      	ldr	r2, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d061      	beq.n	80028dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d146      	bne.n	80028ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe f9e5 	bl	8000bf4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f9e1 	bl	8000bf4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e06d      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4921      	ldr	r1, [pc, #132]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a19      	ldr	r1, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	430b      	orrs	r3, r1
 800287a:	491b      	ldr	r1, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe f9b5 	bl	8000bf4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe f9b1 	bl	8000bf4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e03d      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x46a>
 80028ac:	e035      	b.n	800291a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe f99e 	bl	8000bf4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe f99a 	bl	8000bf4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e026      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x498>
 80028da:	e01e      	b.n	800291a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e019      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x500>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	429a      	cmp	r2, r3
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4965      	ldr	r1, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe f8ec 	bl	8000bf4 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe f8e8 	bl	8000bf4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0207 	bic.w	r2, r3, #7
 8002a5e:	4922      	ldr	r1, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f84a 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08003bd4 	.word	0x08003bd4
 8002af4:	20000004 	.word	0x20000004
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x30>
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x36>
 8002b2a:	e027      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2e:	613b      	str	r3, [r7, #16]
      break;
 8002b30:	e027      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0c5b      	lsrs	r3, r3, #17
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5e:	fb03 f202 	mul.w	r2, r3, r2
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e004      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	613b      	str	r3, [r7, #16]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	693b      	ldr	r3, [r7, #16]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	007a1200 	.word	0x007a1200
 8002b98:	08003bec 	.word	0x08003bec
 8002b9c:	08003bfc 	.word	0x08003bfc
 8002ba0:	003d0900 	.word	0x003d0900

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bbc:	f7ff fff2 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08003be4 	.word	0x08003be4

08002be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <RCC_Delay+0x34>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <RCC_Delay+0x38>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bfc:	bf00      	nop
  }
  while (Delay --);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	60fa      	str	r2, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <RCC_Delay+0x1c>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000004 	.word	0x20000004
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a42      	ldr	r2, [pc, #264]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7c:	f7fd ffba 	bl	8000bf4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fd ffb6 	bl	8000bf4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e06d      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca2:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02e      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d027      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd6:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fd ff85 	bl	8000bf4 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fd ff81 	bl	8000bf4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e036      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4917      	ldr	r1, [pc, #92]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	490b      	ldr	r1, [pc, #44]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4904      	ldr	r1, [pc, #16]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
 8002d84:	42420440 	.word	0x42420440

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fdf4 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fab2 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e041      	b.n	8002ebc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f839 	bl	8002ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f000 fa63 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_TIM_PWM_Start+0x24>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e022      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d109      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x3e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	e015      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d109      	bne.n	8002f30 <HAL_TIM_PWM_Start+0x58>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e008      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e05e      	b.n	8003008 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x82>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x92>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fc50 	bl	8003830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_PWM_Start+0x138>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d107      	bne.n	8002faa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_TIM_PWM_Start+0x138>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0xfa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d009      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0xfa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_TIM_PWM_Start+0x13c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0xfa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_TIM_PWM_Start+0x140>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d111      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d010      	beq.n	8003006 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff4:	e007      	b.n	8003006 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800

0800301c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003036:	2302      	movs	r3, #2
 8003038:	e0ae      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	f200 809f 	bhi.w	8003188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003085 	.word	0x08003085
 8003054:	08003189 	.word	0x08003189
 8003058:	08003189 	.word	0x08003189
 800305c:	08003189 	.word	0x08003189
 8003060:	080030c5 	.word	0x080030c5
 8003064:	08003189 	.word	0x08003189
 8003068:	08003189 	.word	0x08003189
 800306c:	08003189 	.word	0x08003189
 8003070:	08003107 	.word	0x08003107
 8003074:	08003189 	.word	0x08003189
 8003078:	08003189 	.word	0x08003189
 800307c:	08003189 	.word	0x08003189
 8003080:	08003147 	.word	0x08003147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f9b2 	bl	80033f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0208 	orr.w	r2, r2, #8
 800309e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6999      	ldr	r1, [r3, #24]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	619a      	str	r2, [r3, #24]
      break;
 80030c2:	e064      	b.n	800318e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f9f8 	bl	80034c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	021a      	lsls	r2, r3, #8
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	619a      	str	r2, [r3, #24]
      break;
 8003104:	e043      	b.n	800318e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fa41 	bl	8003594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0208 	orr.w	r2, r2, #8
 8003120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0204 	bic.w	r2, r2, #4
 8003130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69d9      	ldr	r1, [r3, #28]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	61da      	str	r2, [r3, #28]
      break;
 8003144:	e023      	b.n	800318e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa8b 	bl	8003668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	021a      	lsls	r2, r3, #8
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	61da      	str	r2, [r3, #28]
      break;
 8003186:	e002      	b.n	800318e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
      break;
 800318c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_ConfigClockSource+0x1c>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0b4      	b.n	8003326 <HAL_TIM_ConfigClockSource+0x186>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d03e      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0xd4>
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fa:	f200 8087 	bhi.w	800330c <HAL_TIM_ConfigClockSource+0x16c>
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	f000 8086 	beq.w	8003312 <HAL_TIM_ConfigClockSource+0x172>
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d87f      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b70      	cmp	r3, #112	; 0x70
 800320e:	d01a      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0xa6>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d87b      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d050      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x11a>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d877      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d03c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xfa>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d873      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d058      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x13a>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d86f      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d064      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d86b      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d060      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x15a>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d867      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05c      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x15a>
 8003240:	2b10      	cmp	r3, #16
 8003242:	d05a      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	e062      	b.n	800330c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003256:	f000 facc 	bl	80037f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	609a      	str	r2, [r3, #8]
      break;
 8003272:	e04f      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003284:	f000 fab5 	bl	80037f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003296:	609a      	str	r2, [r3, #8]
      break;
 8003298:	e03c      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	461a      	mov	r2, r3
 80032a8:	f000 fa2c 	bl	8003704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2150      	movs	r1, #80	; 0x50
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa83 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80032b8:	e02c      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c6:	461a      	mov	r2, r3
 80032c8:	f000 fa4a 	bl	8003760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2160      	movs	r1, #96	; 0x60
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa73 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80032d8:	e01c      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	461a      	mov	r2, r3
 80032e8:	f000 fa0c 	bl	8003704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fa63 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80032f8:	e00c      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f000 fa5a 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 800330a:	e003      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e000      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800

080033f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <TIM_OC1_SetConfig+0xc8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10c      	bne.n	800346a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0308 	bic.w	r3, r3, #8
 8003456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <TIM_OC1_SetConfig+0xc8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d111      	bne.n	8003496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00

080034c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f023 0210 	bic.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0320 	bic.w	r3, r3, #32
 800350a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <TIM_OC2_SetConfig+0xd0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10d      	bne.n	800353c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <TIM_OC2_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00

08003594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <TIM_OC3_SetConfig+0xd0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <TIM_OC3_SetConfig+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <TIM_OC4_SetConfig+0x98>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d109      	bne.n	80036dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00

08003704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 030a 	bic.w	r3, r3, #10
 8003740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	031b      	lsls	r3, r3, #12
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f043 0307 	orr.w	r3, r3, #7
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	021a      	lsls	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	431a      	orrs	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1a      	ldr	r2, [r3, #32]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800388c:	2302      	movs	r3, #2
 800388e:	e046      	b.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d009      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10c      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4313      	orrs	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800

08003934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800394c:	2302      	movs	r3, #2
 800394e:	e03d      	b.n	80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039d6:	b084      	sub	sp, #16
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	f107 0014 	add.w	r0, r7, #20
 80039e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	b004      	add	sp, #16
 80039f4:	4770      	bx	lr

080039f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039fe:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a42:	b084      	sub	sp, #16
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	f107 0014 	add.w	r0, r7, #20
 8003a50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	b004      	add	sp, #16
 8003a80:	4770      	bx	lr

08003a82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <memset>:
 8003a96:	4603      	mov	r3, r0
 8003a98:	4402      	add	r2, r0
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <memset+0xa>
 8003a9e:	4770      	bx	lr
 8003aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa4:	e7f9      	b.n	8003a9a <memset+0x4>
	...

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2600      	movs	r6, #0
 8003aac:	4d0c      	ldr	r5, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	f000 f880 	bl	8003bbc <_init>
 8003abc:	2600      	movs	r6, #0
 8003abe:	4d0a      	ldr	r5, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003c00 	.word	0x08003c00
 8003ae4:	08003c00 	.word	0x08003c00
 8003ae8:	08003c00 	.word	0x08003c00
 8003aec:	08003c08 	.word	0x08003c08

08003af0 <__retarget_lock_acquire_recursive>:
 8003af0:	4770      	bx	lr

08003af2 <__retarget_lock_release_recursive>:
 8003af2:	4770      	bx	lr

08003af4 <register_fini>:
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <register_fini+0xc>)
 8003af6:	b113      	cbz	r3, 8003afe <register_fini+0xa>
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <register_fini+0x10>)
 8003afa:	f000 b805 	b.w	8003b08 <atexit>
 8003afe:	4770      	bx	lr
 8003b00:	00000000 	.word	0x00000000
 8003b04:	08003b15 	.word	0x08003b15

08003b08 <atexit>:
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 b814 	b.w	8003b3c <__register_exitproc>

08003b14 <__libc_fini_array>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4d07      	ldr	r5, [pc, #28]	; (8003b34 <__libc_fini_array+0x20>)
 8003b18:	4c07      	ldr	r4, [pc, #28]	; (8003b38 <__libc_fini_array+0x24>)
 8003b1a:	1b64      	subs	r4, r4, r5
 8003b1c:	10a4      	asrs	r4, r4, #2
 8003b1e:	b91c      	cbnz	r4, 8003b28 <__libc_fini_array+0x14>
 8003b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b24:	f000 b850 	b.w	8003bc8 <_fini>
 8003b28:	3c01      	subs	r4, #1
 8003b2a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	e7f5      	b.n	8003b1e <__libc_fini_array+0xa>
 8003b32:	bf00      	nop
 8003b34:	08003c08 	.word	0x08003c08
 8003b38:	08003c0c 	.word	0x08003c0c

08003b3c <__register_exitproc>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8003bb0 <__register_exitproc+0x74>
 8003b44:	4606      	mov	r6, r0
 8003b46:	f8da 0000 	ldr.w	r0, [sl]
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	460f      	mov	r7, r1
 8003b4e:	4691      	mov	r9, r2
 8003b50:	f7ff ffce 	bl	8003af0 <__retarget_lock_acquire_recursive>
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <__register_exitproc+0x78>)
 8003b56:	681c      	ldr	r4, [r3, #0]
 8003b58:	b90c      	cbnz	r4, 8003b5e <__register_exitproc+0x22>
 8003b5a:	4c17      	ldr	r4, [pc, #92]	; (8003bb8 <__register_exitproc+0x7c>)
 8003b5c:	601c      	str	r4, [r3, #0]
 8003b5e:	6865      	ldr	r5, [r4, #4]
 8003b60:	f8da 0000 	ldr.w	r0, [sl]
 8003b64:	2d1f      	cmp	r5, #31
 8003b66:	dd05      	ble.n	8003b74 <__register_exitproc+0x38>
 8003b68:	f7ff ffc3 	bl	8003af2 <__retarget_lock_release_recursive>
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	b19e      	cbz	r6, 8003b9e <__register_exitproc+0x62>
 8003b76:	2201      	movs	r2, #1
 8003b78:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8003b7c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8003b80:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8003b84:	40aa      	lsls	r2, r5
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8003b8c:	2e02      	cmp	r6, #2
 8003b8e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8003b92:	bf02      	ittt	eq
 8003b94:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8003b98:	4313      	orreq	r3, r2
 8003b9a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8003b9e:	1c6b      	adds	r3, r5, #1
 8003ba0:	3502      	adds	r5, #2
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8003ba8:	f7ff ffa3 	bl	8003af2 <__retarget_lock_release_recursive>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e7df      	b.n	8003b70 <__register_exitproc+0x34>
 8003bb0:	20000010 	.word	0x20000010
 8003bb4:	2000043c 	.word	0x2000043c
 8003bb8:	20000440 	.word	0x20000440

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
