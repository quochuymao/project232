
DOAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009370  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009480  08009480  00019480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009864  08009864  000206c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800986c  0800986c  000206c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  08009878  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  200006c4  08009f3c  000206c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000df8  08009f3c  00020df8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206ed  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001133f  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3d  00000000  00000000  00031a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d79  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cd5  00000000  00000000  00036389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147e2  00000000  00000000  0003a05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000943ff  00000000  00000000  0004e840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c74  00000000  00000000  000e2c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e88b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200006c4 	.word	0x200006c4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009468 	.word	0x08009468

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200006c8 	.word	0x200006c8
 800014c:	08009468 	.word	0x08009468

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b972 	b.w	8000d84 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14c      	bne.n	8000b62 <__udivmoddi4+0xaa>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d967      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	b153      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad8:	f1c3 0220 	rsb	r2, r3, #32
 8000adc:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ae0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fbbe f1f7 	udiv	r1, lr, r7
 8000af2:	fa1f f58c 	uxth.w	r5, ip
 8000af6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000afa:	fb01 f005 	mul.w	r0, r1, r5
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000b10:	f080 8119 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8116 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b24:	fb07 2210 	mls	r2, r7, r0, r2
 8000b28:	fb00 f505 	mul.w	r5, r0, r5
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8104 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8101 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	2100      	movs	r1, #0
 8000b52:	1b64      	subs	r4, r4, r5
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa6>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xc0>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ea 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d148      	bne.n	8000c12 <__udivmoddi4+0x15a>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xd2>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2c2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4696      	mov	lr, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa6>
 8000b98:	e9c6 4e00 	strd	r4, lr, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xea>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 808e 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000bac:	1a88      	subs	r0, r1, r2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0c17      	lsrs	r7, r2, #16
 8000bb2:	fa1f fe82 	uxth.w	lr, r2
 8000bb6:	fbb0 f5f7 	udiv	r5, r0, r7
 8000bba:	fb07 0015 	mls	r0, r7, r5, r0
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc4:	fb0e f005 	mul.w	r0, lr, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f200 80cc 	bhi.w	8000d74 <__udivmoddi4+0x2bc>
 8000bdc:	4645      	mov	r5, r8
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be4:	fb07 2210 	mls	r2, r7, r0, r2
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x150>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14e>
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	f200 80b4 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000c06:	4610      	mov	r0, r2
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c10:	e7a0      	b.n	8000b54 <__udivmoddi4+0x9c>
 8000c12:	f1c1 0720 	rsb	r7, r1, #32
 8000c16:	408b      	lsls	r3, r1
 8000c18:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c20:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c28:	fbba f8f9 	udiv	r8, sl, r9
 8000c2c:	408d      	lsls	r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	fa00 f501 	lsl.w	r5, r0, r1
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	0c1c      	lsrs	r4, r3, #16
 8000c46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c4a:	42a0      	cmp	r0, r4
 8000c4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c50:	d90b      	bls.n	8000c6a <__udivmoddi4+0x1b2>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5a:	f080 8086 	bcs.w	8000d6a <__udivmoddi4+0x2b2>
 8000c5e:	42a0      	cmp	r0, r4
 8000c60:	f240 8083 	bls.w	8000d6a <__udivmoddi4+0x2b2>
 8000c64:	f1a8 0802 	sub.w	r8, r8, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1a24      	subs	r4, r4, r0
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c72:	fb09 4413 	mls	r4, r9, r3, r4
 8000c76:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c7a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8a:	d26a      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d968      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000c90:	3b02      	subs	r3, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c98:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	46c8      	mov	r8, r9
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d067      	beq.n	8000d7e <__udivmoddi4+0x2c6>
 8000cae:	ebb5 0308 	subs.w	r3, r5, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	40cb      	lsrs	r3, r1
 8000cb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbc:	431f      	orrs	r7, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0020 	rsb	r0, r3, #32
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	409d      	lsls	r5, r3
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	4328      	orrs	r0, r5
 8000cde:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce2:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	0c02      	lsrs	r2, r0, #16
 8000cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf0:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf4:	4291      	cmp	r1, r2
 8000cf6:	fa04 f403 	lsl.w	r4, r4, r3
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x256>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d22f      	bcs.n	8000d66 <__udivmoddi4+0x2ae>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d92d      	bls.n	8000d66 <__udivmoddi4+0x2ae>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	fbb2 f1f7 	udiv	r1, r2, r7
 8000d14:	fb07 2211 	mls	r2, r7, r1, r2
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d1e:	fb01 f20e 	mul.w	r2, r1, lr
 8000d22:	4282      	cmp	r2, r0
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x280>
 8000d26:	eb1c 0000 	adds.w	r0, ip, r0
 8000d2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d2e:	d216      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d914      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000d34:	3902      	subs	r1, #2
 8000d36:	4460      	add	r0, ip
 8000d38:	1a80      	subs	r0, r0, r2
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4631      	mov	r1, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d46:	4671      	mov	r1, lr
 8000d48:	e6e9      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	e6fe      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb9 0802 	subs.w	r8, r9, r2
 8000d56:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a5      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	e7ea      	b.n	8000d38 <__udivmoddi4+0x280>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e796      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d66:	4645      	mov	r5, r8
 8000d68:	e7d1      	b.n	8000d0e <__udivmoddi4+0x256>
 8000d6a:	46d0      	mov	r8, sl
 8000d6c:	e77d      	b.n	8000c6a <__udivmoddi4+0x1b2>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e749      	b.n	8000c08 <__udivmoddi4+0x150>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e731      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xdc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	e6ed      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f023 030f 	bic.w	r3, r3, #15
 8000d98:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	f043 030c 	orr.w	r3, r3, #12
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	f043 030c 	orr.w	r3, r3, #12
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dc8:	f107 0208 	add.w	r2, r7, #8
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	214e      	movs	r1, #78	; 0x4e
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <lcd_send_cmd+0x5c>)
 8000dd6:	f001 fe87 	bl	8002ae8 <HAL_I2C_Master_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000758 	.word	0x20000758

08000de8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f023 030f 	bic.w	r3, r3, #15
 8000df8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 030d 	orr.w	r3, r3, #13
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f043 0309 	orr.w	r3, r3, #9
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	f043 030d 	orr.w	r3, r3, #13
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	f043 0309 	orr.w	r3, r3, #9
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2304      	movs	r3, #4
 8000e32:	214e      	movs	r1, #78	; 0x4e
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <lcd_send_data+0x5c>)
 8000e36:	f001 fe57 	bl	8002ae8 <HAL_I2C_Master_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000758 	.word	0x20000758

08000e48 <lcd_init>:

void lcd_init (void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000e4c:	2033      	movs	r0, #51	; 0x33
 8000e4e:	f7ff ff9b 	bl	8000d88 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000e52:	2032      	movs	r0, #50	; 0x32
 8000e54:	f7ff ff98 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f000 fea9 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f7ff ff92 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e64:	2032      	movs	r0, #50	; 0x32
 8000e66:	f000 fea3 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff ff8c 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e70:	2032      	movs	r0, #50	; 0x32
 8000e72:	f000 fe9d 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff ff86 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e7c:	2032      	movs	r0, #50	; 0x32
 8000e7e:	f000 fe97 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000e82:	200c      	movs	r0, #12
 8000e84:	f7ff ff80 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f000 fe91 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff ff7a 	bl	8000d88 <lcd_send_cmd>
	HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 fe8b 	bl	8001bb0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000e9a:	2080      	movs	r0, #128	; 0x80
 8000e9c:	f7ff ff74 	bl	8000d88 <lcd_send_cmd>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000eac:	e006      	b.n	8000ebc <lcd_send_string+0x18>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff96 	bl	8000de8 <lcd_send_data>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f4      	bne.n	8000eae <lcd_send_string+0xa>
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff ff58 	bl	8000d88 <lcd_send_cmd>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	337f      	adds	r3, #127	; 0x7f
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e008      	b.n	8000f10 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3340      	adds	r3, #64	; 0x40
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff38 	bl	8000d88 <lcd_send_cmd>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <lcd_display>:
void lcd_display(float powerIn, float  powerOut)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	char str[30];
	lcd_clear_display();
 8000f2a:	f7ff ffd0 	bl	8000ece <lcd_clear_display>
	if(display == POWER_DISPLAY)
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <lcd_display+0xd4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d13b      	bne.n	8000fae <lcd_display+0x8e>
	{
		lcd_goto_XY(1,0);
 8000f36:	2100      	movs	r1, #0
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffcf 	bl	8000edc <lcd_goto_XY>
		HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 fe36 	bl	8001bb0 <HAL_Delay>
		lcd_send_string("Pin: ");
 8000f44:	482c      	ldr	r0, [pc, #176]	; (8000ff8 <lcd_display+0xd8>)
 8000f46:	f7ff ffad 	bl	8000ea4 <lcd_send_string>
		HAL_Delay(10);
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f000 fe30 	bl	8001bb0 <HAL_Delay>
		sprintf(str,"%2.2f",powerIn);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fa69 	bl	8000428 <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	f107 0008 	add.w	r0, r7, #8
 8000f5e:	4927      	ldr	r1, [pc, #156]	; (8000ffc <lcd_display+0xdc>)
 8000f60:	f003 fe04 	bl	8004b6c <sprintf>
		lcd_send_string(str);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff9b 	bl	8000ea4 <lcd_send_string>
		HAL_Delay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f000 fe1e 	bl	8001bb0 <HAL_Delay>
		lcd_goto_XY(2,0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff ffb0 	bl	8000edc <lcd_goto_XY>
		HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f000 fe17 	bl	8001bb0 <HAL_Delay>
		lcd_send_string("Pout: ");
 8000f82:	481f      	ldr	r0, [pc, #124]	; (8001000 <lcd_display+0xe0>)
 8000f84:	f7ff ff8e 	bl	8000ea4 <lcd_send_string>
		HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f000 fe11 	bl	8001bb0 <HAL_Delay>
		sprintf(str,"%2.2f",powerOut);
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	f7ff fa4a 	bl	8000428 <__aeabi_f2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	f107 0008 	add.w	r0, r7, #8
 8000f9c:	4917      	ldr	r1, [pc, #92]	; (8000ffc <lcd_display+0xdc>)
 8000f9e:	f003 fde5 	bl	8004b6c <sprintf>
		lcd_send_string(str);
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff7c 	bl	8000ea4 <lcd_send_string>
		lcd_goto_XY(2,0);
		HAL_Delay(10);
		lcd_send_string("LOAD: ");
		lcd_send_string(str);
	}
}
 8000fac:	e01d      	b.n	8000fea <lcd_display+0xca>
		lcd_clear_display();
 8000fae:	f7ff ff8e 	bl	8000ece <lcd_clear_display>
		lcd_goto_XY(1,1);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ff91 	bl	8000edc <lcd_goto_XY>
		HAL_Delay(10);
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f000 fdf8 	bl	8001bb0 <HAL_Delay>
		lcd_send_string("BATTERY: ");
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <lcd_display+0xe4>)
 8000fc2:	f7ff ff6f 	bl	8000ea4 <lcd_send_string>
		HAL_Delay(10);
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f000 fdf2 	bl	8001bb0 <HAL_Delay>
		lcd_goto_XY(2,0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff ff84 	bl	8000edc <lcd_goto_XY>
		HAL_Delay(10);
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f000 fdeb 	bl	8001bb0 <HAL_Delay>
		lcd_send_string("LOAD: ");
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <lcd_display+0xe8>)
 8000fdc:	f7ff ff62 	bl	8000ea4 <lcd_send_string>
		lcd_send_string(str);
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <lcd_send_string>
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200006e0 	.word	0x200006e0
 8000ff8:	08009480 	.word	0x08009480
 8000ffc:	08009488 	.word	0x08009488
 8001000:	08009490 	.word	0x08009490
 8001004:	08009498 	.word	0x08009498
 8001008:	080094a4 	.word	0x080094a4

0800100c <PWM_Control>:
#include "PWM_Control.h"

const int TIM_CLOCK = 24000000;

void PWM_Control(int dutyCycle, int frequency)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	TIM1->ARR  =  TIM_CLOCK/frequency;
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <PWM_Control+0x38>)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	fb92 f2f3 	sdiv	r2, r2, r3
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <PWM_Control+0x3c>)
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = ((dutyCycle)*(TIM1->ARR))/100;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <PWM_Control+0x3c>)
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <PWM_Control+0x3c>)
 800102e:	4907      	ldr	r1, [pc, #28]	; (800104c <PWM_Control+0x40>)
 8001030:	fba1 1303 	umull	r1, r3, r1, r3
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	016e3600 	.word	0x016e3600
 8001048:	40012c00 	.word	0x40012c00
 800104c:	51eb851f 	.word	0x51eb851f

08001050 <PWM_Enable>:

void PWM_Enable(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <PWM_Enable+0x10>)
 8001058:	f002 fef8 	bl	8003e4c <HAL_TIM_PWM_Start>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200007ac 	.word	0x200007ac
 8001064:	00000000 	.word	0x00000000

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fd3e 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f83e 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fa12 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 f9f2 	bl	8001460 <MX_DMA_Init>
  MX_ADC1_Init();
 800107c:	f000 f896 	bl	80011ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8001080:	f000 f8fe 	bl	8001280 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001084:	f000 f92a 	bl	80012dc <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8001088:	f000 f9c8 	bl	800141c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800108c:	f7ff fedc 	bl	8000e48 <lcd_init>
  lcd_clear_display();
 8001090:	f7ff ff1d 	bl	8000ece <lcd_clear_display>
  PWM_Control(dutyCycle,100000);
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <main+0x78>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4912      	ldr	r1, [pc, #72]	; (80010e4 <main+0x7c>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffb6 	bl	800100c <PWM_Control>
  PWM_Enable();
 80010a0:	f7ff ffd6 	bl	8001050 <PWM_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_display(82.2,32.5);
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <main+0x80>)
 80010aa:	a10b      	add	r1, pc, #44	; (adr r1, 80010d8 <main+0x70>)
 80010ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b0:	f7ff ff36 	bl	8000f20 <lcd_display>
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ba:	480c      	ldr	r0, [pc, #48]	; (80010ec <main+0x84>)
 80010bc:	f001 fba0 	bl	8002800 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 80010c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010c4:	f000 fd74 	bl	8001bb0 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <main+0x84>)
 80010d0:	f001 fb96 	bl	8002800 <HAL_GPIO_WritePin>
  {
 80010d4:	e7e6      	b.n	80010a4 <main+0x3c>
 80010d6:	bf00      	nop
 80010d8:	cccccccd 	.word	0xcccccccd
 80010dc:	40548ccc 	.word	0x40548ccc
 80010e0:	20000000 	.word	0x20000000
 80010e4:	000186a0 	.word	0x000186a0
 80010e8:	40404000 	.word	0x40404000
 80010ec:	40011000 	.word	0x40011000

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	; 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd97 	bl	8004c32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800113c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001140:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f926 	bl	8003398 <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001152:	f000 fa59 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001162:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001166:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2101      	movs	r1, #1
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fb92 	bl	800389c <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800117e:	f000 fa43 	bl	8001608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001182:	2312      	movs	r3, #18
 8001184:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800118c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001190:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fcfb 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011a0:	f000 fa32 	bl	8001608 <Error_Handler>
  }
}
 80011a4:	bf00      	nop
 80011a6:	3750      	adds	r7, #80	; 0x50
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <MX_ADC1_Init+0xd0>)
 80011c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ea:	4823      	ldr	r0, [pc, #140]	; (8001278 <MX_ADC1_Init+0xcc>)
 80011ec:	f000 fd04 	bl	8001bf8 <HAL_ADC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011f6:	f000 fa07 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_ADC1_Init+0xcc>)
 800120c:	f000 fdcc 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f9f7 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800121e:	2302      	movs	r3, #2
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_ADC1_Init+0xcc>)
 8001228:	f000 fdbe 	bl	8001da8 <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001232:	f000 f9e9 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001236:	2302      	movs	r3, #2
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800123a:	2303      	movs	r3, #3
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_ADC1_Init+0xcc>)
 8001244:	f000 fdb0 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800124e:	f000 f9db 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001252:	2303      	movs	r3, #3
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001256:	2304      	movs	r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0xcc>)
 8001260:	f000 fda2 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800126a:	f000 f9cd 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200006e4 	.word	0x200006e4
 800127c:	40012400 	.word	0x40012400

08001280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x50>)
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <MX_I2C1_Init+0x54>)
 8001288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_I2C1_Init+0x50>)
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_I2C1_Init+0x58>)
 800128e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_I2C1_Init+0x50>)
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_I2C1_Init+0x50>)
 80012be:	f001 facf 	bl	8002860 <HAL_I2C_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c8:	f000 f99e 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000758 	.word	0x20000758
 80012d4:	40005400 	.word	0x40005400
 80012d8:	000186a0 	.word	0x000186a0

080012dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b096      	sub	sp, #88	; 0x58
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fc8c 	bl	8004c32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_TIM1_Init+0x138>)
 800131c:	4a3e      	ldr	r2, [pc, #248]	; (8001418 <MX_TIM1_Init+0x13c>)
 800131e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_TIM1_Init+0x138>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_TIM1_Init+0x138>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_TIM1_Init+0x138>)
 800132e:	2263      	movs	r2, #99	; 0x63
 8001330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_TIM1_Init+0x138>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <MX_TIM1_Init+0x138>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <MX_TIM1_Init+0x138>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001344:	4833      	ldr	r0, [pc, #204]	; (8001414 <MX_TIM1_Init+0x138>)
 8001346:	f002 fcd9 	bl	8003cfc <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001350:	f000 f95a 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135e:	4619      	mov	r1, r3
 8001360:	482c      	ldr	r0, [pc, #176]	; (8001414 <MX_TIM1_Init+0x138>)
 8001362:	f002 fed7 	bl	8004114 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800136c:	f000 f94c 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <MX_TIM1_Init+0x138>)
 8001372:	f002 fd12 	bl	8003d9a <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800137c:	f000 f944 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138c:	4619      	mov	r1, r3
 800138e:	4821      	ldr	r0, [pc, #132]	; (8001414 <MX_TIM1_Init+0x138>)
 8001390:	f003 fa2c 	bl	80047ec <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800139a:	f000 f935 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4814      	ldr	r0, [pc, #80]	; (8001414 <MX_TIM1_Init+0x138>)
 80013c4:	f002 fde4 	bl	8003f90 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013ce:	f000 f91b 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM1_Init+0x138>)
 80013f6:	f003 fa57 	bl	80048a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001400:	f000 f902 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM1_Init+0x138>)
 8001406:	f000 f9fb 	bl	8001800 <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3758      	adds	r7, #88	; 0x58
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200007ac 	.word	0x200007ac
 8001418:	40012c00 	.word	0x40012c00

0800141c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <MX_USB_PCD_Init+0x40>)
 8001424:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 8001428:	2208      	movs	r2, #8
 800142a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 800142e:	2202      	movs	r2, #2
 8001430:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_USB_PCD_Init+0x3c>)
 8001446:	f001 fea7 	bl	8003198 <HAL_PCD_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001450:	f000 f8da 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200007f4 	.word	0x200007f4
 800145c:	40005c00 	.word	0x40005c00

08001460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_DMA_Init+0x38>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <MX_DMA_Init+0x38>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6153      	str	r3, [r2, #20]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_DMA_Init+0x38>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200b      	movs	r0, #11
 8001484:	f000 fea1 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001488:	200b      	movs	r0, #11
 800148a:	f000 feba 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <MX_GPIO_Init+0x120>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a41      	ldr	r2, [pc, #260]	; (80015bc <MX_GPIO_Init+0x120>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <MX_GPIO_Init+0x120>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c8:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <MX_GPIO_Init+0x120>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a3b      	ldr	r2, [pc, #236]	; (80015bc <MX_GPIO_Init+0x120>)
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <MX_GPIO_Init+0x120>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <MX_GPIO_Init+0x120>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <MX_GPIO_Init+0x120>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <MX_GPIO_Init+0x120>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <MX_GPIO_Init+0x120>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <MX_GPIO_Init+0x120>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <MX_GPIO_Init+0x120>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001516:	482a      	ldr	r0, [pc, #168]	; (80015c0 <MX_GPIO_Init+0x124>)
 8001518:	f001 f972 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_CTR_GPIO_Port, LOAD_CTR_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2101      	movs	r1, #1
 8001520:	4828      	ldr	r0, [pc, #160]	; (80015c4 <MX_GPIO_Init+0x128>)
 8001522:	f001 f96d 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	4826      	ldr	r0, [pc, #152]	; (80015c8 <MX_GPIO_Init+0x12c>)
 800152e:	f001 f967 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <MX_GPIO_Init+0x124>)
 800154c:	f000 ffd4 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_DISPLAY_Pin */
  GPIO_InitStruct.Pin = CHANGE_DISPLAY_Pin;
 8001550:	2310      	movs	r3, #16
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_GPIO_Init+0x130>)
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHANGE_DISPLAY_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <MX_GPIO_Init+0x12c>)
 8001564:	f000 ffc8 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOAD_CTR_Pin */
  GPIO_InitStruct.Pin = LOAD_CTR_Pin;
 8001568:	2301      	movs	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2302      	movs	r3, #2
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOAD_CTR_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_GPIO_Init+0x128>)
 8001580:	f000 ffba 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUCK_EN_Pin */
  GPIO_InitStruct.Pin = BUCK_EN_Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2302      	movs	r3, #2
 8001594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_EN_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <MX_GPIO_Init+0x12c>)
 800159e:	f000 ffab 	bl	80024f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	200a      	movs	r0, #10
 80015a8:	f000 fe0f 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f000 fe28 	bl	8002202 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40010800 	.word	0x40010800
 80015cc:	10210000 	.word	0x10210000

080015d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CHANGE_DISPLAY_Pin)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d10a      	bne.n	80015f6 <HAL_GPIO_EXTI_Callback+0x26>
	{
		display = !display;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_Callback+0x34>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_GPIO_EXTI_Callback+0x34>)
 80015f2:	701a      	strb	r2, [r3, #0]
	} else
	{
		__NOP();
	}

}
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_EXTI_Callback+0x28>
		__NOP();
 80015f6:	bf00      	nop
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200006e0 	.word	0x200006e0

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_ADC_MspInit+0xbc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d149      	bne.n	800172c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a26      	ldr	r2, [pc, #152]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_ADC_MspInit+0xc0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|CURRENT_OUT_Pin|VADC_IN_Pin|VADC_OUT_Pin;
 80016c8:	230f      	movs	r3, #15
 80016ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	4819      	ldr	r0, [pc, #100]	; (800173c <HAL_ADC_MspInit+0xc4>)
 80016d8:	f000 ff0e 	bl	80024f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_ADC_MspInit+0xcc>)
 80016e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 80016fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001702:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 8001706:	2220      	movs	r2, #32
 8001708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 8001712:	f000 fd91 	bl	8002238 <HAL_DMA_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800171c:	f7ff ff74 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 8001724:	621a      	str	r2, [r3, #32]
 8001726:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_ADC_MspInit+0xc8>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40012400 	.word	0x40012400
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	20000714 	.word	0x20000714
 8001744:	40020008 	.word	0x40020008

08001748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_I2C_MspInit+0x70>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d123      	bne.n	80017b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_I2C_MspInit+0x74>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001780:	23c0      	movs	r3, #192	; 0xc0
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 8001794:	f000 feb0 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_I2C_MspInit+0x74>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_I2C_MspInit+0x74>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010c00 	.word	0x40010c00

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0x34>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10b      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0x38>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_TIM_Base_MspInit+0x38>)
 80017dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_TIM_Base_MspInit+0x38>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_TIM_MspPostInit+0x5c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d118      	bne.n	8001852 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_TIM_MspPostInit+0x60>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_TIM_MspPostInit+0x60>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_TIM_MspPostInit+0x60>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8001838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2302      	movs	r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_TIM_MspPostInit+0x64>)
 800184e:	f000 fe53 	bl	80024f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_PCD_MspInit+0x34>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10b      	bne.n	8001892 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_PCD_MspInit+0x38>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_PCD_MspInit+0x38>)
 8001880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_PCD_MspInit+0x38>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f945 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_DISPLAY_Pin);
 80018f6:	2010      	movs	r0, #16
 80018f8:	f000 ff9a 	bl	8002830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA1_Channel1_IRQHandler+0x10>)
 8001906:	f000 fcf1 	bl	80022ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000714 	.word	0x20000714

08001914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <_kill>:

int _kill(int pid, int sig)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800192c:	f003 f9d0 	bl	8004cd0 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	2216      	movs	r2, #22
 8001934:	601a      	str	r2, [r3, #0]
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_exit>:

void _exit (int status)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800194a:	f04f 31ff 	mov.w	r1, #4294967295
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffe7 	bl	8001922 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001954:	e7fe      	b.n	8001954 <_exit+0x12>

08001956 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e00a      	b.n	800197e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001968:	f3af 8000 	nop.w
 800196c:	4601      	mov	r1, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbf0      	blt.n	8001968 <_read+0x12>
  }

  return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e009      	b.n	80019b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	60ba      	str	r2, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbf1      	blt.n	80019a2 <_write+0x12>
  }
  return len;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_close>:

int _close(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ee:	605a      	str	r2, [r3, #4]
  return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <_isatty>:

int _isatty(int file)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f003 f93a 	bl	8004cd0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20005000 	.word	0x20005000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000ae4 	.word	0x20000ae4
 8001a90:	20000df8 	.word	0x20000df8

08001a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
                                                                                                                                                                                                                                                                                        bl  SystemInit
 8001aa0:	f7ff fff8 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001abc:	4c09      	ldr	r4, [pc, #36]	; (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f003 f907 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ace:	f7ff facb 	bl	8001068 <main>
  bx lr
 8001ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200006c4 	.word	0x200006c4
  ldr r2, =_sidata
 8001adc:	08009878 	.word	0x08009878
  ldr r2, =_sbss
 8001ae0:	200006c4 	.word	0x200006c4
  ldr r4, =_ebss
 8001ae4:	20000df8 	.word	0x20000df8

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_Init+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_Init+0x28>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 fb59 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f808 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fd84 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x54>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x58>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fb71 	bl	800221e <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00e      	b.n	8001b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d80a      	bhi.n	8001b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f000 fb39 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_InitTick+0x5c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	20000008 	.word	0x20000008

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_IncTick+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <HAL_IncTick+0x20>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000ae8 	.word	0x20000ae8

08001b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_GetTick+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000ae8 	.word	0x20000ae8

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffe0 	bl	8001b9c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000000c 	.word	0x2000000c

08001bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0be      	b.n	8001d98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd1e 	bl	8001678 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f9ab 	bl	8001f98 <ADC_ConversionStop_Disable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8099 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c64:	f023 0302 	bic.w	r3, r3, #2
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b1b      	ldrb	r3, [r3, #12]
 8001c7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c90:	d003      	beq.n	8001c9a <HAL_ADC_Init+0xa2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_ADC_Init+0xa8>
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0xaa>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7d1b      	ldrb	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d119      	bne.n	8001ce4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	035a      	lsls	r2, r3, #13
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e00b      	b.n	8001ce4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_ADC_Init+0x1a8>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_Init+0x126>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d104      	bne.n	8001d28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_ADC_Init+0x1ac>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d62:	e018      	b.n	8001d96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f023 0312 	bic.w	r3, r3, #18
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	ffe1f7fd 	.word	0xffe1f7fd
 8001da4:	ff1f0efe 	.word	0xff1f0efe

08001da8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x20>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0dc      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1da>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d81c      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b05      	subs	r3, #5
 8001dea:	221f      	movs	r2, #31
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b05      	subs	r3, #5
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e10:	e03c      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d81c      	bhi.n	8001e54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b23      	subs	r3, #35	; 0x23
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4019      	ands	r1, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b23      	subs	r3, #35	; 0x23
 8001e46:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
 8001e52:	e01b      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b41      	subs	r3, #65	; 0x41
 8001e66:	221f      	movs	r2, #31
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4019      	ands	r1, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b41      	subs	r3, #65	; 0x41
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d91c      	bls.n	8001ece <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68d9      	ldr	r1, [r3, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4019      	ands	r1, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6898      	ldr	r0, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b1e      	subs	r3, #30
 8001ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	e019      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	2207      	movs	r2, #7
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4019      	ands	r1, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6898      	ldr	r0, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f0e:	2b11      	cmp	r3, #17
 8001f10:	d132      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_ADC_ConfigChannel+0x1e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d125      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d126      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d11a      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9a      	lsrs	r2, r3, #18
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x1b2>
 8001f66:	e007      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012400 	.word	0x40012400
 8001f90:	20000004 	.word	0x20000004
 8001f94:	431bde83 	.word	0x431bde83

08001f98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12e      	bne.n	8002010 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fc2:	f7ff fdeb 	bl	8001b9c <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	e01b      	b.n	8002002 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fca:	f7ff fde7 	bl	8001b9c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d914      	bls.n	8002002 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10d      	bne.n	8002002 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d0dc      	beq.n	8001fca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <__NVIC_EnableIRQ+0x34>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff90 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2d 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff42 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff90 	bl	800210c <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5f 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff35 	bl	8002080 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e043      	b.n	80022d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_DMA_Init+0xa8>)
 8002256:	4413      	add	r3, r2
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Init+0xac>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_DMA_Init+0xb0>)
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002282:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	bffdfff8 	.word	0xbffdfff8
 80022e4:	cccccccd 	.word	0xcccccccd
 80022e8:	40020000 	.word	0x40020000

080022ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2204      	movs	r2, #4
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04f      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d029      	beq.n	800239a <HAL_DMA_IRQHandler+0xae>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a65      	ldr	r2, [pc, #404]	; (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0xaa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01a      	beq.n	8002390 <HAL_DMA_IRQHandler+0xa4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a62      	ldr	r2, [pc, #392]	; (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_IRQHandler+0x9e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_DMA_IRQHandler+0x200>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x98>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5f      	ldr	r2, [pc, #380]	; (80024f0 <HAL_DMA_IRQHandler+0x204>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_DMA_IRQHandler+0x92>
 8002378:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237c:	e00e      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800237e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002382:	e00b      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002388:	e008      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800238a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800238e:	e005      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002394:	e002      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002396:	2340      	movs	r3, #64	; 0x40
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800239a:	2304      	movs	r3, #4
 800239c:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_DMA_IRQHandler+0x208>)
 800239e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8094 	beq.w	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	e08e      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2202      	movs	r2, #2
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d056      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d051      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020a 	bic.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d029      	beq.n	8002452 <HAL_DMA_IRQHandler+0x166>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a37      	ldr	r2, [pc, #220]	; (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x162>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	; (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01a      	beq.n	8002448 <HAL_DMA_IRQHandler+0x15c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d012      	beq.n	8002442 <HAL_DMA_IRQHandler+0x156>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_DMA_IRQHandler+0x200>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00a      	beq.n	800243c <HAL_DMA_IRQHandler+0x150>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_DMA_IRQHandler+0x204>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d102      	bne.n	8002436 <HAL_DMA_IRQHandler+0x14a>
 8002430:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002434:	e00e      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243a:	e00b      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800243c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002440:	e008      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002446:	e005      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244c:	e002      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800244e:	2320      	movs	r3, #32
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002452:	2302      	movs	r3, #2
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_DMA_IRQHandler+0x208>)
 8002456:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d034      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002470:	e02f      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2208      	movs	r2, #8
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d028      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 020e 	bic.w	r2, r2, #14
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
    }
  }
  return;
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
}
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40020008 	.word	0x40020008
 80024e0:	4002001c 	.word	0x4002001c
 80024e4:	40020030 	.word	0x40020030
 80024e8:	40020044 	.word	0x40020044
 80024ec:	40020058 	.word	0x40020058
 80024f0:	4002006c 	.word	0x4002006c
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b08b      	sub	sp, #44	; 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e169      	b.n	80027e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800250c:	2201      	movs	r2, #1
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8158 	bne.w	80027da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a9a      	ldr	r2, [pc, #616]	; (8002798 <HAL_GPIO_Init+0x2a0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d05e      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002534:	4a98      	ldr	r2, [pc, #608]	; (8002798 <HAL_GPIO_Init+0x2a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d875      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800253a:	4a98      	ldr	r2, [pc, #608]	; (800279c <HAL_GPIO_Init+0x2a4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d058      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002540:	4a96      	ldr	r2, [pc, #600]	; (800279c <HAL_GPIO_Init+0x2a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d86f      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002546:	4a96      	ldr	r2, [pc, #600]	; (80027a0 <HAL_GPIO_Init+0x2a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d052      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 800254c:	4a94      	ldr	r2, [pc, #592]	; (80027a0 <HAL_GPIO_Init+0x2a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d869      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002552:	4a94      	ldr	r2, [pc, #592]	; (80027a4 <HAL_GPIO_Init+0x2ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04c      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002558:	4a92      	ldr	r2, [pc, #584]	; (80027a4 <HAL_GPIO_Init+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d863      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800255e:	4a92      	ldr	r2, [pc, #584]	; (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d046      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002564:	4a90      	ldr	r2, [pc, #576]	; (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d85d      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800256a:	2b12      	cmp	r3, #18
 800256c:	d82a      	bhi.n	80025c4 <HAL_GPIO_Init+0xcc>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d859      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <HAL_GPIO_Init+0x80>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025f3 	.word	0x080025f3
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025df 	.word	0x080025df
 8002584:	08002621 	.word	0x08002621
 8002588:	08002627 	.word	0x08002627
 800258c:	08002627 	.word	0x08002627
 8002590:	08002627 	.word	0x08002627
 8002594:	08002627 	.word	0x08002627
 8002598:	08002627 	.word	0x08002627
 800259c:	08002627 	.word	0x08002627
 80025a0:	08002627 	.word	0x08002627
 80025a4:	08002627 	.word	0x08002627
 80025a8:	08002627 	.word	0x08002627
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002627 	.word	0x08002627
 80025b8:	08002627 	.word	0x08002627
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025e9 	.word	0x080025e9
 80025c4:	4a79      	ldr	r2, [pc, #484]	; (80027ac <HAL_GPIO_Init+0x2b4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ca:	e02c      	b.n	8002626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e029      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e024      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	3308      	adds	r3, #8
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e01f      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	330c      	adds	r3, #12
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e01a      	b.n	8002628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fa:	2304      	movs	r3, #4
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e013      	b.n	8002628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	611a      	str	r2, [r3, #16]
          break;
 8002612:	e009      	b.n	8002628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	615a      	str	r2, [r3, #20]
          break;
 800261e:	e003      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x130>
          break;
 8002626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d801      	bhi.n	8002632 <HAL_GPIO_Init+0x13a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_Init+0x13e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d802      	bhi.n	8002644 <HAL_GPIO_Init+0x14c>
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x152>
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	3b08      	subs	r3, #8
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	210f      	movs	r1, #15
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80b1 	beq.w	80027da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2bc>)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <HAL_GPIO_Init+0x2c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1ec>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_GPIO_Init+0x2c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	; (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <HAL_GPIO_Init+0x2cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1e0>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026d8:	2304      	movs	r3, #4
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e4:	2300      	movs	r3, #0
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f6:	492f      	ldr	r1, [pc, #188]	; (80027b4 <HAL_GPIO_Init+0x2bc>)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	492c      	ldr	r1, [pc, #176]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	4928      	ldr	r1, [pc, #160]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002728:	4013      	ands	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	491e      	ldr	r1, [pc, #120]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4918      	ldr	r1, [pc, #96]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4914      	ldr	r1, [pc, #80]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e021      	b.n	80027da <HAL_GPIO_Init+0x2e2>
 8002796:	bf00      	nop
 8002798:	10320000 	.word	0x10320000
 800279c:	10310000 	.word	0x10310000
 80027a0:	10220000 	.word	0x10220000
 80027a4:	10210000 	.word	0x10210000
 80027a8:	10120000 	.word	0x10120000
 80027ac:	10110000 	.word	0x10110000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_GPIO_Init+0x304>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4909      	ldr	r1, [pc, #36]	; (80027fc <HAL_GPIO_Init+0x304>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f ae8e 	bne.w	800250c <HAL_GPIO_Init+0x14>
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	372c      	adds	r7, #44	; 0x2c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe febe 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010400 	.word	0x40010400

08002860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e12b      	b.n	8002aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe ff5e 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c4:	f001 f932 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a81      	ldr	r2, [pc, #516]	; (8002ad4 <HAL_I2C_Init+0x274>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d807      	bhi.n	80028e4 <HAL_I2C_Init+0x84>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a80      	ldr	r2, [pc, #512]	; (8002ad8 <HAL_I2C_Init+0x278>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e006      	b.n	80028f2 <HAL_I2C_Init+0x92>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a7d      	ldr	r2, [pc, #500]	; (8002adc <HAL_I2C_Init+0x27c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0e7      	b.n	8002aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_I2C_Init+0x280>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9b      	lsrs	r3, r3, #18
 8002904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <HAL_I2C_Init+0x274>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d802      	bhi.n	8002934 <HAL_I2C_Init+0xd4>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	e009      	b.n	8002948 <HAL_I2C_Init+0xe8>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <HAL_I2C_Init+0x284>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	430b      	orrs	r3, r1
 800294e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800295a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	495c      	ldr	r1, [pc, #368]	; (8002ad4 <HAL_I2C_Init+0x274>)
 8002964:	428b      	cmp	r3, r1
 8002966:	d819      	bhi.n	800299c <HAL_I2C_Init+0x13c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e59      	subs	r1, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	1c59      	adds	r1, r3, #1
 8002978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800297c:	400b      	ands	r3, r1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_I2C_Init+0x138>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e59      	subs	r1, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	e051      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 8002998:	2304      	movs	r3, #4
 800299a:	e04f      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_I2C_Init+0x168>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e012      	b.n	80029ee <HAL_I2C_Init+0x18e>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x196>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e022      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10e      	bne.n	8002a1c <HAL_I2C_Init+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e58      	subs	r0, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	440b      	add	r3, r1
 8002a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a1a:	e00f      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	0099      	lsls	r1, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6809      	ldr	r1, [r1, #0]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6911      	ldr	r1, [r2, #16]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	000186a0 	.word	0x000186a0
 8002ad8:	001e847f 	.word	0x001e847f
 8002adc:	003d08ff 	.word	0x003d08ff
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	10624dd3 	.word	0x10624dd3

08002ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	460b      	mov	r3, r1
 8002af6:	817b      	strh	r3, [r7, #10]
 8002af8:	4613      	mov	r3, r2
 8002afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff f84e 	bl	8001b9c <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 80e0 	bne.w	8002cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2319      	movs	r3, #25
 8002b16:	2201      	movs	r2, #1
 8002b18:	4970      	ldr	r1, [pc, #448]	; (8002cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f964 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0d3      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x50>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0cc      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d007      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2221      	movs	r2, #33	; 0x21
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	893a      	ldrh	r2, [r7, #8]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f89c 	bl	8002ce4 <I2C_MasterRequestWrite>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e08d      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bcc:	e066      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa22 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11b      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x188>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa19 	bl	80030ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e01a      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d194      	bne.n	8002bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	00100002 	.word	0x00100002
 8002ce0:	ffff0000 	.word	0xffff0000

08002ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d006      	beq.n	8002d0e <I2C_MasterRequestWrite+0x2a>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d003      	beq.n	8002d0e <I2C_MasterRequestWrite+0x2a>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d0c:	d108      	bne.n	8002d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e00b      	b.n	8002d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d107      	bne.n	8002d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f84f 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d103      	bne.n	8002d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e035      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d74:	d108      	bne.n	8002d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	e01b      	b.n	8002dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	11db      	asrs	r3, r3, #7
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0306 	and.w	r3, r3, #6
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f063 030f 	orn	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <I2C_MasterRequestWrite+0xfc>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f898 	bl	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e010      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <I2C_MasterRequestWrite+0x100>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f888 	bl	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	00010008 	.word	0x00010008
 8002de4:	00010002 	.word	0x00010002

08002de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df8:	e048      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d044      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe fecb 	bl	8001b9c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d139      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10d      	bne.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	e00c      	b.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d116      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e023      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10d      	bne.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	e00c      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d093      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eea:	e071      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efa:	d123      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e067      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d041      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fe26 	bl	8001b9c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d136      	bne.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e00b      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e021      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10c      	bne.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e00b      	b.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f af6d 	bne.w	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	e034      	b.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f886 	bl	800313c <I2C_IsAcknowledgeFailed>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d028      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fdab 	bl	8001b9c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11d      	bne.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d016      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d1c3      	bne.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b8:	e034      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f83e 	bl	800313c <I2C_IsAcknowledgeFailed>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d028      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe fd63 	bl	8001b9c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11d      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d016      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d1c3      	bne.n	80030ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d11b      	bne.n	800318c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800315c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319a:	b08b      	sub	sp, #44	; 0x2c
 800319c:	af06      	add	r7, sp, #24
 800319e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0f1      	b.n	800338e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fb52 	bl	8001868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fbca 	bl	800496a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	687e      	ldr	r6, [r7, #4]
 80031de:	466d      	mov	r5, sp
 80031e0:	f106 0410 	add.w	r4, r6, #16
 80031e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	602b      	str	r3, [r5, #0]
 80031ec:	1d33      	adds	r3, r6, #4
 80031ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	f001 fbaa 	bl	800494a <USB_CoreInit>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0c2      	b.n	800338e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fbc5 	bl	800499e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e040      	b.n	800329c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3301      	adds	r3, #1
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3303      	adds	r3, #3
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	3338      	adds	r3, #56	; 0x38
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	333c      	adds	r3, #60	; 0x3c
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3301      	adds	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3b9      	bcc.n	800321a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e044      	b.n	8003336 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	3301      	adds	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d3b5      	bcc.n	80032ac <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	687e      	ldr	r6, [r7, #4]
 8003348:	466d      	mov	r5, sp
 800334a:	f106 0410 	add.w	r4, r6, #16
 800334e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	602b      	str	r3, [r5, #0]
 8003356:	1d33      	adds	r3, r6, #4
 8003358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f001 fb2b 	bl	80049b6 <USB_DevInit>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00d      	b.n	800338e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fb35 	bl	80049f6 <USB_DevDisconnect>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e272      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8087 	beq.w	80034c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b8:	4b92      	ldr	r3, [pc, #584]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d00c      	beq.n	80033de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c4:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d112      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
 80033d0:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033de:	4b89      	ldr	r3, [pc, #548]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x12c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d168      	bne.n	80034c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e24c      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x76>
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7f      	ldr	r2, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e02e      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b78      	ldr	r3, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a77      	ldr	r2, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0xbc>
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a71      	ldr	r2, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6e      	ldr	r2, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003454:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6a      	ldr	r2, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a67      	ldr	r2, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fb92 	bl	8001b9c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fb8e 	bl	8001b9c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e200      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xe4>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fb7e 	bl	8001b9c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fb7a 	bl	8001b9c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1ec      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x10c>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d2:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x18c>
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x176>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1c0      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4939      	ldr	r1, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x270>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fe fb33 	bl	8001b9c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353a:	f7fe fb2f 	bl	8001b9c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1a1      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCC_OscConfig+0x270>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe fb12 	bl	8001b9c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357c:	f7fe fb0e 	bl	8001b9c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e180      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03a      	beq.n	800361c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d019      	beq.n	80035e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_RCC_OscConfig+0x274>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fe faf2 	bl	8001b9c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fe faee 	bl	8001b9c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e160      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035da:	2001      	movs	r0, #1
 80035dc:	f000 faba 	bl	8003b54 <RCC_Delay>
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_OscConfig+0x274>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7fe fad8 	bl	8001b9c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ee:	e00f      	b.n	8003610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fe fad4 	bl	8001b9c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d908      	bls.n	8003610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e146      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	42420000 	.word	0x42420000
 800360c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e9      	bne.n	80035f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a6 	beq.w	8003776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b8b      	ldr	r3, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a87      	ldr	r2, [pc, #540]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b7f      	ldr	r3, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7e      	ldr	r2, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fe fa95 	bl	8001b9c <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fe fa91 	bl	8001b9c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e103      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b75      	ldr	r3, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x312>
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e02d      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x334>
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	e01c      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d10c      	bne.n	80036ee <HAL_RCC_OscConfig+0x356>
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a60      	ldr	r2, [pc, #384]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	e00b      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d015      	beq.n	800373a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fe fa45 	bl	8001b9c <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe fa41 	bl	8001b9c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0b1      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ee      	beq.n	8003716 <HAL_RCC_OscConfig+0x37e>
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7fe fa2f 	bl	8001b9c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fa2b 	bl	8001b9c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e09b      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ee      	bne.n	8003742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8087 	beq.w	800388e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d061      	beq.n	8003850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d146      	bne.n	8003822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe f9ff 	bl	8001b9c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe f9fb 	bl	8001b9c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e06d      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d108      	bne.n	80037dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4921      	ldr	r1, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a19      	ldr	r1, [r3, #32]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	430b      	orrs	r3, r1
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe f9cf 	bl	8001b9c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe f9cb 	bl	8001b9c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e03d      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x46a>
 8003820:	e035      	b.n	800388e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe f9b8 	bl	8001b9c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f9b4 	bl	8001b9c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e026      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x498>
 800384e:	e01e      	b.n	800388e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e019      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x500>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	429a      	cmp	r2, r3
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0d0      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d910      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4965      	ldr	r1, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800391a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d040      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e073      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06b      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4936      	ldr	r1, [pc, #216]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7fe f906 	bl	8001b9c <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe f902 	bl	8001b9c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e053      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d210      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	4922      	ldr	r1, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1cc>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1d0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe f864 	bl	8001b18 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080094ac 	.word	0x080094ac
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	20000008 	.word	0x20000008

08003a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d002      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8003a9e:	e027      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa2:	613b      	str	r3, [r7, #16]
      break;
 8003aa4:	e027      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	0c9b      	lsrs	r3, r3, #18
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0c5b      	lsrs	r3, r3, #17
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad2:	fb03 f202 	mul.w	r2, r3, r2
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e004      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	613b      	str	r3, [r7, #16]
      break;
 8003aee:	e002      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003af2:	613b      	str	r3, [r7, #16]
      break;
 8003af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af6:	693b      	ldr	r3, [r7, #16]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	007a1200 	.word	0x007a1200
 8003b0c:	080094c4 	.word	0x080094c4
 8003b10:	080094d4 	.word	0x080094d4
 8003b14:	003d0900 	.word	0x003d0900

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff2 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	080094bc 	.word	0x080094bc

08003b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <RCC_Delay+0x34>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <RCC_Delay+0x38>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	0a5b      	lsrs	r3, r3, #9
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b70:	bf00      	nop
  }
  while (Delay --);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e5a      	subs	r2, r3, #1
 8003b76:	60fa      	str	r2, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f9      	bne.n	8003b70 <RCC_Delay+0x1c>
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	10624dd3 	.word	0x10624dd3

08003b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d07d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb0:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	61d3      	str	r3, [r2, #28]
 8003bc8:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d118      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be4:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a42      	ldr	r2, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd ffd4 	bl	8001b9c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	e008      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fd ffd0 	bl	8001b9c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06d      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02e      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d027      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ff9f 	bl	8001b9c <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd ff9b 	bl	8001b9c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e036      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ee      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4917      	ldr	r1, [pc, #92]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	490b      	ldr	r1, [pc, #44]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	42420440 	.word	0x42420440

08003cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e041      	b.n	8003d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fd4e 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 fab2 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e041      	b.n	8003e30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f839 	bl	8003e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f000 fa63 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_TIM_PWM_Start+0x24>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e022      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d109      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x3e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e015      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d109      	bne.n	8003ea4 <HAL_TIM_PWM_Start+0x58>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e008      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x6a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e05e      	b.n	8003f7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	e013      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_PWM_Start+0x92>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	e00b      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	e003      	b.n	8003ef6 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fc50 	bl	80047a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <HAL_TIM_PWM_Start+0x138>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_TIM_PWM_Start+0x138>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIM_PWM_Start+0xfa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d009      	beq.n	8003f46 <HAL_TIM_PWM_Start+0xfa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <HAL_TIM_PWM_Start+0x13c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_PWM_Start+0xfa>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_TIM_PWM_Start+0x140>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d010      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f68:	e007      	b.n	8003f7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800

08003f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0ae      	b.n	800410c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	f200 809f 	bhi.w	80040fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	080040fd 	.word	0x080040fd
 8003fcc:	080040fd 	.word	0x080040fd
 8003fd0:	080040fd 	.word	0x080040fd
 8003fd4:	08004039 	.word	0x08004039
 8003fd8:	080040fd 	.word	0x080040fd
 8003fdc:	080040fd 	.word	0x080040fd
 8003fe0:	080040fd 	.word	0x080040fd
 8003fe4:	0800407b 	.word	0x0800407b
 8003fe8:	080040fd 	.word	0x080040fd
 8003fec:	080040fd 	.word	0x080040fd
 8003ff0:	080040fd 	.word	0x080040fd
 8003ff4:	080040bb 	.word	0x080040bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f9b2 	bl	8004368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0208 	orr.w	r2, r2, #8
 8004012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0204 	bic.w	r2, r2, #4
 8004022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	619a      	str	r2, [r3, #24]
      break;
 8004036:	e064      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f9f8 	bl	8004434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	619a      	str	r2, [r3, #24]
      break;
 8004078:	e043      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fa41 	bl	8004508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0208 	orr.w	r2, r2, #8
 8004094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0204 	bic.w	r2, r2, #4
 80040a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
      break;
 80040b8:	e023      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa8b 	bl	80045dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	021a      	lsls	r2, r3, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	61da      	str	r2, [r3, #28]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_ConfigClockSource+0x1c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0b4      	b.n	800429a <HAL_TIM_ConfigClockSource+0x186>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004168:	d03e      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xd4>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	f200 8087 	bhi.w	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	f000 8086 	beq.w	8004286 <HAL_TIM_ConfigClockSource+0x172>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d87f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b70      	cmp	r3, #112	; 0x70
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xa6>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d87b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b60      	cmp	r3, #96	; 0x60
 800418a:	d050      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x11a>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d877      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d03c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xfa>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d873      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d058      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x13a>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d86f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d064      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d86b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d060      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d867      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d05a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	e062      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	f000 facc 	bl	8004766 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04f      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	f000 fab5 	bl	8004766 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e03c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 fa2c 	bl	8004678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	; 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa83 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800422c:	e02c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 fa4a 	bl	80046d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	; 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fa73 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800424c:	e01c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	461a      	mov	r2, r3
 800425c:	f000 fa0c 	bl	8004678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fa63 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800426c:	e00c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 fa5a 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800427e:	e003      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e000      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a29      	ldr	r2, [pc, #164]	; (800435c <TIM_Base_SetConfig+0xb8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <TIM_Base_SetConfig+0xbc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a25      	ldr	r2, [pc, #148]	; (8004364 <TIM_Base_SetConfig+0xc0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <TIM_Base_SetConfig+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <TIM_Base_SetConfig+0xbc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <TIM_Base_SetConfig+0xc0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <TIM_Base_SetConfig+0xb8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800

08004368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 0201 	bic.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0302 	bic.w	r3, r3, #2
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <TIM_OC1_SetConfig+0xc8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10c      	bne.n	80043de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0308 	bic.w	r3, r3, #8
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <TIM_OC1_SetConfig+0xc8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d111      	bne.n	800440a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00

08004434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f023 0210 	bic.w	r2, r3, #16
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0320 	bic.w	r3, r3, #32
 800447e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <TIM_OC2_SetConfig+0xd0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10d      	bne.n	80044b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <TIM_OC2_SetConfig+0xd0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d113      	bne.n	80044e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00

08004508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <TIM_OC3_SetConfig+0xd0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10d      	bne.n	8004582 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800456c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC3_SetConfig+0xd0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00

080045dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <TIM_OC4_SetConfig+0x98>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d109      	bne.n	8004650 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	019b      	lsls	r3, r3, #6
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00

08004678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 030a 	bic.w	r3, r3, #10
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0210 	bic.w	r2, r3, #16
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	031b      	lsls	r3, r3, #12
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004710:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0307 	orr.w	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004780:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	021a      	lsls	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	431a      	orrs	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	609a      	str	r2, [r3, #8]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2201      	movs	r2, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	401a      	ands	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e046      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800

080048a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e03d      	b.n	8004940 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr

0800494a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800494a:	b084      	sub	sp, #16
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	f107 0014 	add.w	r0, r7, #20
 8004958:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	b004      	add	sp, #16
 8004968:	4770      	bx	lr

0800496a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004972:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004976:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	b29b      	uxth	r3, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	4013      	ands	r3, r2
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049b6:	b084      	sub	sp, #16
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	f107 0014 	add.w	r0, r7, #20
 80049c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	b004      	add	sp, #16
 80049f4:	4770      	bx	lr

080049f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
	...

08004a0c <std>:
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	e9c0 3300 	strd	r3, r3, [r0]
 8004a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6183      	str	r3, [r0, #24]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	305c      	adds	r0, #92	; 0x5c
 8004a2a:	f000 f902 	bl	8004c32 <memset>
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x38>)
 8004a30:	61e4      	str	r4, [r4, #28]
 8004a32:	6223      	str	r3, [r4, #32]
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <std+0x3c>)
 8004a36:	6263      	str	r3, [r4, #36]	; 0x24
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <std+0x40>)
 8004a3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <std+0x44>)
 8004a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08004bad 	.word	0x08004bad
 8004a48:	08004bcf 	.word	0x08004bcf
 8004a4c:	08004c07 	.word	0x08004c07
 8004a50:	08004c2b 	.word	0x08004c2b

08004a54 <stdio_exit_handler>:
 8004a54:	4a02      	ldr	r2, [pc, #8]	; (8004a60 <stdio_exit_handler+0xc>)
 8004a56:	4903      	ldr	r1, [pc, #12]	; (8004a64 <stdio_exit_handler+0x10>)
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <stdio_exit_handler+0x14>)
 8004a5a:	f000 b869 	b.w	8004b30 <_fwalk_sglue>
 8004a5e:	bf00      	nop
 8004a60:	20000010 	.word	0x20000010
 8004a64:	0800679d 	.word	0x0800679d
 8004a68:	20000020 	.word	0x20000020

08004a6c <cleanup_stdio>:
 8004a6c:	6841      	ldr	r1, [r0, #4]
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <cleanup_stdio+0x34>)
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4299      	cmp	r1, r3
 8004a74:	4604      	mov	r4, r0
 8004a76:	d001      	beq.n	8004a7c <cleanup_stdio+0x10>
 8004a78:	f001 fe90 	bl	800679c <_fclose_r>
 8004a7c:	68a1      	ldr	r1, [r4, #8]
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <cleanup_stdio+0x38>)
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d002      	beq.n	8004a8a <cleanup_stdio+0x1e>
 8004a84:	4620      	mov	r0, r4
 8004a86:	f001 fe89 	bl	800679c <_fclose_r>
 8004a8a:	68e1      	ldr	r1, [r4, #12]
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <cleanup_stdio+0x3c>)
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d004      	beq.n	8004a9c <cleanup_stdio+0x30>
 8004a92:	4620      	mov	r0, r4
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f001 be80 	b.w	800679c <_fclose_r>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000aec 	.word	0x20000aec
 8004aa4:	20000b54 	.word	0x20000b54
 8004aa8:	20000bbc 	.word	0x20000bbc

08004aac <global_stdio_init.part.0>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <global_stdio_init.part.0+0x30>)
 8004ab0:	4c0b      	ldr	r4, [pc, #44]	; (8004ae0 <global_stdio_init.part.0+0x34>)
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <global_stdio_init.part.0+0x38>)
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	2104      	movs	r1, #4
 8004aba:	2200      	movs	r2, #0
 8004abc:	f7ff ffa6 	bl	8004a0c <std>
 8004ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2109      	movs	r1, #9
 8004ac8:	f7ff ffa0 	bl	8004a0c <std>
 8004acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad6:	2112      	movs	r1, #18
 8004ad8:	f7ff bf98 	b.w	8004a0c <std>
 8004adc:	20000c24 	.word	0x20000c24
 8004ae0:	20000aec 	.word	0x20000aec
 8004ae4:	08004a55 	.word	0x08004a55

08004ae8 <__sfp_lock_acquire>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__sfp_lock_acquire+0x8>)
 8004aea:	f000 b91d 	b.w	8004d28 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000c2e 	.word	0x20000c2e

08004af4 <__sfp_lock_release>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__sfp_lock_release+0x8>)
 8004af6:	f000 b918 	b.w	8004d2a <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000c2e 	.word	0x20000c2e

08004b00 <__sinit>:
 8004b00:	b510      	push	{r4, lr}
 8004b02:	4604      	mov	r4, r0
 8004b04:	f7ff fff0 	bl	8004ae8 <__sfp_lock_acquire>
 8004b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b0a:	b11b      	cbz	r3, 8004b14 <__sinit+0x14>
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	f7ff bff0 	b.w	8004af4 <__sfp_lock_release>
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <__sinit+0x28>)
 8004b16:	6363      	str	r3, [r4, #52]	; 0x34
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <__sinit+0x2c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f5      	bne.n	8004b0c <__sinit+0xc>
 8004b20:	f7ff ffc4 	bl	8004aac <global_stdio_init.part.0>
 8004b24:	e7f2      	b.n	8004b0c <__sinit+0xc>
 8004b26:	bf00      	nop
 8004b28:	08004a6d 	.word	0x08004a6d
 8004b2c:	20000c24 	.word	0x20000c24

08004b30 <_fwalk_sglue>:
 8004b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b34:	4607      	mov	r7, r0
 8004b36:	4688      	mov	r8, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b40:	f1b9 0901 	subs.w	r9, r9, #1
 8004b44:	d505      	bpl.n	8004b52 <_fwalk_sglue+0x22>
 8004b46:	6824      	ldr	r4, [r4, #0]
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	d1f7      	bne.n	8004b3c <_fwalk_sglue+0xc>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b52:	89ab      	ldrh	r3, [r5, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d907      	bls.n	8004b68 <_fwalk_sglue+0x38>
 8004b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	d003      	beq.n	8004b68 <_fwalk_sglue+0x38>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	4306      	orrs	r6, r0
 8004b68:	3568      	adds	r5, #104	; 0x68
 8004b6a:	e7e9      	b.n	8004b40 <_fwalk_sglue+0x10>

08004b6c <sprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b72:	b500      	push	{lr}
 8004b74:	b09c      	sub	sp, #112	; 0x70
 8004b76:	ab1d      	add	r3, sp, #116	; 0x74
 8004b78:	9002      	str	r0, [sp, #8]
 8004b7a:	9006      	str	r0, [sp, #24]
 8004b7c:	9107      	str	r1, [sp, #28]
 8004b7e:	9104      	str	r1, [sp, #16]
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <sprintf+0x38>)
 8004b82:	4909      	ldr	r1, [pc, #36]	; (8004ba8 <sprintf+0x3c>)
 8004b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	a902      	add	r1, sp, #8
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f000 fc36 	bl	8005400 <_svfprintf_r>
 8004b94:	2200      	movs	r2, #0
 8004b96:	9b02      	ldr	r3, [sp, #8]
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	b01c      	add	sp, #112	; 0x70
 8004b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	4770      	bx	lr
 8004ba4:	20000140 	.word	0x20000140
 8004ba8:	ffff0208 	.word	0xffff0208

08004bac <__sread>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	f000 f868 	bl	8004c88 <_read_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	bfab      	itete	ge
 8004bbc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8004bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004bc0:	181b      	addge	r3, r3, r0
 8004bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bc6:	bfac      	ite	ge
 8004bc8:	6523      	strge	r3, [r4, #80]	; 0x50
 8004bca:	81a3      	strhlt	r3, [r4, #12]
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <__swrite>:
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	05db      	lsls	r3, r3, #23
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4616      	mov	r6, r2
 8004bde:	d505      	bpl.n	8004bec <__swrite+0x1e>
 8004be0:	2302      	movs	r3, #2
 8004be2:	2200      	movs	r2, #0
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	f000 f83c 	bl	8004c64 <_lseek_r>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	4632      	mov	r2, r6
 8004bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	f000 b853 	b.w	8004cac <_write_r>

08004c06 <__sseek>:
 8004c06:	b510      	push	{r4, lr}
 8004c08:	460c      	mov	r4, r1
 8004c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0e:	f000 f829 	bl	8004c64 <_lseek_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	bf15      	itete	ne
 8004c18:	6520      	strne	r0, [r4, #80]	; 0x50
 8004c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c22:	81a3      	strheq	r3, [r4, #12]
 8004c24:	bf18      	it	ne
 8004c26:	81a3      	strhne	r3, [r4, #12]
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <__sclose>:
 8004c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2e:	f000 b809 	b.w	8004c44 <_close_r>

08004c32 <memset>:
 8004c32:	4603      	mov	r3, r0
 8004c34:	4402      	add	r2, r0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d100      	bne.n	8004c3c <memset+0xa>
 8004c3a:	4770      	bx	lr
 8004c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004c40:	e7f9      	b.n	8004c36 <memset+0x4>
	...

08004c44 <_close_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	2300      	movs	r3, #0
 8004c48:	4d05      	ldr	r5, [pc, #20]	; (8004c60 <_close_r+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fc feba 	bl	80019c8 <_close>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_close_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_close_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20000c28 	.word	0x20000c28

08004c64 <_lseek_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4d05      	ldr	r5, [pc, #20]	; (8004c84 <_lseek_r+0x20>)
 8004c70:	602a      	str	r2, [r5, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f7fc fecc 	bl	8001a10 <_lseek>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_lseek_r+0x1e>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_lseek_r+0x1e>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000c28 	.word	0x20000c28

08004c88 <_read_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	4d05      	ldr	r5, [pc, #20]	; (8004ca8 <_read_r+0x20>)
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fc fe5d 	bl	8001956 <_read>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_read_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_read_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000c28 	.word	0x20000c28

08004cac <_write_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4d05      	ldr	r5, [pc, #20]	; (8004ccc <_write_r+0x20>)
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7fc fe68 	bl	8001990 <_write>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_write_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_write_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000c28 	.word	0x20000c28

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	; (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000140 	.word	0x20000140

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	2600      	movs	r6, #0
 8004ce0:	4d0c      	ldr	r5, [pc, #48]	; (8004d14 <__libc_init_array+0x38>)
 8004ce2:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	f004 fbbc 	bl	8009468 <_init>
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	4d0a      	ldr	r5, [pc, #40]	; (8004d1c <__libc_init_array+0x40>)
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	; (8004d20 <__libc_init_array+0x44>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	0800986c 	.word	0x0800986c
 8004d18:	0800986c 	.word	0x0800986c
 8004d1c:	0800986c 	.word	0x0800986c
 8004d20:	08009874 	.word	0x08009874

08004d24 <__retarget_lock_init_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <__retarget_lock_close_recursive>:
 8004d26:	4770      	bx	lr

08004d28 <__retarget_lock_acquire_recursive>:
 8004d28:	4770      	bx	lr

08004d2a <__retarget_lock_release_recursive>:
 8004d2a:	4770      	bx	lr

08004d2c <register_fini>:
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <register_fini+0xc>)
 8004d2e:	b113      	cbz	r3, 8004d36 <register_fini+0xa>
 8004d30:	4802      	ldr	r0, [pc, #8]	; (8004d3c <register_fini+0x10>)
 8004d32:	f000 b805 	b.w	8004d40 <atexit>
 8004d36:	4770      	bx	lr
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	080069f9 	.word	0x080069f9

08004d40 <atexit>:
 8004d40:	2300      	movs	r3, #0
 8004d42:	4601      	mov	r1, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 beb8 	b.w	8006abc <__register_exitproc>

08004d4c <_malloc_trim_r>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4606      	mov	r6, r0
 8004d52:	2008      	movs	r0, #8
 8004d54:	460c      	mov	r4, r1
 8004d56:	f001 fe63 	bl	8006a20 <sysconf>
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	4f22      	ldr	r7, [pc, #136]	; (8004de8 <_malloc_trim_r+0x9c>)
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 fb42 	bl	80053e8 <__malloc_lock>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685d      	ldr	r5, [r3, #4]
 8004d68:	f025 0503 	bic.w	r5, r5, #3
 8004d6c:	1b2c      	subs	r4, r5, r4
 8004d6e:	3c11      	subs	r4, #17
 8004d70:	4444      	add	r4, r8
 8004d72:	fbb4 f4f8 	udiv	r4, r4, r8
 8004d76:	3c01      	subs	r4, #1
 8004d78:	fb08 f404 	mul.w	r4, r8, r4
 8004d7c:	45a0      	cmp	r8, r4
 8004d7e:	dd05      	ble.n	8004d8c <_malloc_trim_r+0x40>
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 fb37 	bl	80053f4 <__malloc_unlock>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f001 fe22 	bl	80069d8 <_sbrk_r>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	442b      	add	r3, r5
 8004d98:	4298      	cmp	r0, r3
 8004d9a:	d1f1      	bne.n	8004d80 <_malloc_trim_r+0x34>
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	4261      	negs	r1, r4
 8004da0:	f001 fe1a 	bl	80069d8 <_sbrk_r>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d110      	bne.n	8004dca <_malloc_trim_r+0x7e>
 8004da8:	2100      	movs	r1, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	f001 fe14 	bl	80069d8 <_sbrk_r>
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	1a83      	subs	r3, r0, r2
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	dde3      	ble.n	8004d80 <_malloc_trim_r+0x34>
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <_malloc_trim_r+0xa0>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6809      	ldr	r1, [r1, #0]
 8004dc0:	6053      	str	r3, [r2, #4]
 8004dc2:	1a40      	subs	r0, r0, r1
 8004dc4:	490a      	ldr	r1, [pc, #40]	; (8004df0 <_malloc_trim_r+0xa4>)
 8004dc6:	6008      	str	r0, [r1, #0]
 8004dc8:	e7da      	b.n	8004d80 <_malloc_trim_r+0x34>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <_malloc_trim_r+0xa4>)
 8004dce:	1b2d      	subs	r5, r5, r4
 8004dd0:	f045 0501 	orr.w	r5, r5, #1
 8004dd4:	605d      	str	r5, [r3, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	1b1b      	subs	r3, r3, r4
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	f000 fb09 	bl	80053f4 <__malloc_unlock>
 8004de2:	2001      	movs	r0, #1
 8004de4:	e7d0      	b.n	8004d88 <_malloc_trim_r+0x3c>
 8004de6:	bf00      	nop
 8004de8:	20000148 	.word	0x20000148
 8004dec:	20000550 	.word	0x20000550
 8004df0:	20000c34 	.word	0x20000c34

08004df4 <_free_r>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	460f      	mov	r7, r1
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	f000 80b1 	beq.w	8004f62 <_free_r+0x16e>
 8004e00:	f000 faf2 	bl	80053e8 <__malloc_lock>
 8004e04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8004e08:	4856      	ldr	r0, [pc, #344]	; (8004f64 <_free_r+0x170>)
 8004e0a:	f022 0401 	bic.w	r4, r2, #1
 8004e0e:	f1a7 0308 	sub.w	r3, r7, #8
 8004e12:	eb03 0c04 	add.w	ip, r3, r4
 8004e16:	6881      	ldr	r1, [r0, #8]
 8004e18:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004e1c:	4561      	cmp	r1, ip
 8004e1e:	f026 0603 	bic.w	r6, r6, #3
 8004e22:	f002 0201 	and.w	r2, r2, #1
 8004e26:	d11b      	bne.n	8004e60 <_free_r+0x6c>
 8004e28:	4426      	add	r6, r4
 8004e2a:	b93a      	cbnz	r2, 8004e3c <_free_r+0x48>
 8004e2c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	4416      	add	r6, r2
 8004e34:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004e38:	60ca      	str	r2, [r1, #12]
 8004e3a:	6091      	str	r1, [r2, #8]
 8004e3c:	f046 0201 	orr.w	r2, r6, #1
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	6083      	str	r3, [r0, #8]
 8004e44:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <_free_r+0x174>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	d804      	bhi.n	8004e56 <_free_r+0x62>
 8004e4c:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <_free_r+0x178>)
 8004e4e:	4628      	mov	r0, r5
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	f7ff ff7b 	bl	8004d4c <_malloc_trim_r>
 8004e56:	4628      	mov	r0, r5
 8004e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e5c:	f000 baca 	b.w	80053f4 <__malloc_unlock>
 8004e60:	f8cc 6004 	str.w	r6, [ip, #4]
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d138      	bne.n	8004eda <_free_r+0xe6>
 8004e68:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8004e6c:	f100 0708 	add.w	r7, r0, #8
 8004e70:	1a5b      	subs	r3, r3, r1
 8004e72:	440c      	add	r4, r1
 8004e74:	6899      	ldr	r1, [r3, #8]
 8004e76:	42b9      	cmp	r1, r7
 8004e78:	d031      	beq.n	8004ede <_free_r+0xea>
 8004e7a:	68df      	ldr	r7, [r3, #12]
 8004e7c:	60cf      	str	r7, [r1, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	eb0c 0106 	add.w	r1, ip, r6
 8004e84:	6849      	ldr	r1, [r1, #4]
 8004e86:	07c9      	lsls	r1, r1, #31
 8004e88:	d40b      	bmi.n	8004ea2 <_free_r+0xae>
 8004e8a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004e8e:	4434      	add	r4, r6
 8004e90:	bb3a      	cbnz	r2, 8004ee2 <_free_r+0xee>
 8004e92:	4e37      	ldr	r6, [pc, #220]	; (8004f70 <_free_r+0x17c>)
 8004e94:	42b1      	cmp	r1, r6
 8004e96:	d124      	bne.n	8004ee2 <_free_r+0xee>
 8004e98:	2201      	movs	r2, #1
 8004e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e9e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004ea2:	f044 0101 	orr.w	r1, r4, #1
 8004ea6:	6059      	str	r1, [r3, #4]
 8004ea8:	511c      	str	r4, [r3, r4]
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	d1d3      	bne.n	8004e56 <_free_r+0x62>
 8004eae:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8004eb2:	d21b      	bcs.n	8004eec <_free_r+0xf8>
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	08e2      	lsrs	r2, r4, #3
 8004eb8:	0964      	lsrs	r4, r4, #5
 8004eba:	40a1      	lsls	r1, r4
 8004ebc:	6844      	ldr	r4, [r0, #4]
 8004ebe:	3201      	adds	r2, #1
 8004ec0:	4321      	orrs	r1, r4
 8004ec2:	6041      	str	r1, [r0, #4]
 8004ec4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8004ec8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8004ecc:	3908      	subs	r1, #8
 8004ece:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8004ed2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8004ed6:	60e3      	str	r3, [r4, #12]
 8004ed8:	e7bd      	b.n	8004e56 <_free_r+0x62>
 8004eda:	2200      	movs	r2, #0
 8004edc:	e7d0      	b.n	8004e80 <_free_r+0x8c>
 8004ede:	2201      	movs	r2, #1
 8004ee0:	e7ce      	b.n	8004e80 <_free_r+0x8c>
 8004ee2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8004ee6:	60ce      	str	r6, [r1, #12]
 8004ee8:	60b1      	str	r1, [r6, #8]
 8004eea:	e7da      	b.n	8004ea2 <_free_r+0xae>
 8004eec:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8004ef0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8004ef4:	d214      	bcs.n	8004f20 <_free_r+0x12c>
 8004ef6:	09a2      	lsrs	r2, r4, #6
 8004ef8:	3238      	adds	r2, #56	; 0x38
 8004efa:	1c51      	adds	r1, r2, #1
 8004efc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8004f00:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8004f04:	428e      	cmp	r6, r1
 8004f06:	d125      	bne.n	8004f54 <_free_r+0x160>
 8004f08:	2401      	movs	r4, #1
 8004f0a:	1092      	asrs	r2, r2, #2
 8004f0c:	fa04 f202 	lsl.w	r2, r4, r2
 8004f10:	6844      	ldr	r4, [r0, #4]
 8004f12:	4322      	orrs	r2, r4
 8004f14:	6042      	str	r2, [r0, #4]
 8004f16:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004f1a:	60b3      	str	r3, [r6, #8]
 8004f1c:	60cb      	str	r3, [r1, #12]
 8004f1e:	e79a      	b.n	8004e56 <_free_r+0x62>
 8004f20:	2a14      	cmp	r2, #20
 8004f22:	d801      	bhi.n	8004f28 <_free_r+0x134>
 8004f24:	325b      	adds	r2, #91	; 0x5b
 8004f26:	e7e8      	b.n	8004efa <_free_r+0x106>
 8004f28:	2a54      	cmp	r2, #84	; 0x54
 8004f2a:	d802      	bhi.n	8004f32 <_free_r+0x13e>
 8004f2c:	0b22      	lsrs	r2, r4, #12
 8004f2e:	326e      	adds	r2, #110	; 0x6e
 8004f30:	e7e3      	b.n	8004efa <_free_r+0x106>
 8004f32:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004f36:	d802      	bhi.n	8004f3e <_free_r+0x14a>
 8004f38:	0be2      	lsrs	r2, r4, #15
 8004f3a:	3277      	adds	r2, #119	; 0x77
 8004f3c:	e7dd      	b.n	8004efa <_free_r+0x106>
 8004f3e:	f240 5154 	movw	r1, #1364	; 0x554
 8004f42:	428a      	cmp	r2, r1
 8004f44:	bf96      	itet	ls
 8004f46:	0ca2      	lsrls	r2, r4, #18
 8004f48:	227e      	movhi	r2, #126	; 0x7e
 8004f4a:	327c      	addls	r2, #124	; 0x7c
 8004f4c:	e7d5      	b.n	8004efa <_free_r+0x106>
 8004f4e:	6889      	ldr	r1, [r1, #8]
 8004f50:	428e      	cmp	r6, r1
 8004f52:	d004      	beq.n	8004f5e <_free_r+0x16a>
 8004f54:	684a      	ldr	r2, [r1, #4]
 8004f56:	f022 0203 	bic.w	r2, r2, #3
 8004f5a:	42a2      	cmp	r2, r4
 8004f5c:	d8f7      	bhi.n	8004f4e <_free_r+0x15a>
 8004f5e:	68ce      	ldr	r6, [r1, #12]
 8004f60:	e7d9      	b.n	8004f16 <_free_r+0x122>
 8004f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f64:	20000148 	.word	0x20000148
 8004f68:	20000554 	.word	0x20000554
 8004f6c:	20000c64 	.word	0x20000c64
 8004f70:	20000150 	.word	0x20000150

08004f74 <_malloc_r>:
 8004f74:	f101 030b 	add.w	r3, r1, #11
 8004f78:	2b16      	cmp	r3, #22
 8004f7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7e:	4605      	mov	r5, r0
 8004f80:	d906      	bls.n	8004f90 <_malloc_r+0x1c>
 8004f82:	f033 0707 	bics.w	r7, r3, #7
 8004f86:	d504      	bpl.n	8004f92 <_malloc_r+0x1e>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	e1a1      	b.n	80052d4 <_malloc_r+0x360>
 8004f90:	2710      	movs	r7, #16
 8004f92:	42b9      	cmp	r1, r7
 8004f94:	d8f8      	bhi.n	8004f88 <_malloc_r+0x14>
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 fa26 	bl	80053e8 <__malloc_lock>
 8004f9c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8004fa0:	4eae      	ldr	r6, [pc, #696]	; (800525c <_malloc_r+0x2e8>)
 8004fa2:	d237      	bcs.n	8005014 <_malloc_r+0xa0>
 8004fa4:	f107 0208 	add.w	r2, r7, #8
 8004fa8:	4432      	add	r2, r6
 8004faa:	6854      	ldr	r4, [r2, #4]
 8004fac:	f1a2 0108 	sub.w	r1, r2, #8
 8004fb0:	428c      	cmp	r4, r1
 8004fb2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8004fb6:	d102      	bne.n	8004fbe <_malloc_r+0x4a>
 8004fb8:	68d4      	ldr	r4, [r2, #12]
 8004fba:	42a2      	cmp	r2, r4
 8004fbc:	d010      	beq.n	8004fe0 <_malloc_r+0x6c>
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	60ca      	str	r2, [r1, #12]
 8004fca:	4423      	add	r3, r4
 8004fcc:	6091      	str	r1, [r2, #8]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 fa0c 	bl	80053f4 <__malloc_unlock>
 8004fdc:	3408      	adds	r4, #8
 8004fde:	e179      	b.n	80052d4 <_malloc_r+0x360>
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	6934      	ldr	r4, [r6, #16]
 8004fe4:	499e      	ldr	r1, [pc, #632]	; (8005260 <_malloc_r+0x2ec>)
 8004fe6:	428c      	cmp	r4, r1
 8004fe8:	d077      	beq.n	80050da <_malloc_r+0x166>
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	f022 0c03 	bic.w	ip, r2, #3
 8004ff0:	ebac 0007 	sub.w	r0, ip, r7
 8004ff4:	280f      	cmp	r0, #15
 8004ff6:	dd48      	ble.n	800508a <_malloc_r+0x116>
 8004ff8:	19e2      	adds	r2, r4, r7
 8004ffa:	f040 0301 	orr.w	r3, r0, #1
 8004ffe:	f047 0701 	orr.w	r7, r7, #1
 8005002:	6067      	str	r7, [r4, #4]
 8005004:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8005008:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	f844 000c 	str.w	r0, [r4, ip]
 8005012:	e7e0      	b.n	8004fd6 <_malloc_r+0x62>
 8005014:	0a7b      	lsrs	r3, r7, #9
 8005016:	d02a      	beq.n	800506e <_malloc_r+0xfa>
 8005018:	2b04      	cmp	r3, #4
 800501a:	d812      	bhi.n	8005042 <_malloc_r+0xce>
 800501c:	09bb      	lsrs	r3, r7, #6
 800501e:	3338      	adds	r3, #56	; 0x38
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8005026:	6854      	ldr	r4, [r2, #4]
 8005028:	f1a2 0c08 	sub.w	ip, r2, #8
 800502c:	4564      	cmp	r4, ip
 800502e:	d006      	beq.n	800503e <_malloc_r+0xca>
 8005030:	6862      	ldr	r2, [r4, #4]
 8005032:	f022 0203 	bic.w	r2, r2, #3
 8005036:	1bd0      	subs	r0, r2, r7
 8005038:	280f      	cmp	r0, #15
 800503a:	dd1c      	ble.n	8005076 <_malloc_r+0x102>
 800503c:	3b01      	subs	r3, #1
 800503e:	3301      	adds	r3, #1
 8005040:	e7cf      	b.n	8004fe2 <_malloc_r+0x6e>
 8005042:	2b14      	cmp	r3, #20
 8005044:	d801      	bhi.n	800504a <_malloc_r+0xd6>
 8005046:	335b      	adds	r3, #91	; 0x5b
 8005048:	e7ea      	b.n	8005020 <_malloc_r+0xac>
 800504a:	2b54      	cmp	r3, #84	; 0x54
 800504c:	d802      	bhi.n	8005054 <_malloc_r+0xe0>
 800504e:	0b3b      	lsrs	r3, r7, #12
 8005050:	336e      	adds	r3, #110	; 0x6e
 8005052:	e7e5      	b.n	8005020 <_malloc_r+0xac>
 8005054:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005058:	d802      	bhi.n	8005060 <_malloc_r+0xec>
 800505a:	0bfb      	lsrs	r3, r7, #15
 800505c:	3377      	adds	r3, #119	; 0x77
 800505e:	e7df      	b.n	8005020 <_malloc_r+0xac>
 8005060:	f240 5254 	movw	r2, #1364	; 0x554
 8005064:	4293      	cmp	r3, r2
 8005066:	d804      	bhi.n	8005072 <_malloc_r+0xfe>
 8005068:	0cbb      	lsrs	r3, r7, #18
 800506a:	337c      	adds	r3, #124	; 0x7c
 800506c:	e7d8      	b.n	8005020 <_malloc_r+0xac>
 800506e:	233f      	movs	r3, #63	; 0x3f
 8005070:	e7d6      	b.n	8005020 <_malloc_r+0xac>
 8005072:	237e      	movs	r3, #126	; 0x7e
 8005074:	e7d4      	b.n	8005020 <_malloc_r+0xac>
 8005076:	2800      	cmp	r0, #0
 8005078:	68e1      	ldr	r1, [r4, #12]
 800507a:	db04      	blt.n	8005086 <_malloc_r+0x112>
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	60d9      	str	r1, [r3, #12]
 8005080:	608b      	str	r3, [r1, #8]
 8005082:	18a3      	adds	r3, r4, r2
 8005084:	e7a3      	b.n	8004fce <_malloc_r+0x5a>
 8005086:	460c      	mov	r4, r1
 8005088:	e7d0      	b.n	800502c <_malloc_r+0xb8>
 800508a:	2800      	cmp	r0, #0
 800508c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8005090:	db07      	blt.n	80050a2 <_malloc_r+0x12e>
 8005092:	44a4      	add	ip, r4
 8005094:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	f8cc 3004 	str.w	r3, [ip, #4]
 80050a0:	e799      	b.n	8004fd6 <_malloc_r+0x62>
 80050a2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80050a6:	6870      	ldr	r0, [r6, #4]
 80050a8:	f080 8093 	bcs.w	80051d2 <_malloc_r+0x25e>
 80050ac:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80050b0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80050b4:	f04f 0c01 	mov.w	ip, #1
 80050b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80050bc:	ea4c 0000 	orr.w	r0, ip, r0
 80050c0:	3201      	adds	r2, #1
 80050c2:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80050c6:	6070      	str	r0, [r6, #4]
 80050c8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80050cc:	3808      	subs	r0, #8
 80050ce:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80050d2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80050d6:	f8cc 400c 	str.w	r4, [ip, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	1098      	asrs	r0, r3, #2
 80050de:	4082      	lsls	r2, r0
 80050e0:	6870      	ldr	r0, [r6, #4]
 80050e2:	4290      	cmp	r0, r2
 80050e4:	d326      	bcc.n	8005134 <_malloc_r+0x1c0>
 80050e6:	4210      	tst	r0, r2
 80050e8:	d106      	bne.n	80050f8 <_malloc_r+0x184>
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	0052      	lsls	r2, r2, #1
 80050f0:	4210      	tst	r0, r2
 80050f2:	f103 0304 	add.w	r3, r3, #4
 80050f6:	d0fa      	beq.n	80050ee <_malloc_r+0x17a>
 80050f8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80050fc:	46c1      	mov	r9, r8
 80050fe:	469e      	mov	lr, r3
 8005100:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005104:	454c      	cmp	r4, r9
 8005106:	f040 80b7 	bne.w	8005278 <_malloc_r+0x304>
 800510a:	f10e 0e01 	add.w	lr, lr, #1
 800510e:	f01e 0f03 	tst.w	lr, #3
 8005112:	f109 0908 	add.w	r9, r9, #8
 8005116:	d1f3      	bne.n	8005100 <_malloc_r+0x18c>
 8005118:	0798      	lsls	r0, r3, #30
 800511a:	f040 80e1 	bne.w	80052e0 <_malloc_r+0x36c>
 800511e:	6873      	ldr	r3, [r6, #4]
 8005120:	ea23 0302 	bic.w	r3, r3, r2
 8005124:	6073      	str	r3, [r6, #4]
 8005126:	6870      	ldr	r0, [r6, #4]
 8005128:	0052      	lsls	r2, r2, #1
 800512a:	4290      	cmp	r0, r2
 800512c:	d302      	bcc.n	8005134 <_malloc_r+0x1c0>
 800512e:	2a00      	cmp	r2, #0
 8005130:	f040 80e2 	bne.w	80052f8 <_malloc_r+0x384>
 8005134:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8005138:	f8da 3004 	ldr.w	r3, [sl, #4]
 800513c:	f023 0903 	bic.w	r9, r3, #3
 8005140:	45b9      	cmp	r9, r7
 8005142:	d304      	bcc.n	800514e <_malloc_r+0x1da>
 8005144:	eba9 0207 	sub.w	r2, r9, r7
 8005148:	2a0f      	cmp	r2, #15
 800514a:	f300 8140 	bgt.w	80053ce <_malloc_r+0x45a>
 800514e:	4b45      	ldr	r3, [pc, #276]	; (8005264 <_malloc_r+0x2f0>)
 8005150:	2008      	movs	r0, #8
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	eb0a 0b09 	add.w	fp, sl, r9
 8005158:	3110      	adds	r1, #16
 800515a:	4439      	add	r1, r7
 800515c:	9101      	str	r1, [sp, #4]
 800515e:	f001 fc5f 	bl	8006a20 <sysconf>
 8005162:	4a41      	ldr	r2, [pc, #260]	; (8005268 <_malloc_r+0x2f4>)
 8005164:	9901      	ldr	r1, [sp, #4]
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	4680      	mov	r8, r0
 800516a:	3301      	adds	r3, #1
 800516c:	bf1f      	itttt	ne
 800516e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8005172:	1809      	addne	r1, r1, r0
 8005174:	4243      	negne	r3, r0
 8005176:	4019      	andne	r1, r3
 8005178:	4628      	mov	r0, r5
 800517a:	9101      	str	r1, [sp, #4]
 800517c:	f001 fc2c 	bl	80069d8 <_sbrk_r>
 8005180:	1c42      	adds	r2, r0, #1
 8005182:	4604      	mov	r4, r0
 8005184:	f000 80f6 	beq.w	8005374 <_malloc_r+0x400>
 8005188:	4583      	cmp	fp, r0
 800518a:	9901      	ldr	r1, [sp, #4]
 800518c:	4a36      	ldr	r2, [pc, #216]	; (8005268 <_malloc_r+0x2f4>)
 800518e:	d902      	bls.n	8005196 <_malloc_r+0x222>
 8005190:	45b2      	cmp	sl, r6
 8005192:	f040 80ef 	bne.w	8005374 <_malloc_r+0x400>
 8005196:	4b35      	ldr	r3, [pc, #212]	; (800526c <_malloc_r+0x2f8>)
 8005198:	45a3      	cmp	fp, r4
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	f108 3cff 	add.w	ip, r8, #4294967295
 80051a0:	4408      	add	r0, r1
 80051a2:	6018      	str	r0, [r3, #0]
 80051a4:	f040 80aa 	bne.w	80052fc <_malloc_r+0x388>
 80051a8:	ea1b 0f0c 	tst.w	fp, ip
 80051ac:	f040 80a6 	bne.w	80052fc <_malloc_r+0x388>
 80051b0:	68b2      	ldr	r2, [r6, #8]
 80051b2:	4449      	add	r1, r9
 80051b4:	f041 0101 	orr.w	r1, r1, #1
 80051b8:	6051      	str	r1, [r2, #4]
 80051ba:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <_malloc_r+0x2fc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6811      	ldr	r1, [r2, #0]
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf88      	it	hi
 80051c4:	6013      	strhi	r3, [r2, #0]
 80051c6:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <_malloc_r+0x300>)
 80051c8:	6811      	ldr	r1, [r2, #0]
 80051ca:	428b      	cmp	r3, r1
 80051cc:	bf88      	it	hi
 80051ce:	6013      	strhi	r3, [r2, #0]
 80051d0:	e0d0      	b.n	8005374 <_malloc_r+0x400>
 80051d2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80051d6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80051da:	d218      	bcs.n	800520e <_malloc_r+0x29a>
 80051dc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80051e0:	3238      	adds	r2, #56	; 0x38
 80051e2:	f102 0e01 	add.w	lr, r2, #1
 80051e6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80051ea:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80051ee:	45f0      	cmp	r8, lr
 80051f0:	d12b      	bne.n	800524a <_malloc_r+0x2d6>
 80051f2:	f04f 0c01 	mov.w	ip, #1
 80051f6:	1092      	asrs	r2, r2, #2
 80051f8:	fa0c f202 	lsl.w	r2, ip, r2
 80051fc:	4302      	orrs	r2, r0
 80051fe:	6072      	str	r2, [r6, #4]
 8005200:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8005204:	f8c8 4008 	str.w	r4, [r8, #8]
 8005208:	f8ce 400c 	str.w	r4, [lr, #12]
 800520c:	e765      	b.n	80050da <_malloc_r+0x166>
 800520e:	2a14      	cmp	r2, #20
 8005210:	d801      	bhi.n	8005216 <_malloc_r+0x2a2>
 8005212:	325b      	adds	r2, #91	; 0x5b
 8005214:	e7e5      	b.n	80051e2 <_malloc_r+0x26e>
 8005216:	2a54      	cmp	r2, #84	; 0x54
 8005218:	d803      	bhi.n	8005222 <_malloc_r+0x2ae>
 800521a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800521e:	326e      	adds	r2, #110	; 0x6e
 8005220:	e7df      	b.n	80051e2 <_malloc_r+0x26e>
 8005222:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005226:	d803      	bhi.n	8005230 <_malloc_r+0x2bc>
 8005228:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800522c:	3277      	adds	r2, #119	; 0x77
 800522e:	e7d8      	b.n	80051e2 <_malloc_r+0x26e>
 8005230:	f240 5e54 	movw	lr, #1364	; 0x554
 8005234:	4572      	cmp	r2, lr
 8005236:	bf96      	itet	ls
 8005238:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800523c:	227e      	movhi	r2, #126	; 0x7e
 800523e:	327c      	addls	r2, #124	; 0x7c
 8005240:	e7cf      	b.n	80051e2 <_malloc_r+0x26e>
 8005242:	f8de e008 	ldr.w	lr, [lr, #8]
 8005246:	45f0      	cmp	r8, lr
 8005248:	d005      	beq.n	8005256 <_malloc_r+0x2e2>
 800524a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800524e:	f022 0203 	bic.w	r2, r2, #3
 8005252:	4562      	cmp	r2, ip
 8005254:	d8f5      	bhi.n	8005242 <_malloc_r+0x2ce>
 8005256:	f8de 800c 	ldr.w	r8, [lr, #12]
 800525a:	e7d1      	b.n	8005200 <_malloc_r+0x28c>
 800525c:	20000148 	.word	0x20000148
 8005260:	20000150 	.word	0x20000150
 8005264:	20000c64 	.word	0x20000c64
 8005268:	20000550 	.word	0x20000550
 800526c:	20000c34 	.word	0x20000c34
 8005270:	20000c5c 	.word	0x20000c5c
 8005274:	20000c60 	.word	0x20000c60
 8005278:	6860      	ldr	r0, [r4, #4]
 800527a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800527e:	f020 0003 	bic.w	r0, r0, #3
 8005282:	eba0 0a07 	sub.w	sl, r0, r7
 8005286:	f1ba 0f0f 	cmp.w	sl, #15
 800528a:	dd12      	ble.n	80052b2 <_malloc_r+0x33e>
 800528c:	68a3      	ldr	r3, [r4, #8]
 800528e:	19e2      	adds	r2, r4, r7
 8005290:	f047 0701 	orr.w	r7, r7, #1
 8005294:	6067      	str	r7, [r4, #4]
 8005296:	f8c3 c00c 	str.w	ip, [r3, #12]
 800529a:	f8cc 3008 	str.w	r3, [ip, #8]
 800529e:	f04a 0301 	orr.w	r3, sl, #1
 80052a2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80052a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80052aa:	6053      	str	r3, [r2, #4]
 80052ac:	f844 a000 	str.w	sl, [r4, r0]
 80052b0:	e691      	b.n	8004fd6 <_malloc_r+0x62>
 80052b2:	f1ba 0f00 	cmp.w	sl, #0
 80052b6:	db11      	blt.n	80052dc <_malloc_r+0x368>
 80052b8:	4420      	add	r0, r4
 80052ba:	6843      	ldr	r3, [r0, #4]
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	6043      	str	r3, [r0, #4]
 80052c2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80052c6:	4628      	mov	r0, r5
 80052c8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80052cc:	f8cc 3008 	str.w	r3, [ip, #8]
 80052d0:	f000 f890 	bl	80053f4 <__malloc_unlock>
 80052d4:	4620      	mov	r0, r4
 80052d6:	b003      	add	sp, #12
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	4664      	mov	r4, ip
 80052de:	e711      	b.n	8005104 <_malloc_r+0x190>
 80052e0:	f858 0908 	ldr.w	r0, [r8], #-8
 80052e4:	3b01      	subs	r3, #1
 80052e6:	4540      	cmp	r0, r8
 80052e8:	f43f af16 	beq.w	8005118 <_malloc_r+0x1a4>
 80052ec:	e71b      	b.n	8005126 <_malloc_r+0x1b2>
 80052ee:	3304      	adds	r3, #4
 80052f0:	0052      	lsls	r2, r2, #1
 80052f2:	4210      	tst	r0, r2
 80052f4:	d0fb      	beq.n	80052ee <_malloc_r+0x37a>
 80052f6:	e6ff      	b.n	80050f8 <_malloc_r+0x184>
 80052f8:	4673      	mov	r3, lr
 80052fa:	e7fa      	b.n	80052f2 <_malloc_r+0x37e>
 80052fc:	f8d2 e000 	ldr.w	lr, [r2]
 8005300:	f1be 3fff 	cmp.w	lr, #4294967295
 8005304:	bf1b      	ittet	ne
 8005306:	eba4 0b0b 	subne.w	fp, r4, fp
 800530a:	eb0b 0200 	addne.w	r2, fp, r0
 800530e:	6014      	streq	r4, [r2, #0]
 8005310:	601a      	strne	r2, [r3, #0]
 8005312:	f014 0b07 	ands.w	fp, r4, #7
 8005316:	bf0e      	itee	eq
 8005318:	4658      	moveq	r0, fp
 800531a:	f1cb 0008 	rsbne	r0, fp, #8
 800531e:	1824      	addne	r4, r4, r0
 8005320:	1862      	adds	r2, r4, r1
 8005322:	ea02 010c 	and.w	r1, r2, ip
 8005326:	4480      	add	r8, r0
 8005328:	eba8 0801 	sub.w	r8, r8, r1
 800532c:	ea08 080c 	and.w	r8, r8, ip
 8005330:	4641      	mov	r1, r8
 8005332:	4628      	mov	r0, r5
 8005334:	9201      	str	r2, [sp, #4]
 8005336:	f001 fb4f 	bl	80069d8 <_sbrk_r>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	9a01      	ldr	r2, [sp, #4]
 800533e:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <_malloc_r+0x470>)
 8005340:	d107      	bne.n	8005352 <_malloc_r+0x3de>
 8005342:	f1bb 0f00 	cmp.w	fp, #0
 8005346:	d023      	beq.n	8005390 <_malloc_r+0x41c>
 8005348:	f04f 0800 	mov.w	r8, #0
 800534c:	f1ab 0008 	sub.w	r0, fp, #8
 8005350:	4410      	add	r0, r2
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	1b00      	subs	r0, r0, r4
 8005356:	4440      	add	r0, r8
 8005358:	4442      	add	r2, r8
 800535a:	f040 0001 	orr.w	r0, r0, #1
 800535e:	45b2      	cmp	sl, r6
 8005360:	60b4      	str	r4, [r6, #8]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	6060      	str	r0, [r4, #4]
 8005366:	f43f af28 	beq.w	80051ba <_malloc_r+0x246>
 800536a:	f1b9 0f0f 	cmp.w	r9, #15
 800536e:	d812      	bhi.n	8005396 <_malloc_r+0x422>
 8005370:	2301      	movs	r3, #1
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	68b3      	ldr	r3, [r6, #8]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	42bb      	cmp	r3, r7
 800537e:	eba3 0207 	sub.w	r2, r3, r7
 8005382:	d301      	bcc.n	8005388 <_malloc_r+0x414>
 8005384:	2a0f      	cmp	r2, #15
 8005386:	dc22      	bgt.n	80053ce <_malloc_r+0x45a>
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f833 	bl	80053f4 <__malloc_unlock>
 800538e:	e5fd      	b.n	8004f8c <_malloc_r+0x18>
 8005390:	4610      	mov	r0, r2
 8005392:	46d8      	mov	r8, fp
 8005394:	e7dd      	b.n	8005352 <_malloc_r+0x3de>
 8005396:	2105      	movs	r1, #5
 8005398:	f8da 2004 	ldr.w	r2, [sl, #4]
 800539c:	f1a9 090c 	sub.w	r9, r9, #12
 80053a0:	f029 0907 	bic.w	r9, r9, #7
 80053a4:	f002 0201 	and.w	r2, r2, #1
 80053a8:	ea42 0209 	orr.w	r2, r2, r9
 80053ac:	f8ca 2004 	str.w	r2, [sl, #4]
 80053b0:	f1b9 0f0f 	cmp.w	r9, #15
 80053b4:	eb0a 0209 	add.w	r2, sl, r9
 80053b8:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80053bc:	f67f aefd 	bls.w	80051ba <_malloc_r+0x246>
 80053c0:	4628      	mov	r0, r5
 80053c2:	f10a 0108 	add.w	r1, sl, #8
 80053c6:	f7ff fd15 	bl	8004df4 <_free_r>
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <_malloc_r+0x470>)
 80053cc:	e6f5      	b.n	80051ba <_malloc_r+0x246>
 80053ce:	68b4      	ldr	r4, [r6, #8]
 80053d0:	f047 0301 	orr.w	r3, r7, #1
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	4427      	add	r7, r4
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	60b7      	str	r7, [r6, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	e5f9      	b.n	8004fd6 <_malloc_r+0x62>
 80053e2:	bf00      	nop
 80053e4:	20000c34 	.word	0x20000c34

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff bc9d 	b.w	8004d28 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	20000c2d 	.word	0x20000c2d

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff bc98 	b.w	8004d2a <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	20000c2d 	.word	0x20000c2d

08005400 <_svfprintf_r>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b0d3      	sub	sp, #332	; 0x14c
 8005406:	468a      	mov	sl, r1
 8005408:	4693      	mov	fp, r2
 800540a:	461d      	mov	r5, r3
 800540c:	4681      	mov	r9, r0
 800540e:	f001 fadf 	bl	80069d0 <_localeconv_r>
 8005412:	6803      	ldr	r3, [r0, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	9317      	str	r3, [sp, #92]	; 0x5c
 8005418:	f7fa fe9a 	bl	8000150 <strlen>
 800541c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005420:	9012      	str	r0, [sp, #72]	; 0x48
 8005422:	0618      	lsls	r0, r3, #24
 8005424:	d518      	bpl.n	8005458 <_svfprintf_r+0x58>
 8005426:	f8da 3010 	ldr.w	r3, [sl, #16]
 800542a:	b9ab      	cbnz	r3, 8005458 <_svfprintf_r+0x58>
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	4648      	mov	r0, r9
 8005430:	f7ff fda0 	bl	8004f74 <_malloc_r>
 8005434:	f8ca 0000 	str.w	r0, [sl]
 8005438:	f8ca 0010 	str.w	r0, [sl, #16]
 800543c:	b948      	cbnz	r0, 8005452 <_svfprintf_r+0x52>
 800543e:	230c      	movs	r3, #12
 8005440:	f8c9 3000 	str.w	r3, [r9]
 8005444:	f04f 33ff 	mov.w	r3, #4294967295
 8005448:	930f      	str	r3, [sp, #60]	; 0x3c
 800544a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800544c:	b053      	add	sp, #332	; 0x14c
 800544e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	f8ca 3014 	str.w	r3, [sl, #20]
 8005458:	2300      	movs	r3, #0
 800545a:	2200      	movs	r2, #0
 800545c:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8005460:	9309      	str	r3, [sp, #36]	; 0x24
 8005462:	2300      	movs	r3, #0
 8005464:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005468:	2300      	movs	r3, #0
 800546a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 800546e:	ac29      	add	r4, sp, #164	; 0xa4
 8005470:	9426      	str	r4, [sp, #152]	; 0x98
 8005472:	930d      	str	r3, [sp, #52]	; 0x34
 8005474:	9315      	str	r3, [sp, #84]	; 0x54
 8005476:	9318      	str	r3, [sp, #96]	; 0x60
 8005478:	930f      	str	r3, [sp, #60]	; 0x3c
 800547a:	465b      	mov	r3, fp
 800547c:	461e      	mov	r6, r3
 800547e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005482:	b10a      	cbz	r2, 8005488 <_svfprintf_r+0x88>
 8005484:	2a25      	cmp	r2, #37	; 0x25
 8005486:	d1f9      	bne.n	800547c <_svfprintf_r+0x7c>
 8005488:	ebb6 070b 	subs.w	r7, r6, fp
 800548c:	d00d      	beq.n	80054aa <_svfprintf_r+0xaa>
 800548e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005490:	e9c4 b700 	strd	fp, r7, [r4]
 8005494:	443b      	add	r3, r7
 8005496:	9328      	str	r3, [sp, #160]	; 0xa0
 8005498:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800549a:	3301      	adds	r3, #1
 800549c:	2b07      	cmp	r3, #7
 800549e:	9327      	str	r3, [sp, #156]	; 0x9c
 80054a0:	dc79      	bgt.n	8005596 <_svfprintf_r+0x196>
 80054a2:	3408      	adds	r4, #8
 80054a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054a6:	443b      	add	r3, r7
 80054a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054aa:	7833      	ldrb	r3, [r6, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f001 8133 	beq.w	8006718 <_svfprintf_r+0x1318>
 80054b2:	2300      	movs	r3, #0
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	4698      	mov	r8, r3
 80054ba:	270a      	movs	r7, #10
 80054bc:	212b      	movs	r1, #43	; 0x2b
 80054be:	3601      	adds	r6, #1
 80054c0:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80054c4:	9207      	str	r2, [sp, #28]
 80054c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80054c8:	4633      	mov	r3, r6
 80054ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80054d0:	930e      	str	r3, [sp, #56]	; 0x38
 80054d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d4:	3b20      	subs	r3, #32
 80054d6:	2b5a      	cmp	r3, #90	; 0x5a
 80054d8:	f200 85a6 	bhi.w	8006028 <_svfprintf_r+0xc28>
 80054dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054e0:	05a4007e 	.word	0x05a4007e
 80054e4:	008605a4 	.word	0x008605a4
 80054e8:	05a405a4 	.word	0x05a405a4
 80054ec:	006505a4 	.word	0x006505a4
 80054f0:	05a405a4 	.word	0x05a405a4
 80054f4:	00930089 	.word	0x00930089
 80054f8:	009005a4 	.word	0x009005a4
 80054fc:	05a40096 	.word	0x05a40096
 8005500:	00b500b2 	.word	0x00b500b2
 8005504:	00b500b5 	.word	0x00b500b5
 8005508:	00b500b5 	.word	0x00b500b5
 800550c:	00b500b5 	.word	0x00b500b5
 8005510:	00b500b5 	.word	0x00b500b5
 8005514:	05a405a4 	.word	0x05a405a4
 8005518:	05a405a4 	.word	0x05a405a4
 800551c:	05a405a4 	.word	0x05a405a4
 8005520:	012405a4 	.word	0x012405a4
 8005524:	00e205a4 	.word	0x00e205a4
 8005528:	012400f5 	.word	0x012400f5
 800552c:	01240124 	.word	0x01240124
 8005530:	05a405a4 	.word	0x05a405a4
 8005534:	05a405a4 	.word	0x05a405a4
 8005538:	05a400c5 	.word	0x05a400c5
 800553c:	048305a4 	.word	0x048305a4
 8005540:	05a405a4 	.word	0x05a405a4
 8005544:	04cd05a4 	.word	0x04cd05a4
 8005548:	04ee05a4 	.word	0x04ee05a4
 800554c:	05a405a4 	.word	0x05a405a4
 8005550:	05a40510 	.word	0x05a40510
 8005554:	05a405a4 	.word	0x05a405a4
 8005558:	05a405a4 	.word	0x05a405a4
 800555c:	05a405a4 	.word	0x05a405a4
 8005560:	012405a4 	.word	0x012405a4
 8005564:	00e205a4 	.word	0x00e205a4
 8005568:	012400f7 	.word	0x012400f7
 800556c:	01240124 	.word	0x01240124
 8005570:	00f700c8 	.word	0x00f700c8
 8005574:	05a400dc 	.word	0x05a400dc
 8005578:	05a400d5 	.word	0x05a400d5
 800557c:	0485045e 	.word	0x0485045e
 8005580:	00dc04bc 	.word	0x00dc04bc
 8005584:	04cd05a4 	.word	0x04cd05a4
 8005588:	04f0007c 	.word	0x04f0007c
 800558c:	05a405a4 	.word	0x05a405a4
 8005590:	05a4052f 	.word	0x05a4052f
 8005594:	007c      	.short	0x007c
 8005596:	4651      	mov	r1, sl
 8005598:	4648      	mov	r0, r9
 800559a:	aa26      	add	r2, sp, #152	; 0x98
 800559c:	f002 fc4a 	bl	8007e34 <__ssprint_r>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f040 812d 	bne.w	8005800 <_svfprintf_r+0x400>
 80055a6:	ac29      	add	r4, sp, #164	; 0xa4
 80055a8:	e77c      	b.n	80054a4 <_svfprintf_r+0xa4>
 80055aa:	4648      	mov	r0, r9
 80055ac:	f001 fa10 	bl	80069d0 <_localeconv_r>
 80055b0:	6843      	ldr	r3, [r0, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	9318      	str	r3, [sp, #96]	; 0x60
 80055b6:	f7fa fdcb 	bl	8000150 <strlen>
 80055ba:	9015      	str	r0, [sp, #84]	; 0x54
 80055bc:	4648      	mov	r0, r9
 80055be:	f001 fa07 	bl	80069d0 <_localeconv_r>
 80055c2:	6883      	ldr	r3, [r0, #8]
 80055c4:	212b      	movs	r1, #43	; 0x2b
 80055c6:	930d      	str	r3, [sp, #52]	; 0x34
 80055c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055ca:	b12b      	cbz	r3, 80055d8 <_svfprintf_r+0x1d8>
 80055cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ce:	b11b      	cbz	r3, 80055d8 <_svfprintf_r+0x1d8>
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b10b      	cbz	r3, 80055d8 <_svfprintf_r+0x1d8>
 80055d4:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80055d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055da:	e775      	b.n	80054c8 <_svfprintf_r+0xc8>
 80055dc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f9      	bne.n	80055d8 <_svfprintf_r+0x1d8>
 80055e4:	2320      	movs	r3, #32
 80055e6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80055ea:	e7f5      	b.n	80055d8 <_svfprintf_r+0x1d8>
 80055ec:	f048 0801 	orr.w	r8, r8, #1
 80055f0:	e7f2      	b.n	80055d8 <_svfprintf_r+0x1d8>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80055fa:	daed      	bge.n	80055d8 <_svfprintf_r+0x1d8>
 80055fc:	425b      	negs	r3, r3
 80055fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8005600:	f048 0804 	orr.w	r8, r8, #4
 8005604:	e7e8      	b.n	80055d8 <_svfprintf_r+0x1d8>
 8005606:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 800560a:	e7e5      	b.n	80055d8 <_svfprintf_r+0x1d8>
 800560c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800560e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005612:	2a2a      	cmp	r2, #42	; 0x2a
 8005614:	920b      	str	r2, [sp, #44]	; 0x2c
 8005616:	d112      	bne.n	800563e <_svfprintf_r+0x23e>
 8005618:	f855 2b04 	ldr.w	r2, [r5], #4
 800561c:	930e      	str	r3, [sp, #56]	; 0x38
 800561e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8005622:	9207      	str	r2, [sp, #28]
 8005624:	e7d8      	b.n	80055d8 <_svfprintf_r+0x1d8>
 8005626:	9807      	ldr	r0, [sp, #28]
 8005628:	fb07 2200 	mla	r2, r7, r0, r2
 800562c:	9207      	str	r2, [sp, #28]
 800562e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005632:	920b      	str	r2, [sp, #44]	; 0x2c
 8005634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005636:	3a30      	subs	r2, #48	; 0x30
 8005638:	2a09      	cmp	r2, #9
 800563a:	d9f4      	bls.n	8005626 <_svfprintf_r+0x226>
 800563c:	e748      	b.n	80054d0 <_svfprintf_r+0xd0>
 800563e:	2200      	movs	r2, #0
 8005640:	9207      	str	r2, [sp, #28]
 8005642:	e7f7      	b.n	8005634 <_svfprintf_r+0x234>
 8005644:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8005648:	e7c6      	b.n	80055d8 <_svfprintf_r+0x1d8>
 800564a:	2200      	movs	r2, #0
 800564c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564e:	9213      	str	r2, [sp, #76]	; 0x4c
 8005650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005652:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005654:	3a30      	subs	r2, #48	; 0x30
 8005656:	fb07 2200 	mla	r2, r7, r0, r2
 800565a:	9213      	str	r2, [sp, #76]	; 0x4c
 800565c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005660:	920b      	str	r2, [sp, #44]	; 0x2c
 8005662:	3a30      	subs	r2, #48	; 0x30
 8005664:	2a09      	cmp	r2, #9
 8005666:	d9f3      	bls.n	8005650 <_svfprintf_r+0x250>
 8005668:	e732      	b.n	80054d0 <_svfprintf_r+0xd0>
 800566a:	f048 0808 	orr.w	r8, r8, #8
 800566e:	e7b3      	b.n	80055d8 <_svfprintf_r+0x1d8>
 8005670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b68      	cmp	r3, #104	; 0x68
 8005676:	bf01      	itttt	eq
 8005678:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 800567a:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800567e:	3301      	addeq	r3, #1
 8005680:	930e      	streq	r3, [sp, #56]	; 0x38
 8005682:	bf18      	it	ne
 8005684:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8005688:	e7a6      	b.n	80055d8 <_svfprintf_r+0x1d8>
 800568a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b6c      	cmp	r3, #108	; 0x6c
 8005690:	d105      	bne.n	800569e <_svfprintf_r+0x29e>
 8005692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005694:	3301      	adds	r3, #1
 8005696:	930e      	str	r3, [sp, #56]	; 0x38
 8005698:	f048 0820 	orr.w	r8, r8, #32
 800569c:	e79c      	b.n	80055d8 <_svfprintf_r+0x1d8>
 800569e:	f048 0810 	orr.w	r8, r8, #16
 80056a2:	e799      	b.n	80055d8 <_svfprintf_r+0x1d8>
 80056a4:	462a      	mov	r2, r5
 80056a6:	f852 3b04 	ldr.w	r3, [r2], #4
 80056aa:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80056ae:	2300      	movs	r3, #0
 80056b0:	920a      	str	r2, [sp, #40]	; 0x28
 80056b2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80056b6:	2700      	movs	r7, #0
 80056b8:	9308      	str	r3, [sp, #32]
 80056ba:	2301      	movs	r3, #1
 80056bc:	463e      	mov	r6, r7
 80056be:	463d      	mov	r5, r7
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	970c      	str	r7, [sp, #48]	; 0x30
 80056c4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80056c8:	e1b0      	b.n	8005a2c <_svfprintf_r+0x62c>
 80056ca:	f048 0810 	orr.w	r8, r8, #16
 80056ce:	f018 0f20 	tst.w	r8, #32
 80056d2:	d011      	beq.n	80056f8 <_svfprintf_r+0x2f8>
 80056d4:	3507      	adds	r5, #7
 80056d6:	f025 0307 	bic.w	r3, r5, #7
 80056da:	461a      	mov	r2, r3
 80056dc:	f852 5b08 	ldr.w	r5, [r2], #8
 80056e0:	685e      	ldr	r6, [r3, #4]
 80056e2:	920a      	str	r2, [sp, #40]	; 0x28
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	da05      	bge.n	80056f4 <_svfprintf_r+0x2f4>
 80056e8:	232d      	movs	r3, #45	; 0x2d
 80056ea:	426d      	negs	r5, r5
 80056ec:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 80056f0:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80056f4:	2301      	movs	r3, #1
 80056f6:	e389      	b.n	8005e0c <_svfprintf_r+0xa0c>
 80056f8:	462b      	mov	r3, r5
 80056fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80056fe:	f018 0f10 	tst.w	r8, #16
 8005702:	930a      	str	r3, [sp, #40]	; 0x28
 8005704:	d002      	beq.n	800570c <_svfprintf_r+0x30c>
 8005706:	4635      	mov	r5, r6
 8005708:	17f6      	asrs	r6, r6, #31
 800570a:	e7eb      	b.n	80056e4 <_svfprintf_r+0x2e4>
 800570c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005710:	d003      	beq.n	800571a <_svfprintf_r+0x31a>
 8005712:	b235      	sxth	r5, r6
 8005714:	f346 36c0 	sbfx	r6, r6, #15, #1
 8005718:	e7e4      	b.n	80056e4 <_svfprintf_r+0x2e4>
 800571a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800571e:	d0f2      	beq.n	8005706 <_svfprintf_r+0x306>
 8005720:	b275      	sxtb	r5, r6
 8005722:	f346 16c0 	sbfx	r6, r6, #7, #1
 8005726:	e7dd      	b.n	80056e4 <_svfprintf_r+0x2e4>
 8005728:	3507      	adds	r5, #7
 800572a:	f025 0307 	bic.w	r3, r5, #7
 800572e:	4619      	mov	r1, r3
 8005730:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005734:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005738:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800573c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005740:	910a      	str	r1, [sp, #40]	; 0x28
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	4630      	mov	r0, r6
 8005748:	4629      	mov	r1, r5
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <_svfprintf_r+0x434>)
 800574c:	f7fb f95e 	bl	8000a0c <__aeabi_dcmpun>
 8005750:	bb18      	cbnz	r0, 800579a <_svfprintf_r+0x39a>
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	4630      	mov	r0, r6
 8005758:	4629      	mov	r1, r5
 800575a:	4b36      	ldr	r3, [pc, #216]	; (8005834 <_svfprintf_r+0x434>)
 800575c:	f7fb f938 	bl	80009d0 <__aeabi_dcmple>
 8005760:	b9d8      	cbnz	r0, 800579a <_svfprintf_r+0x39a>
 8005762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005766:	2200      	movs	r2, #0
 8005768:	2300      	movs	r3, #0
 800576a:	f7fb f927 	bl	80009bc <__aeabi_dcmplt>
 800576e:	b110      	cbz	r0, 8005776 <_svfprintf_r+0x376>
 8005770:	232d      	movs	r3, #45	; 0x2d
 8005772:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005776:	4a30      	ldr	r2, [pc, #192]	; (8005838 <_svfprintf_r+0x438>)
 8005778:	4b30      	ldr	r3, [pc, #192]	; (800583c <_svfprintf_r+0x43c>)
 800577a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800577c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8005780:	2947      	cmp	r1, #71	; 0x47
 8005782:	bfd4      	ite	le
 8005784:	4693      	movle	fp, r2
 8005786:	469b      	movgt	fp, r3
 8005788:	2303      	movs	r3, #3
 800578a:	2100      	movs	r1, #0
 800578c:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8005790:	2700      	movs	r7, #0
 8005792:	463e      	mov	r6, r7
 8005794:	463b      	mov	r3, r7
 8005796:	f000 bff9 	b.w	800678c <_svfprintf_r+0x138c>
 800579a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7fb f933 	bl	8000a0c <__aeabi_dcmpun>
 80057a6:	b140      	cbz	r0, 80057ba <_svfprintf_r+0x3ba>
 80057a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057aa:	4a25      	ldr	r2, [pc, #148]	; (8005840 <_svfprintf_r+0x440>)
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbc      	itt	lt
 80057b0:	232d      	movlt	r3, #45	; 0x2d
 80057b2:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <_svfprintf_r+0x444>)
 80057b8:	e7df      	b.n	800577a <_svfprintf_r+0x37a>
 80057ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057bc:	f023 0320 	bic.w	r3, r3, #32
 80057c0:	2b41      	cmp	r3, #65	; 0x41
 80057c2:	930c      	str	r3, [sp, #48]	; 0x30
 80057c4:	d125      	bne.n	8005812 <_svfprintf_r+0x412>
 80057c6:	2330      	movs	r3, #48	; 0x30
 80057c8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80057cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ce:	f048 0802 	orr.w	r8, r8, #2
 80057d2:	2b61      	cmp	r3, #97	; 0x61
 80057d4:	bf0c      	ite	eq
 80057d6:	2378      	moveq	r3, #120	; 0x78
 80057d8:	2358      	movne	r3, #88	; 0x58
 80057da:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80057de:	9b07      	ldr	r3, [sp, #28]
 80057e0:	2b63      	cmp	r3, #99	; 0x63
 80057e2:	dd31      	ble.n	8005848 <_svfprintf_r+0x448>
 80057e4:	4648      	mov	r0, r9
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	f7ff fbc4 	bl	8004f74 <_malloc_r>
 80057ec:	4683      	mov	fp, r0
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 81f8 	bne.w	8005be4 <_svfprintf_r+0x7e4>
 80057f4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80057f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fc:	f8aa 300c 	strh.w	r3, [sl, #12]
 8005800:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005804:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800580a:	bf18      	it	ne
 800580c:	f04f 33ff 	movne.w	r3, #4294967295
 8005810:	e61a      	b.n	8005448 <_svfprintf_r+0x48>
 8005812:	9b07      	ldr	r3, [sp, #28]
 8005814:	3301      	adds	r3, #1
 8005816:	f000 81e7 	beq.w	8005be8 <_svfprintf_r+0x7e8>
 800581a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800581c:	2b47      	cmp	r3, #71	; 0x47
 800581e:	f040 81e6 	bne.w	8005bee <_svfprintf_r+0x7ee>
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 81e2 	bne.w	8005bee <_svfprintf_r+0x7ee>
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	2301      	movs	r3, #1
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	e00d      	b.n	800584e <_svfprintf_r+0x44e>
 8005832:	bf00      	nop
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	080094d6 	.word	0x080094d6
 800583c:	080094da 	.word	0x080094da
 8005840:	080094de 	.word	0x080094de
 8005844:	080094e2 	.word	0x080094e2
 8005848:	9008      	str	r0, [sp, #32]
 800584a:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800584e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8005852:	9314      	str	r3, [sp, #80]	; 0x50
 8005854:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8005858:	1e1d      	subs	r5, r3, #0
 800585a:	bfae      	itee	ge
 800585c:	2300      	movge	r3, #0
 800585e:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8005862:	232d      	movlt	r3, #45	; 0x2d
 8005864:	931c      	str	r3, [sp, #112]	; 0x70
 8005866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005868:	2b41      	cmp	r3, #65	; 0x41
 800586a:	f040 81d8 	bne.w	8005c1e <_svfprintf_r+0x81e>
 800586e:	4638      	mov	r0, r7
 8005870:	aa20      	add	r2, sp, #128	; 0x80
 8005872:	4629      	mov	r1, r5
 8005874:	f001 f8ee 	bl	8006a54 <frexp>
 8005878:	2200      	movs	r2, #0
 800587a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <_svfprintf_r+0x494>
 8005890:	2301      	movs	r3, #1
 8005892:	9320      	str	r3, [sp, #128]	; 0x80
 8005894:	4bad      	ldr	r3, [pc, #692]	; (8005b4c <_svfprintf_r+0x74c>)
 8005896:	4aae      	ldr	r2, [pc, #696]	; (8005b50 <_svfprintf_r+0x750>)
 8005898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800589a:	465d      	mov	r5, fp
 800589c:	2961      	cmp	r1, #97	; 0x61
 800589e:	bf18      	it	ne
 80058a0:	461a      	movne	r2, r3
 80058a2:	9b07      	ldr	r3, [sp, #28]
 80058a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80058a6:	3b01      	subs	r3, #1
 80058a8:	9309      	str	r3, [sp, #36]	; 0x24
 80058aa:	2200      	movs	r2, #0
 80058ac:	4ba9      	ldr	r3, [pc, #676]	; (8005b54 <_svfprintf_r+0x754>)
 80058ae:	4630      	mov	r0, r6
 80058b0:	4639      	mov	r1, r7
 80058b2:	f7fa fe11 	bl	80004d8 <__aeabi_dmul>
 80058b6:	460f      	mov	r7, r1
 80058b8:	4606      	mov	r6, r0
 80058ba:	f7fb f8bd 	bl	8000a38 <__aeabi_d2iz>
 80058be:	901d      	str	r0, [sp, #116]	; 0x74
 80058c0:	f7fa fda0 	bl	8000404 <__aeabi_i2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fa fc4c 	bl	8000168 <__aeabi_dsub>
 80058d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80058d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058d4:	4606      	mov	r6, r0
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	460f      	mov	r7, r1
 80058da:	f805 3b01 	strb.w	r3, [r5], #1
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	9316      	str	r3, [sp, #88]	; 0x58
 80058e4:	d007      	beq.n	80058f6 <_svfprintf_r+0x4f6>
 80058e6:	3b01      	subs	r3, #1
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	f7fb f85b 	bl	80009a8 <__aeabi_dcmpeq>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d0d9      	beq.n	80058aa <_svfprintf_r+0x4aa>
 80058f6:	2200      	movs	r2, #0
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	4b96      	ldr	r3, [pc, #600]	; (8005b58 <_svfprintf_r+0x758>)
 80058fe:	f7fb f87b 	bl	80009f8 <__aeabi_dcmpgt>
 8005902:	b960      	cbnz	r0, 800591e <_svfprintf_r+0x51e>
 8005904:	2200      	movs	r2, #0
 8005906:	4630      	mov	r0, r6
 8005908:	4639      	mov	r1, r7
 800590a:	4b93      	ldr	r3, [pc, #588]	; (8005b58 <_svfprintf_r+0x758>)
 800590c:	f7fb f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8005910:	2800      	cmp	r0, #0
 8005912:	f000 817f 	beq.w	8005c14 <_svfprintf_r+0x814>
 8005916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005918:	07db      	lsls	r3, r3, #31
 800591a:	f140 817b 	bpl.w	8005c14 <_svfprintf_r+0x814>
 800591e:	2030      	movs	r0, #48	; 0x30
 8005920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005922:	9524      	str	r5, [sp, #144]	; 0x90
 8005924:	7bd9      	ldrb	r1, [r3, #15]
 8005926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005928:	1e53      	subs	r3, r2, #1
 800592a:	9324      	str	r3, [sp, #144]	; 0x90
 800592c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005930:	428b      	cmp	r3, r1
 8005932:	f000 815e 	beq.w	8005bf2 <_svfprintf_r+0x7f2>
 8005936:	2b39      	cmp	r3, #57	; 0x39
 8005938:	bf0b      	itete	eq
 800593a:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 800593c:	3301      	addne	r3, #1
 800593e:	7a9b      	ldrbeq	r3, [r3, #10]
 8005940:	b2db      	uxtbne	r3, r3
 8005942:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005946:	eba5 030b 	sub.w	r3, r5, fp
 800594a:	9309      	str	r3, [sp, #36]	; 0x24
 800594c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800594e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005950:	2b47      	cmp	r3, #71	; 0x47
 8005952:	f040 81b3 	bne.w	8005cbc <_svfprintf_r+0x8bc>
 8005956:	1cef      	adds	r7, r5, #3
 8005958:	db03      	blt.n	8005962 <_svfprintf_r+0x562>
 800595a:	9b07      	ldr	r3, [sp, #28]
 800595c:	42ab      	cmp	r3, r5
 800595e:	f280 81d3 	bge.w	8005d08 <_svfprintf_r+0x908>
 8005962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005964:	3b02      	subs	r3, #2
 8005966:	930b      	str	r3, [sp, #44]	; 0x2c
 8005968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800596a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800596e:	f021 0120 	bic.w	r1, r1, #32
 8005972:	2941      	cmp	r1, #65	; 0x41
 8005974:	bf08      	it	eq
 8005976:	320f      	addeq	r2, #15
 8005978:	f105 33ff 	add.w	r3, r5, #4294967295
 800597c:	bf06      	itte	eq
 800597e:	b2d2      	uxtbeq	r2, r2
 8005980:	2101      	moveq	r1, #1
 8005982:	2100      	movne	r1, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800598a:	bfb4      	ite	lt
 800598c:	222d      	movlt	r2, #45	; 0x2d
 800598e:	222b      	movge	r2, #43	; 0x2b
 8005990:	9320      	str	r3, [sp, #128]	; 0x80
 8005992:	bfb8      	it	lt
 8005994:	f1c5 0301 	rsblt	r3, r5, #1
 8005998:	2b09      	cmp	r3, #9
 800599a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800599e:	f340 81a6 	ble.w	8005cee <_svfprintf_r+0x8ee>
 80059a2:	260a      	movs	r6, #10
 80059a4:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80059a8:	fb93 f5f6 	sdiv	r5, r3, r6
 80059ac:	4602      	mov	r2, r0
 80059ae:	fb06 3115 	mls	r1, r6, r5, r3
 80059b2:	3130      	adds	r1, #48	; 0x30
 80059b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059b8:	4619      	mov	r1, r3
 80059ba:	2963      	cmp	r1, #99	; 0x63
 80059bc:	462b      	mov	r3, r5
 80059be:	f100 30ff 	add.w	r0, r0, #4294967295
 80059c2:	dcf1      	bgt.n	80059a8 <_svfprintf_r+0x5a8>
 80059c4:	3330      	adds	r3, #48	; 0x30
 80059c6:	1e91      	subs	r1, r2, #2
 80059c8:	f800 3c01 	strb.w	r3, [r0, #-1]
 80059cc:	460b      	mov	r3, r1
 80059ce:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 80059d2:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80059d6:	4283      	cmp	r3, r0
 80059d8:	f0c0 8184 	bcc.w	8005ce4 <_svfprintf_r+0x8e4>
 80059dc:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	4281      	cmp	r1, r0
 80059e4:	bf88      	it	hi
 80059e6:	2300      	movhi	r3, #0
 80059e8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80059ec:	441a      	add	r2, r3
 80059ee:	ab22      	add	r3, sp, #136	; 0x88
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f4:	9319      	str	r3, [sp, #100]	; 0x64
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	4413      	add	r3, r2
 80059fa:	9307      	str	r3, [sp, #28]
 80059fc:	dc02      	bgt.n	8005a04 <_svfprintf_r+0x604>
 80059fe:	f018 0f01 	tst.w	r8, #1
 8005a02:	d003      	beq.n	8005a0c <_svfprintf_r+0x60c>
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a08:	4413      	add	r3, r2
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	4635      	mov	r5, r6
 8005a10:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	9314      	str	r3, [sp, #80]	; 0x50
 8005a1a:	960c      	str	r6, [sp, #48]	; 0x30
 8005a1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005a1e:	b113      	cbz	r3, 8005a26 <_svfprintf_r+0x626>
 8005a20:	232d      	movs	r3, #45	; 0x2d
 8005a22:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005a26:	2700      	movs	r7, #0
 8005a28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005a2c:	9b07      	ldr	r3, [sp, #28]
 8005a2e:	42bb      	cmp	r3, r7
 8005a30:	bfb8      	it	lt
 8005a32:	463b      	movlt	r3, r7
 8005a34:	9314      	str	r3, [sp, #80]	; 0x50
 8005a36:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005a3a:	b113      	cbz	r3, 8005a42 <_svfprintf_r+0x642>
 8005a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9314      	str	r3, [sp, #80]	; 0x50
 8005a42:	f018 0302 	ands.w	r3, r8, #2
 8005a46:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a48:	bf1e      	ittt	ne
 8005a4a:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8005a4c:	3302      	addne	r3, #2
 8005a4e:	9314      	strne	r3, [sp, #80]	; 0x50
 8005a50:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8005a54:	931c      	str	r3, [sp, #112]	; 0x70
 8005a56:	d121      	bne.n	8005a9c <_svfprintf_r+0x69c>
 8005a58:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	9316      	str	r3, [sp, #88]	; 0x58
 8005a62:	dd1b      	ble.n	8005a9c <_svfprintf_r+0x69c>
 8005a64:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005a68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005a6a:	3201      	adds	r2, #1
 8005a6c:	2810      	cmp	r0, #16
 8005a6e:	483b      	ldr	r0, [pc, #236]	; (8005b5c <_svfprintf_r+0x75c>)
 8005a70:	f104 0108 	add.w	r1, r4, #8
 8005a74:	6020      	str	r0, [r4, #0]
 8005a76:	f300 82e6 	bgt.w	8006046 <_svfprintf_r+0xc46>
 8005a7a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005a7c:	2a07      	cmp	r2, #7
 8005a7e:	4403      	add	r3, r0
 8005a80:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005a84:	6060      	str	r0, [r4, #4]
 8005a86:	f340 82f3 	ble.w	8006070 <_svfprintf_r+0xc70>
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	4648      	mov	r0, r9
 8005a8e:	aa26      	add	r2, sp, #152	; 0x98
 8005a90:	f002 f9d0 	bl	8007e34 <__ssprint_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f040 861d 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8005a9a:	ac29      	add	r4, sp, #164	; 0xa4
 8005a9c:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8005aa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005aa2:	b16a      	cbz	r2, 8005ac0 <_svfprintf_r+0x6c0>
 8005aa4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4413      	add	r3, r2
 8005aae:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ab0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005ab2:	6062      	str	r2, [r4, #4]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	2b07      	cmp	r3, #7
 8005ab8:	9327      	str	r3, [sp, #156]	; 0x9c
 8005aba:	f300 82db 	bgt.w	8006074 <_svfprintf_r+0xc74>
 8005abe:	3408      	adds	r4, #8
 8005ac0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ac4:	b162      	cbz	r2, 8005ae0 <_svfprintf_r+0x6e0>
 8005ac6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ac8:	6022      	str	r2, [r4, #0]
 8005aca:	2202      	movs	r2, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ad0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005ad2:	6062      	str	r2, [r4, #4]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	2b07      	cmp	r3, #7
 8005ad8:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ada:	f300 82d5 	bgt.w	8006088 <_svfprintf_r+0xc88>
 8005ade:	3408      	adds	r4, #8
 8005ae0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d121      	bne.n	8005b2a <_svfprintf_r+0x72a>
 8005ae6:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	9316      	str	r3, [sp, #88]	; 0x58
 8005af0:	dd1b      	ble.n	8005b2a <_svfprintf_r+0x72a>
 8005af2:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005af6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005af8:	3201      	adds	r2, #1
 8005afa:	2810      	cmp	r0, #16
 8005afc:	4818      	ldr	r0, [pc, #96]	; (8005b60 <_svfprintf_r+0x760>)
 8005afe:	f104 0108 	add.w	r1, r4, #8
 8005b02:	6020      	str	r0, [r4, #0]
 8005b04:	f300 82ca 	bgt.w	800609c <_svfprintf_r+0xc9c>
 8005b08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005b0a:	2a07      	cmp	r2, #7
 8005b0c:	4403      	add	r3, r0
 8005b0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b12:	6060      	str	r0, [r4, #4]
 8005b14:	f340 82d7 	ble.w	80060c6 <_svfprintf_r+0xcc6>
 8005b18:	4651      	mov	r1, sl
 8005b1a:	4648      	mov	r0, r9
 8005b1c:	aa26      	add	r2, sp, #152	; 0x98
 8005b1e:	f002 f989 	bl	8007e34 <__ssprint_r>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f040 85d6 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8005b28:	ac29      	add	r4, sp, #164	; 0xa4
 8005b2a:	9b07      	ldr	r3, [sp, #28]
 8005b2c:	1aff      	subs	r7, r7, r3
 8005b2e:	2f00      	cmp	r7, #0
 8005b30:	dd28      	ble.n	8005b84 <_svfprintf_r+0x784>
 8005b32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005b36:	480a      	ldr	r0, [pc, #40]	; (8005b60 <_svfprintf_r+0x760>)
 8005b38:	2f10      	cmp	r7, #16
 8005b3a:	f103 0301 	add.w	r3, r3, #1
 8005b3e:	f104 0108 	add.w	r1, r4, #8
 8005b42:	6020      	str	r0, [r4, #0]
 8005b44:	f300 82c1 	bgt.w	80060ca <_svfprintf_r+0xcca>
 8005b48:	e00c      	b.n	8005b64 <_svfprintf_r+0x764>
 8005b4a:	bf00      	nop
 8005b4c:	080094f7 	.word	0x080094f7
 8005b50:	080094e6 	.word	0x080094e6
 8005b54:	40300000 	.word	0x40300000
 8005b58:	3fe00000 	.word	0x3fe00000
 8005b5c:	0800950a 	.word	0x0800950a
 8005b60:	0800951a 	.word	0x0800951a
 8005b64:	6067      	str	r7, [r4, #4]
 8005b66:	2b07      	cmp	r3, #7
 8005b68:	4417      	add	r7, r2
 8005b6a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8005b6e:	f340 82bf 	ble.w	80060f0 <_svfprintf_r+0xcf0>
 8005b72:	4651      	mov	r1, sl
 8005b74:	4648      	mov	r0, r9
 8005b76:	aa26      	add	r2, sp, #152	; 0x98
 8005b78:	f002 f95c 	bl	8007e34 <__ssprint_r>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f040 85a9 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8005b82:	ac29      	add	r4, sp, #164	; 0xa4
 8005b84:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005b88:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005b8a:	f040 82b7 	bne.w	80060fc <_svfprintf_r+0xcfc>
 8005b8e:	9b07      	ldr	r3, [sp, #28]
 8005b90:	f8c4 b000 	str.w	fp, [r4]
 8005b94:	441f      	add	r7, r3
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	9728      	str	r7, [sp, #160]	; 0xa0
 8005b9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	2b07      	cmp	r3, #7
 8005ba0:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ba2:	f300 82f0 	bgt.w	8006186 <_svfprintf_r+0xd86>
 8005ba6:	3408      	adds	r4, #8
 8005ba8:	f018 0f04 	tst.w	r8, #4
 8005bac:	f040 8574 	bne.w	8006698 <_svfprintf_r+0x1298>
 8005bb0:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8005bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bb6:	428a      	cmp	r2, r1
 8005bb8:	bfac      	ite	ge
 8005bba:	189b      	addge	r3, r3, r2
 8005bbc:	185b      	addlt	r3, r3, r1
 8005bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005bc2:	b13b      	cbz	r3, 8005bd4 <_svfprintf_r+0x7d4>
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	4648      	mov	r0, r9
 8005bc8:	aa26      	add	r2, sp, #152	; 0x98
 8005bca:	f002 f933 	bl	8007e34 <__ssprint_r>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f040 8580 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9327      	str	r3, [sp, #156]	; 0x9c
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f040 8596 	bne.w	800670c <_svfprintf_r+0x130c>
 8005be0:	ac29      	add	r4, sp, #164	; 0xa4
 8005be2:	e0e6      	b.n	8005db2 <_svfprintf_r+0x9b2>
 8005be4:	9008      	str	r0, [sp, #32]
 8005be6:	e632      	b.n	800584e <_svfprintf_r+0x44e>
 8005be8:	2306      	movs	r3, #6
 8005bea:	9008      	str	r0, [sp, #32]
 8005bec:	e61f      	b.n	800582e <_svfprintf_r+0x42e>
 8005bee:	9008      	str	r0, [sp, #32]
 8005bf0:	e62d      	b.n	800584e <_svfprintf_r+0x44e>
 8005bf2:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005bf6:	e696      	b.n	8005926 <_svfprintf_r+0x526>
 8005bf8:	f803 0b01 	strb.w	r0, [r3], #1
 8005bfc:	1aca      	subs	r2, r1, r3
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	dafa      	bge.n	8005bf8 <_svfprintf_r+0x7f8>
 8005c02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c06:	3201      	adds	r2, #1
 8005c08:	f103 0301 	add.w	r3, r3, #1
 8005c0c:	bfb8      	it	lt
 8005c0e:	2300      	movlt	r3, #0
 8005c10:	441d      	add	r5, r3
 8005c12:	e698      	b.n	8005946 <_svfprintf_r+0x546>
 8005c14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c16:	462b      	mov	r3, r5
 8005c18:	2030      	movs	r0, #48	; 0x30
 8005c1a:	18a9      	adds	r1, r5, r2
 8005c1c:	e7ee      	b.n	8005bfc <_svfprintf_r+0x7fc>
 8005c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c20:	2b46      	cmp	r3, #70	; 0x46
 8005c22:	d005      	beq.n	8005c30 <_svfprintf_r+0x830>
 8005c24:	2b45      	cmp	r3, #69	; 0x45
 8005c26:	d11d      	bne.n	8005c64 <_svfprintf_r+0x864>
 8005c28:	9b07      	ldr	r3, [sp, #28]
 8005c2a:	1c5e      	adds	r6, r3, #1
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e001      	b.n	8005c34 <_svfprintf_r+0x834>
 8005c30:	2303      	movs	r3, #3
 8005c32:	9e07      	ldr	r6, [sp, #28]
 8005c34:	aa24      	add	r2, sp, #144	; 0x90
 8005c36:	9204      	str	r2, [sp, #16]
 8005c38:	aa21      	add	r2, sp, #132	; 0x84
 8005c3a:	9203      	str	r2, [sp, #12]
 8005c3c:	aa20      	add	r2, sp, #128	; 0x80
 8005c3e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	463a      	mov	r2, r7
 8005c46:	462b      	mov	r3, r5
 8005c48:	4648      	mov	r0, r9
 8005c4a:	f001 f801 	bl	8006c50 <_dtoa_r>
 8005c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c50:	4683      	mov	fp, r0
 8005c52:	2b47      	cmp	r3, #71	; 0x47
 8005c54:	d108      	bne.n	8005c68 <_svfprintf_r+0x868>
 8005c56:	f018 0f01 	tst.w	r8, #1
 8005c5a:	d105      	bne.n	8005c68 <_svfprintf_r+0x868>
 8005c5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c5e:	eba3 030b 	sub.w	r3, r3, fp
 8005c62:	e672      	b.n	800594a <_svfprintf_r+0x54a>
 8005c64:	9e07      	ldr	r6, [sp, #28]
 8005c66:	e7e1      	b.n	8005c2c <_svfprintf_r+0x82c>
 8005c68:	eb0b 0306 	add.w	r3, fp, r6
 8005c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c70:	2b46      	cmp	r3, #70	; 0x46
 8005c72:	d111      	bne.n	8005c98 <_svfprintf_r+0x898>
 8005c74:	f89b 3000 	ldrb.w	r3, [fp]
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d109      	bne.n	8005c90 <_svfprintf_r+0x890>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4638      	mov	r0, r7
 8005c82:	4629      	mov	r1, r5
 8005c84:	f7fa fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8005c88:	b910      	cbnz	r0, 8005c90 <_svfprintf_r+0x890>
 8005c8a:	f1c6 0601 	rsb	r6, r6, #1
 8005c8e:	9620      	str	r6, [sp, #128]	; 0x80
 8005c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c94:	441a      	add	r2, r3
 8005c96:	9209      	str	r2, [sp, #36]	; 0x24
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa fe82 	bl	80009a8 <__aeabi_dcmpeq>
 8005ca4:	b108      	cbz	r0, 8005caa <_svfprintf_r+0x8aa>
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	9324      	str	r3, [sp, #144]	; 0x90
 8005caa:	2230      	movs	r2, #48	; 0x30
 8005cac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	d9d3      	bls.n	8005c5c <_svfprintf_r+0x85c>
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	9124      	str	r1, [sp, #144]	; 0x90
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	e7f7      	b.n	8005cac <_svfprintf_r+0x8ac>
 8005cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cbe:	2b46      	cmp	r3, #70	; 0x46
 8005cc0:	f47f ae52 	bne.w	8005968 <_svfprintf_r+0x568>
 8005cc4:	9a07      	ldr	r2, [sp, #28]
 8005cc6:	f008 0301 	and.w	r3, r8, #1
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	ea43 0302 	orr.w	r3, r3, r2
 8005cd0:	dd29      	ble.n	8005d26 <_svfprintf_r+0x926>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d034      	beq.n	8005d40 <_svfprintf_r+0x940>
 8005cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cd8:	18eb      	adds	r3, r5, r3
 8005cda:	441a      	add	r2, r3
 8005cdc:	9207      	str	r2, [sp, #28]
 8005cde:	2366      	movs	r3, #102	; 0x66
 8005ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce2:	e033      	b.n	8005d4c <_svfprintf_r+0x94c>
 8005ce4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ce8:	f805 6f01 	strb.w	r6, [r5, #1]!
 8005cec:	e673      	b.n	80059d6 <_svfprintf_r+0x5d6>
 8005cee:	b941      	cbnz	r1, 8005d02 <_svfprintf_r+0x902>
 8005cf0:	2230      	movs	r2, #48	; 0x30
 8005cf2:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8005cf6:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8005cfa:	3330      	adds	r3, #48	; 0x30
 8005cfc:	f802 3b01 	strb.w	r3, [r2], #1
 8005d00:	e675      	b.n	80059ee <_svfprintf_r+0x5ee>
 8005d02:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8005d06:	e7f8      	b.n	8005cfa <_svfprintf_r+0x8fa>
 8005d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0a:	42ab      	cmp	r3, r5
 8005d0c:	dd10      	ble.n	8005d30 <_svfprintf_r+0x930>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	4413      	add	r3, r2
 8005d16:	9307      	str	r3, [sp, #28]
 8005d18:	dc10      	bgt.n	8005d3c <_svfprintf_r+0x93c>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	f1c5 0301 	rsb	r3, r5, #1
 8005d20:	441a      	add	r2, r3
 8005d22:	9207      	str	r2, [sp, #28]
 8005d24:	e00a      	b.n	8005d3c <_svfprintf_r+0x93c>
 8005d26:	b16b      	cbz	r3, 8005d44 <_svfprintf_r+0x944>
 8005d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2a:	9a07      	ldr	r2, [sp, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	e7d4      	b.n	8005cda <_svfprintf_r+0x8da>
 8005d30:	f018 0f01 	tst.w	r8, #1
 8005d34:	d01f      	beq.n	8005d76 <_svfprintf_r+0x976>
 8005d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d38:	18eb      	adds	r3, r5, r3
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	2367      	movs	r3, #103	; 0x67
 8005d3e:	e7cf      	b.n	8005ce0 <_svfprintf_r+0x8e0>
 8005d40:	9507      	str	r5, [sp, #28]
 8005d42:	e7cc      	b.n	8005cde <_svfprintf_r+0x8de>
 8005d44:	2366      	movs	r3, #102	; 0x66
 8005d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d48:	2301      	movs	r3, #1
 8005d4a:	9307      	str	r3, [sp, #28]
 8005d4c:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8005d50:	930c      	str	r3, [sp, #48]	; 0x30
 8005d52:	d021      	beq.n	8005d98 <_svfprintf_r+0x998>
 8005d54:	2600      	movs	r6, #0
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	960c      	str	r6, [sp, #48]	; 0x30
 8005d5a:	f77f ae5f 	ble.w	8005a1c <_svfprintf_r+0x61c>
 8005d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2bff      	cmp	r3, #255	; 0xff
 8005d64:	d109      	bne.n	8005d7a <_svfprintf_r+0x97a>
 8005d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005d6c:	4433      	add	r3, r6
 8005d6e:	fb01 2303 	mla	r3, r1, r3, r2
 8005d72:	9307      	str	r3, [sp, #28]
 8005d74:	e652      	b.n	8005a1c <_svfprintf_r+0x61c>
 8005d76:	9507      	str	r5, [sp, #28]
 8005d78:	e7e0      	b.n	8005d3c <_svfprintf_r+0x93c>
 8005d7a:	42ab      	cmp	r3, r5
 8005d7c:	daf3      	bge.n	8005d66 <_svfprintf_r+0x966>
 8005d7e:	1aed      	subs	r5, r5, r3
 8005d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	b133      	cbz	r3, 8005d94 <_svfprintf_r+0x994>
 8005d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d88:	3301      	adds	r3, #1
 8005d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d8e:	3301      	adds	r3, #1
 8005d90:	930d      	str	r3, [sp, #52]	; 0x34
 8005d92:	e7e4      	b.n	8005d5e <_svfprintf_r+0x95e>
 8005d94:	3601      	adds	r6, #1
 8005d96:	e7e2      	b.n	8005d5e <_svfprintf_r+0x95e>
 8005d98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d9a:	e63f      	b.n	8005a1c <_svfprintf_r+0x61c>
 8005d9c:	1d2b      	adds	r3, r5, #4
 8005d9e:	f018 0f20 	tst.w	r8, #32
 8005da2:	930a      	str	r3, [sp, #40]	; 0x28
 8005da4:	d00a      	beq.n	8005dbc <_svfprintf_r+0x9bc>
 8005da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dac:	17d2      	asrs	r2, r2, #31
 8005dae:	e9c3 1200 	strd	r1, r2, [r3]
 8005db2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005db4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8005db8:	f7ff bb5f 	b.w	800547a <_svfprintf_r+0x7a>
 8005dbc:	f018 0f10 	tst.w	r8, #16
 8005dc0:	d003      	beq.n	8005dca <_svfprintf_r+0x9ca>
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e7f3      	b.n	8005db2 <_svfprintf_r+0x9b2>
 8005dca:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005dce:	d003      	beq.n	8005dd8 <_svfprintf_r+0x9d8>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e7ec      	b.n	8005db2 <_svfprintf_r+0x9b2>
 8005dd8:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005ddc:	d0f1      	beq.n	8005dc2 <_svfprintf_r+0x9c2>
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e7e5      	b.n	8005db2 <_svfprintf_r+0x9b2>
 8005de6:	f048 0810 	orr.w	r8, r8, #16
 8005dea:	f018 0320 	ands.w	r3, r8, #32
 8005dee:	d020      	beq.n	8005e32 <_svfprintf_r+0xa32>
 8005df0:	3507      	adds	r5, #7
 8005df2:	f025 0307 	bic.w	r3, r5, #7
 8005df6:	461a      	mov	r2, r3
 8005df8:	f852 5b08 	ldr.w	r5, [r2], #8
 8005dfc:	685e      	ldr	r6, [r3, #4]
 8005dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8005e00:	2300      	movs	r3, #0
 8005e02:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005e06:	2200      	movs	r2, #0
 8005e08:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005e0c:	9a07      	ldr	r2, [sp, #28]
 8005e0e:	3201      	adds	r2, #1
 8005e10:	f000 848d 	beq.w	800672e <_svfprintf_r+0x132e>
 8005e14:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8005e18:	9208      	str	r2, [sp, #32]
 8005e1a:	ea55 0206 	orrs.w	r2, r5, r6
 8005e1e:	f040 848c 	bne.w	800673a <_svfprintf_r+0x133a>
 8005e22:	9a07      	ldr	r2, [sp, #28]
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	f000 80f4 	beq.w	8006012 <_svfprintf_r+0xc12>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f040 8488 	bne.w	8006740 <_svfprintf_r+0x1340>
 8005e30:	e09e      	b.n	8005f70 <_svfprintf_r+0xb70>
 8005e32:	462a      	mov	r2, r5
 8005e34:	f852 5b04 	ldr.w	r5, [r2], #4
 8005e38:	f018 0610 	ands.w	r6, r8, #16
 8005e3c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e3e:	d001      	beq.n	8005e44 <_svfprintf_r+0xa44>
 8005e40:	461e      	mov	r6, r3
 8005e42:	e7dd      	b.n	8005e00 <_svfprintf_r+0xa00>
 8005e44:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005e48:	d001      	beq.n	8005e4e <_svfprintf_r+0xa4e>
 8005e4a:	b2ad      	uxth	r5, r5
 8005e4c:	e7d8      	b.n	8005e00 <_svfprintf_r+0xa00>
 8005e4e:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8005e52:	d0d5      	beq.n	8005e00 <_svfprintf_r+0xa00>
 8005e54:	b2ed      	uxtb	r5, r5
 8005e56:	e7f3      	b.n	8005e40 <_svfprintf_r+0xa40>
 8005e58:	462b      	mov	r3, r5
 8005e5a:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e5e:	2278      	movs	r2, #120	; 0x78
 8005e60:	930a      	str	r3, [sp, #40]	; 0x28
 8005e62:	f647 0330 	movw	r3, #30768	; 0x7830
 8005e66:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8005e6a:	4ba2      	ldr	r3, [pc, #648]	; (80060f4 <_svfprintf_r+0xcf4>)
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e70:	f048 0802 	orr.w	r8, r8, #2
 8005e74:	2302      	movs	r3, #2
 8005e76:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e78:	e7c5      	b.n	8005e06 <_svfprintf_r+0xa06>
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	f853 bb04 	ldr.w	fp, [r3], #4
 8005e82:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8005e86:	930a      	str	r3, [sp, #40]	; 0x28
 8005e88:	9b07      	ldr	r3, [sp, #28]
 8005e8a:	1c58      	adds	r0, r3, #1
 8005e8c:	d010      	beq.n	8005eb0 <_svfprintf_r+0xab0>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4629      	mov	r1, r5
 8005e92:	4658      	mov	r0, fp
 8005e94:	f000 fdd0 	bl	8006a38 <memchr>
 8005e98:	9008      	str	r0, [sp, #32]
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	f000 80d0 	beq.w	8006040 <_svfprintf_r+0xc40>
 8005ea0:	eba0 030b 	sub.w	r3, r0, fp
 8005ea4:	462f      	mov	r7, r5
 8005ea6:	462e      	mov	r6, r5
 8005ea8:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8005eac:	950c      	str	r5, [sp, #48]	; 0x30
 8005eae:	e5bd      	b.n	8005a2c <_svfprintf_r+0x62c>
 8005eb0:	4658      	mov	r0, fp
 8005eb2:	f7fa f94d 	bl	8000150 <strlen>
 8005eb6:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8005eba:	e469      	b.n	8005790 <_svfprintf_r+0x390>
 8005ebc:	f048 0810 	orr.w	r8, r8, #16
 8005ec0:	f018 0320 	ands.w	r3, r8, #32
 8005ec4:	d009      	beq.n	8005eda <_svfprintf_r+0xada>
 8005ec6:	3507      	adds	r5, #7
 8005ec8:	f025 0307 	bic.w	r3, r5, #7
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f852 5b08 	ldr.w	r5, [r2], #8
 8005ed2:	685e      	ldr	r6, [r3, #4]
 8005ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e795      	b.n	8005e06 <_svfprintf_r+0xa06>
 8005eda:	462a      	mov	r2, r5
 8005edc:	f852 5b04 	ldr.w	r5, [r2], #4
 8005ee0:	f018 0610 	ands.w	r6, r8, #16
 8005ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ee6:	d001      	beq.n	8005eec <_svfprintf_r+0xaec>
 8005ee8:	461e      	mov	r6, r3
 8005eea:	e7f4      	b.n	8005ed6 <_svfprintf_r+0xad6>
 8005eec:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005ef0:	d001      	beq.n	8005ef6 <_svfprintf_r+0xaf6>
 8005ef2:	b2ad      	uxth	r5, r5
 8005ef4:	e7ef      	b.n	8005ed6 <_svfprintf_r+0xad6>
 8005ef6:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8005efa:	d0ec      	beq.n	8005ed6 <_svfprintf_r+0xad6>
 8005efc:	b2ed      	uxtb	r5, r5
 8005efe:	e7f3      	b.n	8005ee8 <_svfprintf_r+0xae8>
 8005f00:	4b7d      	ldr	r3, [pc, #500]	; (80060f8 <_svfprintf_r+0xcf8>)
 8005f02:	931a      	str	r3, [sp, #104]	; 0x68
 8005f04:	f018 0320 	ands.w	r3, r8, #32
 8005f08:	d01b      	beq.n	8005f42 <_svfprintf_r+0xb42>
 8005f0a:	3507      	adds	r5, #7
 8005f0c:	f025 0307 	bic.w	r3, r5, #7
 8005f10:	461a      	mov	r2, r3
 8005f12:	f852 5b08 	ldr.w	r5, [r2], #8
 8005f16:	685e      	ldr	r6, [r3, #4]
 8005f18:	920a      	str	r2, [sp, #40]	; 0x28
 8005f1a:	f018 0f01 	tst.w	r8, #1
 8005f1e:	d00a      	beq.n	8005f36 <_svfprintf_r+0xb36>
 8005f20:	ea55 0306 	orrs.w	r3, r5, r6
 8005f24:	d007      	beq.n	8005f36 <_svfprintf_r+0xb36>
 8005f26:	2330      	movs	r3, #48	; 0x30
 8005f28:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f2e:	f048 0802 	orr.w	r8, r8, #2
 8005f32:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005f36:	2302      	movs	r3, #2
 8005f38:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005f3c:	e763      	b.n	8005e06 <_svfprintf_r+0xa06>
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <_svfprintf_r+0xcf4>)
 8005f40:	e7df      	b.n	8005f02 <_svfprintf_r+0xb02>
 8005f42:	462a      	mov	r2, r5
 8005f44:	f852 5b04 	ldr.w	r5, [r2], #4
 8005f48:	f018 0610 	ands.w	r6, r8, #16
 8005f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f4e:	d001      	beq.n	8005f54 <_svfprintf_r+0xb54>
 8005f50:	461e      	mov	r6, r3
 8005f52:	e7e2      	b.n	8005f1a <_svfprintf_r+0xb1a>
 8005f54:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005f58:	d001      	beq.n	8005f5e <_svfprintf_r+0xb5e>
 8005f5a:	b2ad      	uxth	r5, r5
 8005f5c:	e7dd      	b.n	8005f1a <_svfprintf_r+0xb1a>
 8005f5e:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8005f62:	d0da      	beq.n	8005f1a <_svfprintf_r+0xb1a>
 8005f64:	b2ed      	uxtb	r5, r5
 8005f66:	e7f3      	b.n	8005f50 <_svfprintf_r+0xb50>
 8005f68:	2d0a      	cmp	r5, #10
 8005f6a:	f176 0300 	sbcs.w	r3, r6, #0
 8005f6e:	d205      	bcs.n	8005f7c <_svfprintf_r+0xb7c>
 8005f70:	3530      	adds	r5, #48	; 0x30
 8005f72:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 8005f76:	f20d 1b47 	addw	fp, sp, #327	; 0x147
 8005f7a:	e3fd      	b.n	8006778 <_svfprintf_r+0x1378>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	9b08      	ldr	r3, [sp, #32]
 8005f82:	af52      	add	r7, sp, #328	; 0x148
 8005f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f88:	930c      	str	r3, [sp, #48]	; 0x30
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4628      	mov	r0, r5
 8005f90:	4631      	mov	r1, r6
 8005f92:	f7fa fd79 	bl	8000a88 <__aeabi_uldivmod>
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	3230      	adds	r2, #48	; 0x30
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa0:	4688      	mov	r8, r1
 8005fa2:	9014      	str	r0, [sp, #80]	; 0x50
 8005fa4:	f107 3bff 	add.w	fp, r7, #4294967295
 8005fa8:	f807 2c01 	strb.w	r2, [r7, #-1]
 8005fac:	b1d3      	cbz	r3, 8005fe4 <_svfprintf_r+0xbe4>
 8005fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d115      	bne.n	8005fe4 <_svfprintf_r+0xbe4>
 8005fb8:	2aff      	cmp	r2, #255	; 0xff
 8005fba:	d013      	beq.n	8005fe4 <_svfprintf_r+0xbe4>
 8005fbc:	2d0a      	cmp	r5, #10
 8005fbe:	f176 0300 	sbcs.w	r3, r6, #0
 8005fc2:	d30f      	bcc.n	8005fe4 <_svfprintf_r+0xbe4>
 8005fc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fc8:	ebab 0b03 	sub.w	fp, fp, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4658      	mov	r0, fp
 8005fd0:	f000 fceb 	bl	80069aa <strncpy>
 8005fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	b11b      	cbz	r3, 8005fe2 <_svfprintf_r+0xbe2>
 8005fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fdc:	3301      	adds	r3, #1
 8005fde:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe4:	2d0a      	cmp	r5, #10
 8005fe6:	f176 0600 	sbcs.w	r6, r6, #0
 8005fea:	f0c0 83c5 	bcc.w	8006778 <_svfprintf_r+0x1378>
 8005fee:	4646      	mov	r6, r8
 8005ff0:	465f      	mov	r7, fp
 8005ff2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005ff4:	e7c9      	b.n	8005f8a <_svfprintf_r+0xb8a>
 8005ff6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ff8:	f005 030f 	and.w	r3, r5, #15
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
 8005ffe:	092d      	lsrs	r5, r5, #4
 8006000:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8006004:	0936      	lsrs	r6, r6, #4
 8006006:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800600a:	ea55 0306 	orrs.w	r3, r5, r6
 800600e:	d1f2      	bne.n	8005ff6 <_svfprintf_r+0xbf6>
 8006010:	e3b2      	b.n	8006778 <_svfprintf_r+0x1378>
 8006012:	b933      	cbnz	r3, 8006022 <_svfprintf_r+0xc22>
 8006014:	f018 0f01 	tst.w	r8, #1
 8006018:	d003      	beq.n	8006022 <_svfprintf_r+0xc22>
 800601a:	2330      	movs	r3, #48	; 0x30
 800601c:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8006020:	e7a9      	b.n	8005f76 <_svfprintf_r+0xb76>
 8006022:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8006026:	e3a7      	b.n	8006778 <_svfprintf_r+0x1378>
 8006028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8374 	beq.w	8006718 <_svfprintf_r+0x1318>
 8006030:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8006034:	2300      	movs	r3, #0
 8006036:	950a      	str	r5, [sp, #40]	; 0x28
 8006038:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800603c:	f7ff bb3b 	b.w	80056b6 <_svfprintf_r+0x2b6>
 8006040:	9f08      	ldr	r7, [sp, #32]
 8006042:	f7ff bba6 	b.w	8005792 <_svfprintf_r+0x392>
 8006046:	2010      	movs	r0, #16
 8006048:	2a07      	cmp	r2, #7
 800604a:	4403      	add	r3, r0
 800604c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006050:	6060      	str	r0, [r4, #4]
 8006052:	dd08      	ble.n	8006066 <_svfprintf_r+0xc66>
 8006054:	4651      	mov	r1, sl
 8006056:	4648      	mov	r0, r9
 8006058:	aa26      	add	r2, sp, #152	; 0x98
 800605a:	f001 feeb 	bl	8007e34 <__ssprint_r>
 800605e:	2800      	cmp	r0, #0
 8006060:	f040 8338 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006064:	a929      	add	r1, sp, #164	; 0xa4
 8006066:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006068:	460c      	mov	r4, r1
 800606a:	3b10      	subs	r3, #16
 800606c:	9316      	str	r3, [sp, #88]	; 0x58
 800606e:	e4f9      	b.n	8005a64 <_svfprintf_r+0x664>
 8006070:	460c      	mov	r4, r1
 8006072:	e513      	b.n	8005a9c <_svfprintf_r+0x69c>
 8006074:	4651      	mov	r1, sl
 8006076:	4648      	mov	r0, r9
 8006078:	aa26      	add	r2, sp, #152	; 0x98
 800607a:	f001 fedb 	bl	8007e34 <__ssprint_r>
 800607e:	2800      	cmp	r0, #0
 8006080:	f040 8328 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006084:	ac29      	add	r4, sp, #164	; 0xa4
 8006086:	e51b      	b.n	8005ac0 <_svfprintf_r+0x6c0>
 8006088:	4651      	mov	r1, sl
 800608a:	4648      	mov	r0, r9
 800608c:	aa26      	add	r2, sp, #152	; 0x98
 800608e:	f001 fed1 	bl	8007e34 <__ssprint_r>
 8006092:	2800      	cmp	r0, #0
 8006094:	f040 831e 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006098:	ac29      	add	r4, sp, #164	; 0xa4
 800609a:	e521      	b.n	8005ae0 <_svfprintf_r+0x6e0>
 800609c:	2010      	movs	r0, #16
 800609e:	2a07      	cmp	r2, #7
 80060a0:	4403      	add	r3, r0
 80060a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80060a6:	6060      	str	r0, [r4, #4]
 80060a8:	dd08      	ble.n	80060bc <_svfprintf_r+0xcbc>
 80060aa:	4651      	mov	r1, sl
 80060ac:	4648      	mov	r0, r9
 80060ae:	aa26      	add	r2, sp, #152	; 0x98
 80060b0:	f001 fec0 	bl	8007e34 <__ssprint_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f040 830d 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80060ba:	a929      	add	r1, sp, #164	; 0xa4
 80060bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060be:	460c      	mov	r4, r1
 80060c0:	3b10      	subs	r3, #16
 80060c2:	9316      	str	r3, [sp, #88]	; 0x58
 80060c4:	e515      	b.n	8005af2 <_svfprintf_r+0x6f2>
 80060c6:	460c      	mov	r4, r1
 80060c8:	e52f      	b.n	8005b2a <_svfprintf_r+0x72a>
 80060ca:	2010      	movs	r0, #16
 80060cc:	2b07      	cmp	r3, #7
 80060ce:	4402      	add	r2, r0
 80060d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80060d4:	6060      	str	r0, [r4, #4]
 80060d6:	dd08      	ble.n	80060ea <_svfprintf_r+0xcea>
 80060d8:	4651      	mov	r1, sl
 80060da:	4648      	mov	r0, r9
 80060dc:	aa26      	add	r2, sp, #152	; 0x98
 80060de:	f001 fea9 	bl	8007e34 <__ssprint_r>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 82f6 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80060e8:	a929      	add	r1, sp, #164	; 0xa4
 80060ea:	460c      	mov	r4, r1
 80060ec:	3f10      	subs	r7, #16
 80060ee:	e520      	b.n	8005b32 <_svfprintf_r+0x732>
 80060f0:	460c      	mov	r4, r1
 80060f2:	e547      	b.n	8005b84 <_svfprintf_r+0x784>
 80060f4:	080094e6 	.word	0x080094e6
 80060f8:	080094f7 	.word	0x080094f7
 80060fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060fe:	2b65      	cmp	r3, #101	; 0x65
 8006100:	f340 8230 	ble.w	8006564 <_svfprintf_r+0x1164>
 8006104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	f7fa fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006110:	2800      	cmp	r0, #0
 8006112:	d068      	beq.n	80061e6 <_svfprintf_r+0xde6>
 8006114:	4b6d      	ldr	r3, [pc, #436]	; (80062cc <_svfprintf_r+0xecc>)
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2301      	movs	r3, #1
 800611a:	441f      	add	r7, r3
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006120:	9728      	str	r7, [sp, #160]	; 0xa0
 8006122:	3301      	adds	r3, #1
 8006124:	2b07      	cmp	r3, #7
 8006126:	9327      	str	r3, [sp, #156]	; 0x9c
 8006128:	dc37      	bgt.n	800619a <_svfprintf_r+0xd9a>
 800612a:	3408      	adds	r4, #8
 800612c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800612e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006130:	4293      	cmp	r3, r2
 8006132:	db03      	blt.n	800613c <_svfprintf_r+0xd3c>
 8006134:	f018 0f01 	tst.w	r8, #1
 8006138:	f43f ad36 	beq.w	8005ba8 <_svfprintf_r+0x7a8>
 800613c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800613e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006148:	4413      	add	r3, r2
 800614a:	9328      	str	r3, [sp, #160]	; 0xa0
 800614c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800614e:	3301      	adds	r3, #1
 8006150:	2b07      	cmp	r3, #7
 8006152:	9327      	str	r3, [sp, #156]	; 0x9c
 8006154:	dc2b      	bgt.n	80061ae <_svfprintf_r+0xdae>
 8006156:	3408      	adds	r4, #8
 8006158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615a:	1e5d      	subs	r5, r3, #1
 800615c:	2d00      	cmp	r5, #0
 800615e:	f77f ad23 	ble.w	8005ba8 <_svfprintf_r+0x7a8>
 8006162:	2710      	movs	r7, #16
 8006164:	4e5a      	ldr	r6, [pc, #360]	; (80062d0 <_svfprintf_r+0xed0>)
 8006166:	2d10      	cmp	r5, #16
 8006168:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800616c:	f104 0108 	add.w	r1, r4, #8
 8006170:	f103 0301 	add.w	r3, r3, #1
 8006174:	6026      	str	r6, [r4, #0]
 8006176:	dc24      	bgt.n	80061c2 <_svfprintf_r+0xdc2>
 8006178:	6065      	str	r5, [r4, #4]
 800617a:	4415      	add	r5, r2
 800617c:	9528      	str	r5, [sp, #160]	; 0xa0
 800617e:	2b07      	cmp	r3, #7
 8006180:	9327      	str	r3, [sp, #156]	; 0x9c
 8006182:	f340 8286 	ble.w	8006692 <_svfprintf_r+0x1292>
 8006186:	4651      	mov	r1, sl
 8006188:	4648      	mov	r0, r9
 800618a:	aa26      	add	r2, sp, #152	; 0x98
 800618c:	f001 fe52 	bl	8007e34 <__ssprint_r>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 829f 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006196:	ac29      	add	r4, sp, #164	; 0xa4
 8006198:	e506      	b.n	8005ba8 <_svfprintf_r+0x7a8>
 800619a:	4651      	mov	r1, sl
 800619c:	4648      	mov	r0, r9
 800619e:	aa26      	add	r2, sp, #152	; 0x98
 80061a0:	f001 fe48 	bl	8007e34 <__ssprint_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f040 8295 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80061aa:	ac29      	add	r4, sp, #164	; 0xa4
 80061ac:	e7be      	b.n	800612c <_svfprintf_r+0xd2c>
 80061ae:	4651      	mov	r1, sl
 80061b0:	4648      	mov	r0, r9
 80061b2:	aa26      	add	r2, sp, #152	; 0x98
 80061b4:	f001 fe3e 	bl	8007e34 <__ssprint_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 828b 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80061be:	ac29      	add	r4, sp, #164	; 0xa4
 80061c0:	e7ca      	b.n	8006158 <_svfprintf_r+0xd58>
 80061c2:	3210      	adds	r2, #16
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80061ca:	6067      	str	r7, [r4, #4]
 80061cc:	dd08      	ble.n	80061e0 <_svfprintf_r+0xde0>
 80061ce:	4651      	mov	r1, sl
 80061d0:	4648      	mov	r0, r9
 80061d2:	aa26      	add	r2, sp, #152	; 0x98
 80061d4:	f001 fe2e 	bl	8007e34 <__ssprint_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 827b 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80061de:	a929      	add	r1, sp, #164	; 0xa4
 80061e0:	460c      	mov	r4, r1
 80061e2:	3d10      	subs	r5, #16
 80061e4:	e7bf      	b.n	8006166 <_svfprintf_r+0xd66>
 80061e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dc73      	bgt.n	80062d4 <_svfprintf_r+0xed4>
 80061ec:	4b37      	ldr	r3, [pc, #220]	; (80062cc <_svfprintf_r+0xecc>)
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	2301      	movs	r3, #1
 80061f2:	441f      	add	r7, r3
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80061f8:	9728      	str	r7, [sp, #160]	; 0xa0
 80061fa:	3301      	adds	r3, #1
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8006200:	dc3d      	bgt.n	800627e <_svfprintf_r+0xe7e>
 8006202:	3408      	adds	r4, #8
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006208:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800620a:	430b      	orrs	r3, r1
 800620c:	f008 0101 	and.w	r1, r8, #1
 8006210:	430b      	orrs	r3, r1
 8006212:	f43f acc9 	beq.w	8005ba8 <_svfprintf_r+0x7a8>
 8006216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800621c:	441a      	add	r2, r3
 800621e:	6063      	str	r3, [r4, #4]
 8006220:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006222:	9228      	str	r2, [sp, #160]	; 0xa0
 8006224:	3301      	adds	r3, #1
 8006226:	2b07      	cmp	r3, #7
 8006228:	9327      	str	r3, [sp, #156]	; 0x9c
 800622a:	dc32      	bgt.n	8006292 <_svfprintf_r+0xe92>
 800622c:	3408      	adds	r4, #8
 800622e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006230:	2d00      	cmp	r5, #0
 8006232:	da1b      	bge.n	800626c <_svfprintf_r+0xe6c>
 8006234:	4623      	mov	r3, r4
 8006236:	2710      	movs	r7, #16
 8006238:	4e25      	ldr	r6, [pc, #148]	; (80062d0 <_svfprintf_r+0xed0>)
 800623a:	426d      	negs	r5, r5
 800623c:	2d10      	cmp	r5, #16
 800623e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8006242:	f104 0408 	add.w	r4, r4, #8
 8006246:	f102 0201 	add.w	r2, r2, #1
 800624a:	601e      	str	r6, [r3, #0]
 800624c:	dc2b      	bgt.n	80062a6 <_svfprintf_r+0xea6>
 800624e:	605d      	str	r5, [r3, #4]
 8006250:	2a07      	cmp	r2, #7
 8006252:	440d      	add	r5, r1
 8006254:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8006258:	dd08      	ble.n	800626c <_svfprintf_r+0xe6c>
 800625a:	4651      	mov	r1, sl
 800625c:	4648      	mov	r0, r9
 800625e:	aa26      	add	r2, sp, #152	; 0x98
 8006260:	f001 fde8 	bl	8007e34 <__ssprint_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 8235 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 800626a:	ac29      	add	r4, sp, #164	; 0xa4
 800626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006274:	f8c4 b000 	str.w	fp, [r4]
 8006278:	4413      	add	r3, r2
 800627a:	9328      	str	r3, [sp, #160]	; 0xa0
 800627c:	e48d      	b.n	8005b9a <_svfprintf_r+0x79a>
 800627e:	4651      	mov	r1, sl
 8006280:	4648      	mov	r0, r9
 8006282:	aa26      	add	r2, sp, #152	; 0x98
 8006284:	f001 fdd6 	bl	8007e34 <__ssprint_r>
 8006288:	2800      	cmp	r0, #0
 800628a:	f040 8223 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 800628e:	ac29      	add	r4, sp, #164	; 0xa4
 8006290:	e7b8      	b.n	8006204 <_svfprintf_r+0xe04>
 8006292:	4651      	mov	r1, sl
 8006294:	4648      	mov	r0, r9
 8006296:	aa26      	add	r2, sp, #152	; 0x98
 8006298:	f001 fdcc 	bl	8007e34 <__ssprint_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	f040 8219 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80062a2:	ac29      	add	r4, sp, #164	; 0xa4
 80062a4:	e7c3      	b.n	800622e <_svfprintf_r+0xe2e>
 80062a6:	3110      	adds	r1, #16
 80062a8:	2a07      	cmp	r2, #7
 80062aa:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80062ae:	605f      	str	r7, [r3, #4]
 80062b0:	dd08      	ble.n	80062c4 <_svfprintf_r+0xec4>
 80062b2:	4651      	mov	r1, sl
 80062b4:	4648      	mov	r0, r9
 80062b6:	aa26      	add	r2, sp, #152	; 0x98
 80062b8:	f001 fdbc 	bl	8007e34 <__ssprint_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	f040 8209 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80062c2:	ac29      	add	r4, sp, #164	; 0xa4
 80062c4:	4623      	mov	r3, r4
 80062c6:	3d10      	subs	r5, #16
 80062c8:	e7b8      	b.n	800623c <_svfprintf_r+0xe3c>
 80062ca:	bf00      	nop
 80062cc:	08009508 	.word	0x08009508
 80062d0:	0800951a 	.word	0x0800951a
 80062d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	bfa8      	it	ge
 80062da:	462b      	movge	r3, r5
 80062dc:	2b00      	cmp	r3, #0
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	dd09      	ble.n	80062f6 <_svfprintf_r+0xef6>
 80062e2:	441f      	add	r7, r3
 80062e4:	e9c4 b300 	strd	fp, r3, [r4]
 80062e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80062ea:	9728      	str	r7, [sp, #160]	; 0xa0
 80062ec:	3301      	adds	r3, #1
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80062f2:	dc74      	bgt.n	80063de <_svfprintf_r+0xfde>
 80062f4:	3408      	adds	r4, #8
 80062f6:	9b07      	ldr	r3, [sp, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bfb4      	ite	lt
 80062fc:	462f      	movlt	r7, r5
 80062fe:	1aef      	subge	r7, r5, r3
 8006300:	2f00      	cmp	r7, #0
 8006302:	dd18      	ble.n	8006336 <_svfprintf_r+0xf36>
 8006304:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006308:	4895      	ldr	r0, [pc, #596]	; (8006560 <_svfprintf_r+0x1160>)
 800630a:	2f10      	cmp	r7, #16
 800630c:	f103 0301 	add.w	r3, r3, #1
 8006310:	f104 0108 	add.w	r1, r4, #8
 8006314:	6020      	str	r0, [r4, #0]
 8006316:	dc6c      	bgt.n	80063f2 <_svfprintf_r+0xff2>
 8006318:	6067      	str	r7, [r4, #4]
 800631a:	2b07      	cmp	r3, #7
 800631c:	4417      	add	r7, r2
 800631e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006322:	dd79      	ble.n	8006418 <_svfprintf_r+0x1018>
 8006324:	4651      	mov	r1, sl
 8006326:	4648      	mov	r0, r9
 8006328:	aa26      	add	r2, sp, #152	; 0x98
 800632a:	f001 fd83 	bl	8007e34 <__ssprint_r>
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 81d0 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006334:	ac29      	add	r4, sp, #164	; 0xa4
 8006336:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800633a:	445d      	add	r5, fp
 800633c:	d009      	beq.n	8006352 <_svfprintf_r+0xf52>
 800633e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d16b      	bne.n	800641c <_svfprintf_r+0x101c>
 8006344:	2e00      	cmp	r6, #0
 8006346:	d16b      	bne.n	8006420 <_svfprintf_r+0x1020>
 8006348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634a:	445b      	add	r3, fp
 800634c:	429d      	cmp	r5, r3
 800634e:	bf28      	it	cs
 8006350:	461d      	movcs	r5, r3
 8006352:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	4293      	cmp	r3, r2
 8006358:	db02      	blt.n	8006360 <_svfprintf_r+0xf60>
 800635a:	f018 0f01 	tst.w	r8, #1
 800635e:	d00e      	beq.n	800637e <_svfprintf_r+0xf7e>
 8006360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800636c:	4413      	add	r3, r2
 800636e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006370:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006372:	3301      	adds	r3, #1
 8006374:	2b07      	cmp	r3, #7
 8006376:	9327      	str	r3, [sp, #156]	; 0x9c
 8006378:	f300 80cc 	bgt.w	8006514 <_svfprintf_r+0x1114>
 800637c:	3408      	adds	r4, #8
 800637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006380:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8006382:	1b9e      	subs	r6, r3, r6
 8006384:	445b      	add	r3, fp
 8006386:	1b5b      	subs	r3, r3, r5
 8006388:	429e      	cmp	r6, r3
 800638a:	bfa8      	it	ge
 800638c:	461e      	movge	r6, r3
 800638e:	2e00      	cmp	r6, #0
 8006390:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006392:	dd0a      	ble.n	80063aa <_svfprintf_r+0xfaa>
 8006394:	4433      	add	r3, r6
 8006396:	9328      	str	r3, [sp, #160]	; 0xa0
 8006398:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800639a:	e9c4 5600 	strd	r5, r6, [r4]
 800639e:	3301      	adds	r3, #1
 80063a0:	2b07      	cmp	r3, #7
 80063a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80063a4:	f300 80c0 	bgt.w	8006528 <_svfprintf_r+0x1128>
 80063a8:	3408      	adds	r4, #8
 80063aa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80063ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	eba3 0505 	sub.w	r5, r3, r5
 80063b4:	bfa8      	it	ge
 80063b6:	1bad      	subge	r5, r5, r6
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	f77f abf5 	ble.w	8005ba8 <_svfprintf_r+0x7a8>
 80063be:	2710      	movs	r7, #16
 80063c0:	4e67      	ldr	r6, [pc, #412]	; (8006560 <_svfprintf_r+0x1160>)
 80063c2:	2d10      	cmp	r5, #16
 80063c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80063c8:	f104 0108 	add.w	r1, r4, #8
 80063cc:	f103 0301 	add.w	r3, r3, #1
 80063d0:	6026      	str	r6, [r4, #0]
 80063d2:	f300 80b3 	bgt.w	800653c <_svfprintf_r+0x113c>
 80063d6:	442a      	add	r2, r5
 80063d8:	6065      	str	r5, [r4, #4]
 80063da:	9228      	str	r2, [sp, #160]	; 0xa0
 80063dc:	e6cf      	b.n	800617e <_svfprintf_r+0xd7e>
 80063de:	4651      	mov	r1, sl
 80063e0:	4648      	mov	r0, r9
 80063e2:	aa26      	add	r2, sp, #152	; 0x98
 80063e4:	f001 fd26 	bl	8007e34 <__ssprint_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	f040 8173 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80063ee:	ac29      	add	r4, sp, #164	; 0xa4
 80063f0:	e781      	b.n	80062f6 <_svfprintf_r+0xef6>
 80063f2:	2010      	movs	r0, #16
 80063f4:	2b07      	cmp	r3, #7
 80063f6:	4402      	add	r2, r0
 80063f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80063fc:	6060      	str	r0, [r4, #4]
 80063fe:	dd08      	ble.n	8006412 <_svfprintf_r+0x1012>
 8006400:	4651      	mov	r1, sl
 8006402:	4648      	mov	r0, r9
 8006404:	aa26      	add	r2, sp, #152	; 0x98
 8006406:	f001 fd15 	bl	8007e34 <__ssprint_r>
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 8162 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006410:	a929      	add	r1, sp, #164	; 0xa4
 8006412:	460c      	mov	r4, r1
 8006414:	3f10      	subs	r7, #16
 8006416:	e775      	b.n	8006304 <_svfprintf_r+0xf04>
 8006418:	460c      	mov	r4, r1
 800641a:	e78c      	b.n	8006336 <_svfprintf_r+0xf36>
 800641c:	2e00      	cmp	r6, #0
 800641e:	d049      	beq.n	80064b4 <_svfprintf_r+0x10b4>
 8006420:	3e01      	subs	r6, #1
 8006422:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006424:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800642e:	4413      	add	r3, r2
 8006430:	9328      	str	r3, [sp, #160]	; 0xa0
 8006432:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006434:	3301      	adds	r3, #1
 8006436:	2b07      	cmp	r3, #7
 8006438:	9327      	str	r3, [sp, #156]	; 0x9c
 800643a:	dc42      	bgt.n	80064c2 <_svfprintf_r+0x10c2>
 800643c:	3408      	adds	r4, #8
 800643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006440:	445b      	add	r3, fp
 8006442:	1b5a      	subs	r2, r3, r5
 8006444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	bfa8      	it	ge
 800644c:	461a      	movge	r2, r3
 800644e:	2a00      	cmp	r2, #0
 8006450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006452:	9207      	str	r2, [sp, #28]
 8006454:	dd09      	ble.n	800646a <_svfprintf_r+0x106a>
 8006456:	4413      	add	r3, r2
 8006458:	9328      	str	r3, [sp, #160]	; 0xa0
 800645a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800645c:	e9c4 5200 	strd	r5, r2, [r4]
 8006460:	3301      	adds	r3, #1
 8006462:	2b07      	cmp	r3, #7
 8006464:	9327      	str	r3, [sp, #156]	; 0x9c
 8006466:	dc36      	bgt.n	80064d6 <_svfprintf_r+0x10d6>
 8006468:	3408      	adds	r4, #8
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	781f      	ldrb	r7, [r3, #0]
 800646e:	9b07      	ldr	r3, [sp, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfa8      	it	ge
 8006474:	1aff      	subge	r7, r7, r3
 8006476:	2f00      	cmp	r7, #0
 8006478:	dd18      	ble.n	80064ac <_svfprintf_r+0x10ac>
 800647a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800647e:	4838      	ldr	r0, [pc, #224]	; (8006560 <_svfprintf_r+0x1160>)
 8006480:	2f10      	cmp	r7, #16
 8006482:	f103 0301 	add.w	r3, r3, #1
 8006486:	f104 0108 	add.w	r1, r4, #8
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	dc2d      	bgt.n	80064ea <_svfprintf_r+0x10ea>
 800648e:	443a      	add	r2, r7
 8006490:	2b07      	cmp	r3, #7
 8006492:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006496:	6067      	str	r7, [r4, #4]
 8006498:	dd3a      	ble.n	8006510 <_svfprintf_r+0x1110>
 800649a:	4651      	mov	r1, sl
 800649c:	4648      	mov	r0, r9
 800649e:	aa26      	add	r2, sp, #152	; 0x98
 80064a0:	f001 fcc8 	bl	8007e34 <__ssprint_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f040 8115 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80064aa:	ac29      	add	r4, sp, #164	; 0xa4
 80064ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	441d      	add	r5, r3
 80064b2:	e744      	b.n	800633e <_svfprintf_r+0xf3e>
 80064b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b6:	3b01      	subs	r3, #1
 80064b8:	930d      	str	r3, [sp, #52]	; 0x34
 80064ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064bc:	3b01      	subs	r3, #1
 80064be:	930c      	str	r3, [sp, #48]	; 0x30
 80064c0:	e7af      	b.n	8006422 <_svfprintf_r+0x1022>
 80064c2:	4651      	mov	r1, sl
 80064c4:	4648      	mov	r0, r9
 80064c6:	aa26      	add	r2, sp, #152	; 0x98
 80064c8:	f001 fcb4 	bl	8007e34 <__ssprint_r>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f040 8101 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80064d2:	ac29      	add	r4, sp, #164	; 0xa4
 80064d4:	e7b3      	b.n	800643e <_svfprintf_r+0x103e>
 80064d6:	4651      	mov	r1, sl
 80064d8:	4648      	mov	r0, r9
 80064da:	aa26      	add	r2, sp, #152	; 0x98
 80064dc:	f001 fcaa 	bl	8007e34 <__ssprint_r>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	f040 80f7 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 80064e6:	ac29      	add	r4, sp, #164	; 0xa4
 80064e8:	e7bf      	b.n	800646a <_svfprintf_r+0x106a>
 80064ea:	2010      	movs	r0, #16
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	4402      	add	r2, r0
 80064f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80064f4:	6060      	str	r0, [r4, #4]
 80064f6:	dd08      	ble.n	800650a <_svfprintf_r+0x110a>
 80064f8:	4651      	mov	r1, sl
 80064fa:	4648      	mov	r0, r9
 80064fc:	aa26      	add	r2, sp, #152	; 0x98
 80064fe:	f001 fc99 	bl	8007e34 <__ssprint_r>
 8006502:	2800      	cmp	r0, #0
 8006504:	f040 80e6 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006508:	a929      	add	r1, sp, #164	; 0xa4
 800650a:	460c      	mov	r4, r1
 800650c:	3f10      	subs	r7, #16
 800650e:	e7b4      	b.n	800647a <_svfprintf_r+0x107a>
 8006510:	460c      	mov	r4, r1
 8006512:	e7cb      	b.n	80064ac <_svfprintf_r+0x10ac>
 8006514:	4651      	mov	r1, sl
 8006516:	4648      	mov	r0, r9
 8006518:	aa26      	add	r2, sp, #152	; 0x98
 800651a:	f001 fc8b 	bl	8007e34 <__ssprint_r>
 800651e:	2800      	cmp	r0, #0
 8006520:	f040 80d8 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006524:	ac29      	add	r4, sp, #164	; 0xa4
 8006526:	e72a      	b.n	800637e <_svfprintf_r+0xf7e>
 8006528:	4651      	mov	r1, sl
 800652a:	4648      	mov	r0, r9
 800652c:	aa26      	add	r2, sp, #152	; 0x98
 800652e:	f001 fc81 	bl	8007e34 <__ssprint_r>
 8006532:	2800      	cmp	r0, #0
 8006534:	f040 80ce 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006538:	ac29      	add	r4, sp, #164	; 0xa4
 800653a:	e736      	b.n	80063aa <_svfprintf_r+0xfaa>
 800653c:	3210      	adds	r2, #16
 800653e:	2b07      	cmp	r3, #7
 8006540:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006544:	6067      	str	r7, [r4, #4]
 8006546:	dd08      	ble.n	800655a <_svfprintf_r+0x115a>
 8006548:	4651      	mov	r1, sl
 800654a:	4648      	mov	r0, r9
 800654c:	aa26      	add	r2, sp, #152	; 0x98
 800654e:	f001 fc71 	bl	8007e34 <__ssprint_r>
 8006552:	2800      	cmp	r0, #0
 8006554:	f040 80be 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 8006558:	a929      	add	r1, sp, #164	; 0xa4
 800655a:	460c      	mov	r4, r1
 800655c:	3d10      	subs	r5, #16
 800655e:	e730      	b.n	80063c2 <_svfprintf_r+0xfc2>
 8006560:	0800951a 	.word	0x0800951a
 8006564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006566:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006568:	2a01      	cmp	r2, #1
 800656a:	f107 0701 	add.w	r7, r7, #1
 800656e:	f103 0301 	add.w	r3, r3, #1
 8006572:	f104 0508 	add.w	r5, r4, #8
 8006576:	dc02      	bgt.n	800657e <_svfprintf_r+0x117e>
 8006578:	f018 0f01 	tst.w	r8, #1
 800657c:	d07e      	beq.n	800667c <_svfprintf_r+0x127c>
 800657e:	2201      	movs	r2, #1
 8006580:	2b07      	cmp	r3, #7
 8006582:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006586:	f8c4 b000 	str.w	fp, [r4]
 800658a:	6062      	str	r2, [r4, #4]
 800658c:	dd08      	ble.n	80065a0 <_svfprintf_r+0x11a0>
 800658e:	4651      	mov	r1, sl
 8006590:	4648      	mov	r0, r9
 8006592:	aa26      	add	r2, sp, #152	; 0x98
 8006594:	f001 fc4e 	bl	8007e34 <__ssprint_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	f040 809b 	bne.w	80066d4 <_svfprintf_r+0x12d4>
 800659e:	ad29      	add	r5, sp, #164	; 0xa4
 80065a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a8:	606b      	str	r3, [r5, #4]
 80065aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80065ac:	4413      	add	r3, r2
 80065ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80065b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80065b2:	3301      	adds	r3, #1
 80065b4:	2b07      	cmp	r3, #7
 80065b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80065b8:	dc32      	bgt.n	8006620 <_svfprintf_r+0x1220>
 80065ba:	3508      	adds	r5, #8
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	2200      	movs	r2, #0
 80065c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065c4:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 80065c8:	1e5c      	subs	r4, r3, #1
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fa f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d12e      	bne.n	8006632 <_svfprintf_r+0x1232>
 80065d4:	f10b 0301 	add.w	r3, fp, #1
 80065d8:	e9c5 3400 	strd	r3, r4, [r5]
 80065dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065de:	3701      	adds	r7, #1
 80065e0:	3e01      	subs	r6, #1
 80065e2:	441e      	add	r6, r3
 80065e4:	2f07      	cmp	r7, #7
 80065e6:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 80065ea:	dd50      	ble.n	800668e <_svfprintf_r+0x128e>
 80065ec:	4651      	mov	r1, sl
 80065ee:	4648      	mov	r0, r9
 80065f0:	aa26      	add	r2, sp, #152	; 0x98
 80065f2:	f001 fc1f 	bl	8007e34 <__ssprint_r>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d16c      	bne.n	80066d4 <_svfprintf_r+0x12d4>
 80065fa:	ad29      	add	r5, sp, #164	; 0xa4
 80065fc:	ab22      	add	r3, sp, #136	; 0x88
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006602:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006604:	606b      	str	r3, [r5, #4]
 8006606:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006608:	4413      	add	r3, r2
 800660a:	9328      	str	r3, [sp, #160]	; 0xa0
 800660c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800660e:	3301      	adds	r3, #1
 8006610:	2b07      	cmp	r3, #7
 8006612:	9327      	str	r3, [sp, #156]	; 0x9c
 8006614:	f73f adb7 	bgt.w	8006186 <_svfprintf_r+0xd86>
 8006618:	f105 0408 	add.w	r4, r5, #8
 800661c:	f7ff bac4 	b.w	8005ba8 <_svfprintf_r+0x7a8>
 8006620:	4651      	mov	r1, sl
 8006622:	4648      	mov	r0, r9
 8006624:	aa26      	add	r2, sp, #152	; 0x98
 8006626:	f001 fc05 	bl	8007e34 <__ssprint_r>
 800662a:	2800      	cmp	r0, #0
 800662c:	d152      	bne.n	80066d4 <_svfprintf_r+0x12d4>
 800662e:	ad29      	add	r5, sp, #164	; 0xa4
 8006630:	e7c4      	b.n	80065bc <_svfprintf_r+0x11bc>
 8006632:	2c00      	cmp	r4, #0
 8006634:	dde2      	ble.n	80065fc <_svfprintf_r+0x11fc>
 8006636:	2710      	movs	r7, #16
 8006638:	4e56      	ldr	r6, [pc, #344]	; (8006794 <_svfprintf_r+0x1394>)
 800663a:	2c10      	cmp	r4, #16
 800663c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006640:	f105 0108 	add.w	r1, r5, #8
 8006644:	f103 0301 	add.w	r3, r3, #1
 8006648:	602e      	str	r6, [r5, #0]
 800664a:	dc07      	bgt.n	800665c <_svfprintf_r+0x125c>
 800664c:	606c      	str	r4, [r5, #4]
 800664e:	2b07      	cmp	r3, #7
 8006650:	4414      	add	r4, r2
 8006652:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8006656:	dcc9      	bgt.n	80065ec <_svfprintf_r+0x11ec>
 8006658:	460d      	mov	r5, r1
 800665a:	e7cf      	b.n	80065fc <_svfprintf_r+0x11fc>
 800665c:	3210      	adds	r2, #16
 800665e:	2b07      	cmp	r3, #7
 8006660:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006664:	606f      	str	r7, [r5, #4]
 8006666:	dd06      	ble.n	8006676 <_svfprintf_r+0x1276>
 8006668:	4651      	mov	r1, sl
 800666a:	4648      	mov	r0, r9
 800666c:	aa26      	add	r2, sp, #152	; 0x98
 800666e:	f001 fbe1 	bl	8007e34 <__ssprint_r>
 8006672:	bb78      	cbnz	r0, 80066d4 <_svfprintf_r+0x12d4>
 8006674:	a929      	add	r1, sp, #164	; 0xa4
 8006676:	460d      	mov	r5, r1
 8006678:	3c10      	subs	r4, #16
 800667a:	e7de      	b.n	800663a <_svfprintf_r+0x123a>
 800667c:	2201      	movs	r2, #1
 800667e:	2b07      	cmp	r3, #7
 8006680:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006684:	f8c4 b000 	str.w	fp, [r4]
 8006688:	6062      	str	r2, [r4, #4]
 800668a:	ddb7      	ble.n	80065fc <_svfprintf_r+0x11fc>
 800668c:	e7ae      	b.n	80065ec <_svfprintf_r+0x11ec>
 800668e:	3508      	adds	r5, #8
 8006690:	e7b4      	b.n	80065fc <_svfprintf_r+0x11fc>
 8006692:	460c      	mov	r4, r1
 8006694:	f7ff ba88 	b.w	8005ba8 <_svfprintf_r+0x7a8>
 8006698:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800669c:	1a9d      	subs	r5, r3, r2
 800669e:	2d00      	cmp	r5, #0
 80066a0:	f77f aa86 	ble.w	8005bb0 <_svfprintf_r+0x7b0>
 80066a4:	2710      	movs	r7, #16
 80066a6:	4e3c      	ldr	r6, [pc, #240]	; (8006798 <_svfprintf_r+0x1398>)
 80066a8:	2d10      	cmp	r5, #16
 80066aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80066ae:	6026      	str	r6, [r4, #0]
 80066b0:	f103 0301 	add.w	r3, r3, #1
 80066b4:	dc18      	bgt.n	80066e8 <_svfprintf_r+0x12e8>
 80066b6:	6065      	str	r5, [r4, #4]
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	4415      	add	r5, r2
 80066bc:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80066c0:	f77f aa76 	ble.w	8005bb0 <_svfprintf_r+0x7b0>
 80066c4:	4651      	mov	r1, sl
 80066c6:	4648      	mov	r0, r9
 80066c8:	aa26      	add	r2, sp, #152	; 0x98
 80066ca:	f001 fbb3 	bl	8007e34 <__ssprint_r>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f43f aa6e 	beq.w	8005bb0 <_svfprintf_r+0x7b0>
 80066d4:	9b08      	ldr	r3, [sp, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f43f a892 	beq.w	8005800 <_svfprintf_r+0x400>
 80066dc:	4619      	mov	r1, r3
 80066de:	4648      	mov	r0, r9
 80066e0:	f7fe fb88 	bl	8004df4 <_free_r>
 80066e4:	f7ff b88c 	b.w	8005800 <_svfprintf_r+0x400>
 80066e8:	3210      	adds	r2, #16
 80066ea:	2b07      	cmp	r3, #7
 80066ec:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80066f0:	6067      	str	r7, [r4, #4]
 80066f2:	dc02      	bgt.n	80066fa <_svfprintf_r+0x12fa>
 80066f4:	3408      	adds	r4, #8
 80066f6:	3d10      	subs	r5, #16
 80066f8:	e7d6      	b.n	80066a8 <_svfprintf_r+0x12a8>
 80066fa:	4651      	mov	r1, sl
 80066fc:	4648      	mov	r0, r9
 80066fe:	aa26      	add	r2, sp, #152	; 0x98
 8006700:	f001 fb98 	bl	8007e34 <__ssprint_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	d1e5      	bne.n	80066d4 <_svfprintf_r+0x12d4>
 8006708:	ac29      	add	r4, sp, #164	; 0xa4
 800670a:	e7f4      	b.n	80066f6 <_svfprintf_r+0x12f6>
 800670c:	4648      	mov	r0, r9
 800670e:	9908      	ldr	r1, [sp, #32]
 8006710:	f7fe fb70 	bl	8004df4 <_free_r>
 8006714:	f7ff ba64 	b.w	8005be0 <_svfprintf_r+0x7e0>
 8006718:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800671a:	2b00      	cmp	r3, #0
 800671c:	f43f a870 	beq.w	8005800 <_svfprintf_r+0x400>
 8006720:	4651      	mov	r1, sl
 8006722:	4648      	mov	r0, r9
 8006724:	aa26      	add	r2, sp, #152	; 0x98
 8006726:	f001 fb85 	bl	8007e34 <__ssprint_r>
 800672a:	f7ff b869 	b.w	8005800 <_svfprintf_r+0x400>
 800672e:	ea55 0206 	orrs.w	r2, r5, r6
 8006732:	f8cd 8020 	str.w	r8, [sp, #32]
 8006736:	f43f ab78 	beq.w	8005e2a <_svfprintf_r+0xa2a>
 800673a:	2b01      	cmp	r3, #1
 800673c:	f43f ac14 	beq.w	8005f68 <_svfprintf_r+0xb68>
 8006740:	2b02      	cmp	r3, #2
 8006742:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8006746:	f43f ac56 	beq.w	8005ff6 <_svfprintf_r+0xbf6>
 800674a:	f005 0307 	and.w	r3, r5, #7
 800674e:	08ed      	lsrs	r5, r5, #3
 8006750:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8006754:	08f6      	lsrs	r6, r6, #3
 8006756:	3330      	adds	r3, #48	; 0x30
 8006758:	ea55 0106 	orrs.w	r1, r5, r6
 800675c:	465a      	mov	r2, fp
 800675e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006762:	d1f2      	bne.n	800674a <_svfprintf_r+0x134a>
 8006764:	9908      	ldr	r1, [sp, #32]
 8006766:	07c9      	lsls	r1, r1, #31
 8006768:	d506      	bpl.n	8006778 <_svfprintf_r+0x1378>
 800676a:	2b30      	cmp	r3, #48	; 0x30
 800676c:	d004      	beq.n	8006778 <_svfprintf_r+0x1378>
 800676e:	2330      	movs	r3, #48	; 0x30
 8006770:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8006774:	f1a2 0b02 	sub.w	fp, r2, #2
 8006778:	ab52      	add	r3, sp, #328	; 0x148
 800677a:	eba3 030b 	sub.w	r3, r3, fp
 800677e:	9f07      	ldr	r7, [sp, #28]
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	2300      	movs	r3, #0
 8006784:	461e      	mov	r6, r3
 8006786:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	461d      	mov	r5, r3
 800678e:	930c      	str	r3, [sp, #48]	; 0x30
 8006790:	f7ff b94c 	b.w	8005a2c <_svfprintf_r+0x62c>
 8006794:	0800951a 	.word	0x0800951a
 8006798:	0800950a 	.word	0x0800950a

0800679c <_fclose_r>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4606      	mov	r6, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	b911      	cbnz	r1, 80067aa <_fclose_r+0xe>
 80067a4:	2500      	movs	r5, #0
 80067a6:	4628      	mov	r0, r5
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	b118      	cbz	r0, 80067b4 <_fclose_r+0x18>
 80067ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067ae:	b90b      	cbnz	r3, 80067b4 <_fclose_r+0x18>
 80067b0:	f7fe f9a6 	bl	8004b00 <__sinit>
 80067b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b6:	07d8      	lsls	r0, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_fclose_r+0x2a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	0599      	lsls	r1, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_fclose_r+0x2a>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f7fe fab1 	bl	8004d28 <__retarget_lock_acquire_recursive>
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	b93b      	cbnz	r3, 80067dc <_fclose_r+0x40>
 80067cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80067ce:	f015 0501 	ands.w	r5, r5, #1
 80067d2:	d1e7      	bne.n	80067a4 <_fclose_r+0x8>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f7fe faa8 	bl	8004d2a <__retarget_lock_release_recursive>
 80067da:	e7e4      	b.n	80067a6 <_fclose_r+0xa>
 80067dc:	4621      	mov	r1, r4
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f834 	bl	800684c <__sflush_r>
 80067e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067e6:	4605      	mov	r5, r0
 80067e8:	b133      	cbz	r3, 80067f8 <_fclose_r+0x5c>
 80067ea:	4630      	mov	r0, r6
 80067ec:	69e1      	ldr	r1, [r4, #28]
 80067ee:	4798      	blx	r3
 80067f0:	2800      	cmp	r0, #0
 80067f2:	bfb8      	it	lt
 80067f4:	f04f 35ff 	movlt.w	r5, #4294967295
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	061a      	lsls	r2, r3, #24
 80067fc:	d503      	bpl.n	8006806 <_fclose_r+0x6a>
 80067fe:	4630      	mov	r0, r6
 8006800:	6921      	ldr	r1, [r4, #16]
 8006802:	f7fe faf7 	bl	8004df4 <_free_r>
 8006806:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006808:	b141      	cbz	r1, 800681c <_fclose_r+0x80>
 800680a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800680e:	4299      	cmp	r1, r3
 8006810:	d002      	beq.n	8006818 <_fclose_r+0x7c>
 8006812:	4630      	mov	r0, r6
 8006814:	f7fe faee 	bl	8004df4 <_free_r>
 8006818:	2300      	movs	r3, #0
 800681a:	6323      	str	r3, [r4, #48]	; 0x30
 800681c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800681e:	b121      	cbz	r1, 800682a <_fclose_r+0x8e>
 8006820:	4630      	mov	r0, r6
 8006822:	f7fe fae7 	bl	8004df4 <_free_r>
 8006826:	2300      	movs	r3, #0
 8006828:	6463      	str	r3, [r4, #68]	; 0x44
 800682a:	f7fe f95d 	bl	8004ae8 <__sfp_lock_acquire>
 800682e:	2300      	movs	r3, #0
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006834:	07db      	lsls	r3, r3, #31
 8006836:	d402      	bmi.n	800683e <_fclose_r+0xa2>
 8006838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683a:	f7fe fa76 	bl	8004d2a <__retarget_lock_release_recursive>
 800683e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006840:	f7fe fa71 	bl	8004d26 <__retarget_lock_close_recursive>
 8006844:	f7fe f956 	bl	8004af4 <__sfp_lock_release>
 8006848:	e7ad      	b.n	80067a6 <_fclose_r+0xa>
	...

0800684c <__sflush_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	898b      	ldrh	r3, [r1, #12]
 8006850:	4605      	mov	r5, r0
 8006852:	0718      	lsls	r0, r3, #28
 8006854:	460c      	mov	r4, r1
 8006856:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800685a:	d45e      	bmi.n	800691a <__sflush_r+0xce>
 800685c:	684b      	ldr	r3, [r1, #4]
 800685e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006862:	2b00      	cmp	r3, #0
 8006864:	818a      	strh	r2, [r1, #12]
 8006866:	dc04      	bgt.n	8006872 <__sflush_r+0x26>
 8006868:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800686a:	2b00      	cmp	r3, #0
 800686c:	dc01      	bgt.n	8006872 <__sflush_r+0x26>
 800686e:	2000      	movs	r0, #0
 8006870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006874:	2e00      	cmp	r6, #0
 8006876:	d0fa      	beq.n	800686e <__sflush_r+0x22>
 8006878:	2300      	movs	r3, #0
 800687a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800687e:	682f      	ldr	r7, [r5, #0]
 8006880:	69e1      	ldr	r1, [r4, #28]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	d036      	beq.n	80068f4 <__sflush_r+0xa8>
 8006886:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	075a      	lsls	r2, r3, #29
 800688c:	d505      	bpl.n	800689a <__sflush_r+0x4e>
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	1ac0      	subs	r0, r0, r3
 8006892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006894:	b10b      	cbz	r3, 800689a <__sflush_r+0x4e>
 8006896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006898:	1ac0      	subs	r0, r0, r3
 800689a:	2300      	movs	r3, #0
 800689c:	4602      	mov	r2, r0
 800689e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068a0:	4628      	mov	r0, r5
 80068a2:	69e1      	ldr	r1, [r4, #28]
 80068a4:	47b0      	blx	r6
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	d106      	bne.n	80068ba <__sflush_r+0x6e>
 80068ac:	6829      	ldr	r1, [r5, #0]
 80068ae:	291d      	cmp	r1, #29
 80068b0:	d82f      	bhi.n	8006912 <__sflush_r+0xc6>
 80068b2:	4a2a      	ldr	r2, [pc, #168]	; (800695c <__sflush_r+0x110>)
 80068b4:	410a      	asrs	r2, r1
 80068b6:	07d6      	lsls	r6, r2, #31
 80068b8:	d42b      	bmi.n	8006912 <__sflush_r+0xc6>
 80068ba:	2200      	movs	r2, #0
 80068bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c0:	b21b      	sxth	r3, r3
 80068c2:	6062      	str	r2, [r4, #4]
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	04d9      	lsls	r1, r3, #19
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	6022      	str	r2, [r4, #0]
 80068cc:	d504      	bpl.n	80068d8 <__sflush_r+0x8c>
 80068ce:	1c42      	adds	r2, r0, #1
 80068d0:	d101      	bne.n	80068d6 <__sflush_r+0x8a>
 80068d2:	682b      	ldr	r3, [r5, #0]
 80068d4:	b903      	cbnz	r3, 80068d8 <__sflush_r+0x8c>
 80068d6:	6520      	str	r0, [r4, #80]	; 0x50
 80068d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068da:	602f      	str	r7, [r5, #0]
 80068dc:	2900      	cmp	r1, #0
 80068de:	d0c6      	beq.n	800686e <__sflush_r+0x22>
 80068e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80068e4:	4299      	cmp	r1, r3
 80068e6:	d002      	beq.n	80068ee <__sflush_r+0xa2>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7fe fa83 	bl	8004df4 <_free_r>
 80068ee:	2000      	movs	r0, #0
 80068f0:	6320      	str	r0, [r4, #48]	; 0x30
 80068f2:	e7bd      	b.n	8006870 <__sflush_r+0x24>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b0      	blx	r6
 80068fa:	1c41      	adds	r1, r0, #1
 80068fc:	d1c4      	bne.n	8006888 <__sflush_r+0x3c>
 80068fe:	682b      	ldr	r3, [r5, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0c1      	beq.n	8006888 <__sflush_r+0x3c>
 8006904:	2b1d      	cmp	r3, #29
 8006906:	d001      	beq.n	800690c <__sflush_r+0xc0>
 8006908:	2b16      	cmp	r3, #22
 800690a:	d101      	bne.n	8006910 <__sflush_r+0xc4>
 800690c:	602f      	str	r7, [r5, #0]
 800690e:	e7ae      	b.n	800686e <__sflush_r+0x22>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	e7aa      	b.n	8006870 <__sflush_r+0x24>
 800691a:	690f      	ldr	r7, [r1, #16]
 800691c:	2f00      	cmp	r7, #0
 800691e:	d0a6      	beq.n	800686e <__sflush_r+0x22>
 8006920:	079b      	lsls	r3, r3, #30
 8006922:	bf18      	it	ne
 8006924:	2300      	movne	r3, #0
 8006926:	680e      	ldr	r6, [r1, #0]
 8006928:	bf08      	it	eq
 800692a:	694b      	ldreq	r3, [r1, #20]
 800692c:	1bf6      	subs	r6, r6, r7
 800692e:	600f      	str	r7, [r1, #0]
 8006930:	608b      	str	r3, [r1, #8]
 8006932:	2e00      	cmp	r6, #0
 8006934:	dd9b      	ble.n	800686e <__sflush_r+0x22>
 8006936:	4633      	mov	r3, r6
 8006938:	463a      	mov	r2, r7
 800693a:	4628      	mov	r0, r5
 800693c:	69e1      	ldr	r1, [r4, #28]
 800693e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8006942:	47e0      	blx	ip
 8006944:	2800      	cmp	r0, #0
 8006946:	dc06      	bgt.n	8006956 <__sflush_r+0x10a>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	e78c      	b.n	8006870 <__sflush_r+0x24>
 8006956:	4407      	add	r7, r0
 8006958:	1a36      	subs	r6, r6, r0
 800695a:	e7ea      	b.n	8006932 <__sflush_r+0xe6>
 800695c:	dfbffffe 	.word	0xdfbffffe

08006960 <_fflush_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	460c      	mov	r4, r1
 8006964:	4605      	mov	r5, r0
 8006966:	b118      	cbz	r0, 8006970 <_fflush_r+0x10>
 8006968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800696a:	b90b      	cbnz	r3, 8006970 <_fflush_r+0x10>
 800696c:	f7fe f8c8 	bl	8004b00 <__sinit>
 8006970:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8006974:	b1b8      	cbz	r0, 80069a6 <_fflush_r+0x46>
 8006976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006978:	07db      	lsls	r3, r3, #31
 800697a:	d404      	bmi.n	8006986 <_fflush_r+0x26>
 800697c:	0581      	lsls	r1, r0, #22
 800697e:	d402      	bmi.n	8006986 <_fflush_r+0x26>
 8006980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006982:	f7fe f9d1 	bl	8004d28 <__retarget_lock_acquire_recursive>
 8006986:	4628      	mov	r0, r5
 8006988:	4621      	mov	r1, r4
 800698a:	f7ff ff5f 	bl	800684c <__sflush_r>
 800698e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006990:	4605      	mov	r5, r0
 8006992:	07da      	lsls	r2, r3, #31
 8006994:	d405      	bmi.n	80069a2 <_fflush_r+0x42>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	059b      	lsls	r3, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_fflush_r+0x42>
 800699c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800699e:	f7fe f9c4 	bl	8004d2a <__retarget_lock_release_recursive>
 80069a2:	4628      	mov	r0, r5
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	4605      	mov	r5, r0
 80069a8:	e7fb      	b.n	80069a2 <_fflush_r+0x42>

080069aa <strncpy>:
 80069aa:	4603      	mov	r3, r0
 80069ac:	b510      	push	{r4, lr}
 80069ae:	3901      	subs	r1, #1
 80069b0:	b132      	cbz	r2, 80069c0 <strncpy+0x16>
 80069b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80069b6:	3a01      	subs	r2, #1
 80069b8:	f803 4b01 	strb.w	r4, [r3], #1
 80069bc:	2c00      	cmp	r4, #0
 80069be:	d1f7      	bne.n	80069b0 <strncpy+0x6>
 80069c0:	2100      	movs	r1, #0
 80069c2:	441a      	add	r2, r3
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d100      	bne.n	80069ca <strncpy+0x20>
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	f803 1b01 	strb.w	r1, [r3], #1
 80069ce:	e7f9      	b.n	80069c4 <strncpy+0x1a>

080069d0 <_localeconv_r>:
 80069d0:	4800      	ldr	r0, [pc, #0]	; (80069d4 <_localeconv_r+0x4>)
 80069d2:	4770      	bx	lr
 80069d4:	20000648 	.word	0x20000648

080069d8 <_sbrk_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	2300      	movs	r3, #0
 80069dc:	4d05      	ldr	r5, [pc, #20]	; (80069f4 <_sbrk_r+0x1c>)
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fb f820 	bl	8001a28 <_sbrk>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_sbrk_r+0x1a>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_sbrk_r+0x1a>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000c28 	.word	0x20000c28

080069f8 <__libc_fini_array>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <__libc_fini_array+0x20>)
 80069fc:	4c07      	ldr	r4, [pc, #28]	; (8006a1c <__libc_fini_array+0x24>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	b91c      	cbnz	r4, 8006a0c <__libc_fini_array+0x14>
 8006a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a08:	f002 bd34 	b.w	8009474 <_fini>
 8006a0c:	3c01      	subs	r4, #1
 8006a0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006a12:	4798      	blx	r3
 8006a14:	e7f5      	b.n	8006a02 <__libc_fini_array+0xa>
 8006a16:	bf00      	nop
 8006a18:	08009874 	.word	0x08009874
 8006a1c:	08009878 	.word	0x08009878

08006a20 <sysconf>:
 8006a20:	2808      	cmp	r0, #8
 8006a22:	b508      	push	{r3, lr}
 8006a24:	d006      	beq.n	8006a34 <sysconf+0x14>
 8006a26:	f7fe f953 	bl	8004cd0 <__errno>
 8006a2a:	2316      	movs	r3, #22
 8006a2c:	6003      	str	r3, [r0, #0]
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	bd08      	pop	{r3, pc}
 8006a34:	2080      	movs	r0, #128	; 0x80
 8006a36:	e7fc      	b.n	8006a32 <sysconf+0x12>

08006a38 <memchr>:
 8006a38:	4603      	mov	r3, r0
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	b2c9      	uxtb	r1, r1
 8006a3e:	4402      	add	r2, r0
 8006a40:	4293      	cmp	r3, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	d101      	bne.n	8006a4a <memchr+0x12>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e003      	b.n	8006a52 <memchr+0x1a>
 8006a4a:	7804      	ldrb	r4, [r0, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	428c      	cmp	r4, r1
 8006a50:	d1f6      	bne.n	8006a40 <memchr+0x8>
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <frexp>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	4617      	mov	r7, r2
 8006a58:	2200      	movs	r2, #0
 8006a5a:	603a      	str	r2, [r7, #0]
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <frexp+0x5c>)
 8006a5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a62:	4296      	cmp	r6, r2
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	460b      	mov	r3, r1
 8006a6a:	dc1e      	bgt.n	8006aaa <frexp+0x56>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4332      	orrs	r2, r6
 8006a70:	d01b      	beq.n	8006aaa <frexp+0x56>
 8006a72:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <frexp+0x60>)
 8006a74:	400a      	ands	r2, r1
 8006a76:	b952      	cbnz	r2, 8006a8e <frexp+0x3a>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <frexp+0x64>)
 8006a7c:	f7f9 fd2c 	bl	80004d8 <__aeabi_dmul>
 8006a80:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8006a84:	4604      	mov	r4, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a8c:	603a      	str	r2, [r7, #0]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	1536      	asrs	r6, r6, #20
 8006a92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a96:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8006a9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a9e:	4432      	add	r2, r6
 8006aa0:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006aa4:	603a      	str	r2, [r7, #0]
 8006aa6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	7fefffff 	.word	0x7fefffff
 8006ab4:	7ff00000 	.word	0x7ff00000
 8006ab8:	43500000 	.word	0x43500000

08006abc <__register_exitproc>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8006b30 <__register_exitproc+0x74>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	f8da 0000 	ldr.w	r0, [sl]
 8006aca:	4698      	mov	r8, r3
 8006acc:	460f      	mov	r7, r1
 8006ace:	4691      	mov	r9, r2
 8006ad0:	f7fe f92a 	bl	8004d28 <__retarget_lock_acquire_recursive>
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <__register_exitproc+0x78>)
 8006ad6:	681c      	ldr	r4, [r3, #0]
 8006ad8:	b90c      	cbnz	r4, 8006ade <__register_exitproc+0x22>
 8006ada:	4c17      	ldr	r4, [pc, #92]	; (8006b38 <__register_exitproc+0x7c>)
 8006adc:	601c      	str	r4, [r3, #0]
 8006ade:	6865      	ldr	r5, [r4, #4]
 8006ae0:	f8da 0000 	ldr.w	r0, [sl]
 8006ae4:	2d1f      	cmp	r5, #31
 8006ae6:	dd05      	ble.n	8006af4 <__register_exitproc+0x38>
 8006ae8:	f7fe f91f 	bl	8004d2a <__retarget_lock_release_recursive>
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	b19e      	cbz	r6, 8006b1e <__register_exitproc+0x62>
 8006af6:	2201      	movs	r2, #1
 8006af8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006afc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006b00:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8006b04:	40aa      	lsls	r2, r5
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8006b0c:	2e02      	cmp	r6, #2
 8006b0e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8006b12:	bf02      	ittt	eq
 8006b14:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8006b18:	4313      	orreq	r3, r2
 8006b1a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8006b1e:	1c6b      	adds	r3, r5, #1
 8006b20:	3502      	adds	r5, #2
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006b28:	f7fe f8ff 	bl	8004d2a <__retarget_lock_release_recursive>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e7df      	b.n	8006af0 <__register_exitproc+0x34>
 8006b30:	20000144 	.word	0x20000144
 8006b34:	20000c30 	.word	0x20000c30
 8006b38:	20000c68 	.word	0x20000c68

08006b3c <quorem>:
 8006b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	6903      	ldr	r3, [r0, #16]
 8006b42:	690c      	ldr	r4, [r1, #16]
 8006b44:	4607      	mov	r7, r0
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	db7f      	blt.n	8006c4a <quorem+0x10e>
 8006b4a:	3c01      	subs	r4, #1
 8006b4c:	f100 0514 	add.w	r5, r0, #20
 8006b50:	f101 0814 	add.w	r8, r1, #20
 8006b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b62:	3301      	adds	r3, #1
 8006b64:	429a      	cmp	r2, r3
 8006b66:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b72:	d331      	bcc.n	8006bd8 <quorem+0x9c>
 8006b74:	f04f 0e00 	mov.w	lr, #0
 8006b78:	4640      	mov	r0, r8
 8006b7a:	46ac      	mov	ip, r5
 8006b7c:	46f2      	mov	sl, lr
 8006b7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b82:	b293      	uxth	r3, r2
 8006b84:	fb06 e303 	mla	r3, r6, r3, lr
 8006b88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b8c:	0c1a      	lsrs	r2, r3, #16
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	fb06 220e 	mla	r2, r6, lr, r2
 8006b94:	ebaa 0303 	sub.w	r3, sl, r3
 8006b98:	f8dc a000 	ldr.w	sl, [ip]
 8006b9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ba0:	fa1f fa8a 	uxth.w	sl, sl
 8006ba4:	4453      	add	r3, sl
 8006ba6:	f8dc a000 	ldr.w	sl, [ip]
 8006baa:	b292      	uxth	r2, r2
 8006bac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bba:	4581      	cmp	r9, r0
 8006bbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bc0:	f84c 3b04 	str.w	r3, [ip], #4
 8006bc4:	d2db      	bcs.n	8006b7e <quorem+0x42>
 8006bc6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bca:	b92b      	cbnz	r3, 8006bd8 <quorem+0x9c>
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	3b04      	subs	r3, #4
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	d32d      	bcc.n	8006c32 <quorem+0xf6>
 8006bd6:	613c      	str	r4, [r7, #16]
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f001 f82d 	bl	8007c38 <__mcmp>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	db23      	blt.n	8006c2a <quorem+0xee>
 8006be2:	4629      	mov	r1, r5
 8006be4:	2000      	movs	r0, #0
 8006be6:	3601      	adds	r6, #1
 8006be8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bec:	f8d1 c000 	ldr.w	ip, [r1]
 8006bf0:	b293      	uxth	r3, r2
 8006bf2:	1ac3      	subs	r3, r0, r3
 8006bf4:	0c12      	lsrs	r2, r2, #16
 8006bf6:	fa1f f08c 	uxth.w	r0, ip
 8006bfa:	4403      	add	r3, r0
 8006bfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c0a:	45c1      	cmp	r9, r8
 8006c0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c10:	f841 3b04 	str.w	r3, [r1], #4
 8006c14:	d2e8      	bcs.n	8006be8 <quorem+0xac>
 8006c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c1e:	b922      	cbnz	r2, 8006c2a <quorem+0xee>
 8006c20:	3b04      	subs	r3, #4
 8006c22:	429d      	cmp	r5, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	d30a      	bcc.n	8006c3e <quorem+0x102>
 8006c28:	613c      	str	r4, [r7, #16]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	b003      	add	sp, #12
 8006c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	d1cd      	bne.n	8006bd6 <quorem+0x9a>
 8006c3a:	3c01      	subs	r4, #1
 8006c3c:	e7c8      	b.n	8006bd0 <quorem+0x94>
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d1f0      	bne.n	8006c28 <quorem+0xec>
 8006c46:	3c01      	subs	r4, #1
 8006c48:	e7eb      	b.n	8006c22 <quorem+0xe6>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e7ee      	b.n	8006c2c <quorem+0xf0>
	...

08006c50 <_dtoa_r>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006c56:	b097      	sub	sp, #92	; 0x5c
 8006c58:	4681      	mov	r9, r0
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	4692      	mov	sl, r2
 8006c60:	469b      	mov	fp, r3
 8006c62:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8006c64:	b149      	cbz	r1, 8006c7a <_dtoa_r+0x2a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c6a:	4093      	lsls	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
 8006c6e:	604a      	str	r2, [r1, #4]
 8006c70:	f000 fddb 	bl	800782a <_Bfree>
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8006c7a:	1e2b      	subs	r3, r5, #0
 8006c7c:	bfad      	iteet	ge
 8006c7e:	2300      	movge	r3, #0
 8006c80:	2201      	movlt	r2, #1
 8006c82:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006c86:	6033      	strge	r3, [r6, #0]
 8006c88:	4ba3      	ldr	r3, [pc, #652]	; (8006f18 <_dtoa_r+0x2c8>)
 8006c8a:	bfb8      	it	lt
 8006c8c:	6032      	strlt	r2, [r6, #0]
 8006c8e:	ea33 030b 	bics.w	r3, r3, fp
 8006c92:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c96:	d119      	bne.n	8006ccc <_dtoa_r+0x7c>
 8006c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ca4:	4323      	orrs	r3, r4
 8006ca6:	f000 8586 	beq.w	80077b6 <_dtoa_r+0xb66>
 8006caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cac:	b90b      	cbnz	r3, 8006cb2 <_dtoa_r+0x62>
 8006cae:	4b9b      	ldr	r3, [pc, #620]	; (8006f1c <_dtoa_r+0x2cc>)
 8006cb0:	e021      	b.n	8006cf6 <_dtoa_r+0xa6>
 8006cb2:	4b9a      	ldr	r3, [pc, #616]	; (8006f1c <_dtoa_r+0x2cc>)
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	3303      	adds	r3, #3
 8006cb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	9804      	ldr	r0, [sp, #16]
 8006cbe:	b017      	add	sp, #92	; 0x5c
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	4b96      	ldr	r3, [pc, #600]	; (8006f20 <_dtoa_r+0x2d0>)
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	e7f5      	b.n	8006cb8 <_dtoa_r+0x68>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8006cd8:	f7f9 fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8006cdc:	4607      	mov	r7, r0
 8006cde:	b160      	cbz	r0, 8006cfa <_dtoa_r+0xaa>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8561 	beq.w	80077b0 <_dtoa_r+0xb60>
 8006cee:	4b8d      	ldr	r3, [pc, #564]	; (8006f24 <_dtoa_r+0x2d4>)
 8006cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	e7e0      	b.n	8006cbc <_dtoa_r+0x6c>
 8006cfa:	ab14      	add	r3, sp, #80	; 0x50
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	ab15      	add	r3, sp, #84	; 0x54
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	4648      	mov	r0, r9
 8006d04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d08:	f001 f83e 	bl	8007d88 <__d2b>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	4680      	mov	r8, r0
 8006d10:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8006d14:	2e00      	cmp	r6, #0
 8006d16:	f000 8082 	beq.w	8006e1e <_dtoa_r+0x1ce>
 8006d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d20:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8006d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d30:	9713      	str	r7, [sp, #76]	; 0x4c
 8006d32:	4619      	mov	r1, r3
 8006d34:	2200      	movs	r2, #0
 8006d36:	4b7c      	ldr	r3, [pc, #496]	; (8006f28 <_dtoa_r+0x2d8>)
 8006d38:	f7f9 fa16 	bl	8000168 <__aeabi_dsub>
 8006d3c:	a370      	add	r3, pc, #448	; (adr r3, 8006f00 <_dtoa_r+0x2b0>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fbc9 	bl	80004d8 <__aeabi_dmul>
 8006d46:	a370      	add	r3, pc, #448	; (adr r3, 8006f08 <_dtoa_r+0x2b8>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fa0e 	bl	800016c <__adddf3>
 8006d50:	4604      	mov	r4, r0
 8006d52:	4630      	mov	r0, r6
 8006d54:	460d      	mov	r5, r1
 8006d56:	f7f9 fb55 	bl	8000404 <__aeabi_i2d>
 8006d5a:	a36d      	add	r3, pc, #436	; (adr r3, 8006f10 <_dtoa_r+0x2c0>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f7f9 fbba 	bl	80004d8 <__aeabi_dmul>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4620      	mov	r0, r4
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	f7f9 f9fe 	bl	800016c <__adddf3>
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	f7f9 fe60 	bl	8000a38 <__aeabi_d2iz>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	9003      	str	r0, [sp, #12]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fe1b 	bl	80009bc <__aeabi_dcmplt>
 8006d86:	b150      	cbz	r0, 8006d9e <_dtoa_r+0x14e>
 8006d88:	9803      	ldr	r0, [sp, #12]
 8006d8a:	f7f9 fb3b 	bl	8000404 <__aeabi_i2d>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 fe09 	bl	80009a8 <__aeabi_dcmpeq>
 8006d96:	b910      	cbnz	r0, 8006d9e <_dtoa_r+0x14e>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	9303      	str	r3, [sp, #12]
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	2b16      	cmp	r3, #22
 8006da2:	d85a      	bhi.n	8006e5a <_dtoa_r+0x20a>
 8006da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006da8:	9a03      	ldr	r2, [sp, #12]
 8006daa:	4b60      	ldr	r3, [pc, #384]	; (8006f2c <_dtoa_r+0x2dc>)
 8006dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fe02 	bl	80009bc <__aeabi_dcmplt>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d050      	beq.n	8006e5e <_dtoa_r+0x20e>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9311      	str	r3, [sp, #68]	; 0x44
 8006dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dc8:	1b9b      	subs	r3, r3, r6
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	bf49      	itett	mi
 8006dce:	f1c3 0301 	rsbmi	r3, r3, #1
 8006dd2:	2300      	movpl	r3, #0
 8006dd4:	9306      	strmi	r3, [sp, #24]
 8006dd6:	2300      	movmi	r3, #0
 8006dd8:	bf58      	it	pl
 8006dda:	9306      	strpl	r3, [sp, #24]
 8006ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dde:	bf48      	it	mi
 8006de0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db3c      	blt.n	8006e62 <_dtoa_r+0x212>
 8006de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dea:	9a03      	ldr	r2, [sp, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	2300      	movs	r3, #0
 8006df2:	9210      	str	r2, [sp, #64]	; 0x40
 8006df4:	930a      	str	r3, [sp, #40]	; 0x28
 8006df6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006df8:	2b09      	cmp	r3, #9
 8006dfa:	d86a      	bhi.n	8006ed2 <_dtoa_r+0x282>
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	bfc4      	itt	gt
 8006e00:	3b04      	subgt	r3, #4
 8006e02:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e06:	bfc8      	it	gt
 8006e08:	2400      	movgt	r4, #0
 8006e0a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e0e:	bfd8      	it	le
 8006e10:	2401      	movle	r4, #1
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d868      	bhi.n	8006ee8 <_dtoa_r+0x298>
 8006e16:	e8df f003 	tbb	[pc, r3]
 8006e1a:	3a2d      	.short	0x3a2d
 8006e1c:	5a38      	.short	0x5a38
 8006e1e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8006e22:	441e      	add	r6, r3
 8006e24:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	bfc1      	itttt	gt
 8006e2c:	9a03      	ldrgt	r2, [sp, #12]
 8006e2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e32:	409a      	lslgt	r2, r3
 8006e34:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 8006e38:	bfcb      	itete	gt
 8006e3a:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e3e:	f1c3 0320 	rsble	r3, r3, #32
 8006e42:	ea42 0003 	orrgt.w	r0, r2, r3
 8006e46:	fa04 f003 	lslle.w	r0, r4, r3
 8006e4a:	f7f9 facb 	bl	80003e4 <__aeabi_ui2d>
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e54:	3e01      	subs	r6, #1
 8006e56:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e58:	e76b      	b.n	8006d32 <_dtoa_r+0xe2>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e7b2      	b.n	8006dc4 <_dtoa_r+0x174>
 8006e5e:	9011      	str	r0, [sp, #68]	; 0x44
 8006e60:	e7b1      	b.n	8006dc6 <_dtoa_r+0x176>
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	9a03      	ldr	r2, [sp, #12]
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	9306      	str	r3, [sp, #24]
 8006e6a:	4253      	negs	r3, r2
 8006e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9310      	str	r3, [sp, #64]	; 0x40
 8006e72:	e7c0      	b.n	8006df6 <_dtoa_r+0x1a6>
 8006e74:	2300      	movs	r3, #0
 8006e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dc37      	bgt.n	8006eee <_dtoa_r+0x29e>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	461a      	mov	r2, r3
 8006e82:	9308      	str	r3, [sp, #32]
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	9221      	str	r2, [sp, #132]	; 0x84
 8006e88:	e00c      	b.n	8006ea4 <_dtoa_r+0x254>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7f3      	b.n	8006e76 <_dtoa_r+0x226>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	9308      	str	r3, [sp, #32]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	bfb8      	it	lt
 8006ea2:	2301      	movlt	r3, #1
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	f102 0014 	add.w	r0, r2, #20
 8006eac:	4298      	cmp	r0, r3
 8006eae:	d922      	bls.n	8006ef6 <_dtoa_r+0x2a6>
 8006eb0:	4648      	mov	r0, r9
 8006eb2:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
 8006eb6:	f000 fc93 	bl	80077e0 <_Balloc>
 8006eba:	9004      	str	r0, [sp, #16]
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d13b      	bne.n	8006f38 <_dtoa_r+0x2e8>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	f240 11af 	movw	r1, #431	; 0x1af
 8006ec6:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <_dtoa_r+0x2e0>)
 8006ec8:	481a      	ldr	r0, [pc, #104]	; (8006f34 <_dtoa_r+0x2e4>)
 8006eca:	f001 f85f 	bl	8007f8c <__assert_func>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7de      	b.n	8006e90 <_dtoa_r+0x240>
 8006ed2:	2401      	movs	r4, #1
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	940b      	str	r4, [sp, #44]	; 0x2c
 8006ed8:	9320      	str	r3, [sp, #128]	; 0x80
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	2200      	movs	r2, #0
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	2312      	movs	r3, #18
 8006ee6:	e7ce      	b.n	8006e86 <_dtoa_r+0x236>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eec:	e7f5      	b.n	8006eda <_dtoa_r+0x28a>
 8006eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef0:	9308      	str	r3, [sp, #32]
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	e7d6      	b.n	8006ea4 <_dtoa_r+0x254>
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	0052      	lsls	r2, r2, #1
 8006efa:	e7d5      	b.n	8006ea8 <_dtoa_r+0x258>
 8006efc:	f3af 8000 	nop.w
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	08009533 	.word	0x08009533
 8006f20:	0800952a 	.word	0x0800952a
 8006f24:	08009509 	.word	0x08009509
 8006f28:	3ff80000 	.word	0x3ff80000
 8006f2c:	08009628 	.word	0x08009628
 8006f30:	08009537 	.word	0x08009537
 8006f34:	08009548 	.word	0x08009548
 8006f38:	9b04      	ldr	r3, [sp, #16]
 8006f3a:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8006f3e:	9b05      	ldr	r3, [sp, #20]
 8006f40:	2b0e      	cmp	r3, #14
 8006f42:	f200 80a2 	bhi.w	800708a <_dtoa_r+0x43a>
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	f000 809f 	beq.w	800708a <_dtoa_r+0x43a>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dd35      	ble.n	8006fbe <_dtoa_r+0x36e>
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	4b96      	ldr	r3, [pc, #600]	; (80071b0 <_dtoa_r+0x560>)
 8006f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	05d8      	lsls	r0, r3, #23
 8006f64:	ea4f 1623 	mov.w	r6, r3, asr #4
 8006f68:	d517      	bpl.n	8006f9a <_dtoa_r+0x34a>
 8006f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f6e:	4b91      	ldr	r3, [pc, #580]	; (80071b4 <_dtoa_r+0x564>)
 8006f70:	2703      	movs	r7, #3
 8006f72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f76:	f7f9 fbd9 	bl	800072c <__aeabi_ddiv>
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	468b      	mov	fp, r1
 8006f7e:	f006 060f 	and.w	r6, r6, #15
 8006f82:	4b8c      	ldr	r3, [pc, #560]	; (80071b4 <_dtoa_r+0x564>)
 8006f84:	930e      	str	r3, [sp, #56]	; 0x38
 8006f86:	b956      	cbnz	r6, 8006f9e <_dtoa_r+0x34e>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 fbcc 	bl	800072c <__aeabi_ddiv>
 8006f94:	4682      	mov	sl, r0
 8006f96:	468b      	mov	fp, r1
 8006f98:	e02a      	b.n	8006ff0 <_dtoa_r+0x3a0>
 8006f9a:	2702      	movs	r7, #2
 8006f9c:	e7f1      	b.n	8006f82 <_dtoa_r+0x332>
 8006f9e:	07f1      	lsls	r1, r6, #31
 8006fa0:	d509      	bpl.n	8006fb6 <_dtoa_r+0x366>
 8006fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 fa94 	bl	80004d8 <__aeabi_dmul>
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	3701      	adds	r7, #1
 8006fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb8:	1076      	asrs	r6, r6, #1
 8006fba:	3308      	adds	r3, #8
 8006fbc:	e7e2      	b.n	8006f84 <_dtoa_r+0x334>
 8006fbe:	f000 809f 	beq.w	8007100 <_dtoa_r+0x4b0>
 8006fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	2702      	movs	r7, #2
 8006fca:	425c      	negs	r4, r3
 8006fcc:	4b78      	ldr	r3, [pc, #480]	; (80071b0 <_dtoa_r+0x560>)
 8006fce:	f004 020f 	and.w	r2, r4, #15
 8006fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 fa7d 	bl	80004d8 <__aeabi_dmul>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	468b      	mov	fp, r1
 8006fe4:	4d73      	ldr	r5, [pc, #460]	; (80071b4 <_dtoa_r+0x564>)
 8006fe6:	1124      	asrs	r4, r4, #4
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d17e      	bne.n	80070ea <_dtoa_r+0x49a>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1d1      	bne.n	8006f94 <_dtoa_r+0x344>
 8006ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ff2:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8084 	beq.w	8007104 <_dtoa_r+0x4b4>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4650      	mov	r0, sl
 8007000:	4659      	mov	r1, fp
 8007002:	4b6d      	ldr	r3, [pc, #436]	; (80071b8 <_dtoa_r+0x568>)
 8007004:	f7f9 fcda 	bl	80009bc <__aeabi_dcmplt>
 8007008:	2800      	cmp	r0, #0
 800700a:	d07b      	beq.n	8007104 <_dtoa_r+0x4b4>
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d078      	beq.n	8007104 <_dtoa_r+0x4b4>
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd36      	ble.n	8007086 <_dtoa_r+0x436>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	4650      	mov	r0, sl
 800701c:	4659      	mov	r1, fp
 800701e:	2200      	movs	r2, #0
 8007020:	1e5d      	subs	r5, r3, #1
 8007022:	4b66      	ldr	r3, [pc, #408]	; (80071bc <_dtoa_r+0x56c>)
 8007024:	f7f9 fa58 	bl	80004d8 <__aeabi_dmul>
 8007028:	4682      	mov	sl, r0
 800702a:	468b      	mov	fp, r1
 800702c:	9c08      	ldr	r4, [sp, #32]
 800702e:	3701      	adds	r7, #1
 8007030:	4638      	mov	r0, r7
 8007032:	f7f9 f9e7 	bl	8000404 <__aeabi_i2d>
 8007036:	4652      	mov	r2, sl
 8007038:	465b      	mov	r3, fp
 800703a:	f7f9 fa4d 	bl	80004d8 <__aeabi_dmul>
 800703e:	2200      	movs	r2, #0
 8007040:	4b5f      	ldr	r3, [pc, #380]	; (80071c0 <_dtoa_r+0x570>)
 8007042:	f7f9 f893 	bl	800016c <__adddf3>
 8007046:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800704a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800704e:	960f      	str	r6, [sp, #60]	; 0x3c
 8007050:	2c00      	cmp	r4, #0
 8007052:	d15a      	bne.n	800710a <_dtoa_r+0x4ba>
 8007054:	2200      	movs	r2, #0
 8007056:	4650      	mov	r0, sl
 8007058:	4659      	mov	r1, fp
 800705a:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <_dtoa_r+0x574>)
 800705c:	f7f9 f884 	bl	8000168 <__aeabi_dsub>
 8007060:	4633      	mov	r3, r6
 8007062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007064:	4682      	mov	sl, r0
 8007066:	468b      	mov	fp, r1
 8007068:	f7f9 fcc6 	bl	80009f8 <__aeabi_dcmpgt>
 800706c:	2800      	cmp	r0, #0
 800706e:	f040 8295 	bne.w	800759c <_dtoa_r+0x94c>
 8007072:	4650      	mov	r0, sl
 8007074:	4659      	mov	r1, fp
 8007076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800707c:	f7f9 fc9e 	bl	80009bc <__aeabi_dcmplt>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 8289 	bne.w	8007598 <_dtoa_r+0x948>
 8007086:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 800708a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800708c:	2b00      	cmp	r3, #0
 800708e:	f2c0 814e 	blt.w	800732e <_dtoa_r+0x6de>
 8007092:	9a03      	ldr	r2, [sp, #12]
 8007094:	2a0e      	cmp	r2, #14
 8007096:	f300 814a 	bgt.w	800732e <_dtoa_r+0x6de>
 800709a:	4b45      	ldr	r3, [pc, #276]	; (80071b0 <_dtoa_r+0x560>)
 800709c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070a4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f280 80d7 	bge.w	800725e <_dtoa_r+0x60e>
 80070b0:	9b05      	ldr	r3, [sp, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f300 80d3 	bgt.w	800725e <_dtoa_r+0x60e>
 80070b8:	f040 826d 	bne.w	8007596 <_dtoa_r+0x946>
 80070bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c0:	2200      	movs	r2, #0
 80070c2:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <_dtoa_r+0x574>)
 80070c4:	f7f9 fa08 	bl	80004d8 <__aeabi_dmul>
 80070c8:	4652      	mov	r2, sl
 80070ca:	465b      	mov	r3, fp
 80070cc:	f7f9 fc8a 	bl	80009e4 <__aeabi_dcmpge>
 80070d0:	9c05      	ldr	r4, [sp, #20]
 80070d2:	4625      	mov	r5, r4
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 8246 	bne.w	8007566 <_dtoa_r+0x916>
 80070da:	2331      	movs	r3, #49	; 0x31
 80070dc:	9e04      	ldr	r6, [sp, #16]
 80070de:	f806 3b01 	strb.w	r3, [r6], #1
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	e241      	b.n	800756e <_dtoa_r+0x91e>
 80070ea:	07e2      	lsls	r2, r4, #31
 80070ec:	d505      	bpl.n	80070fa <_dtoa_r+0x4aa>
 80070ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	2301      	movs	r3, #1
 80070f8:	3701      	adds	r7, #1
 80070fa:	1064      	asrs	r4, r4, #1
 80070fc:	3508      	adds	r5, #8
 80070fe:	e773      	b.n	8006fe8 <_dtoa_r+0x398>
 8007100:	2702      	movs	r7, #2
 8007102:	e775      	b.n	8006ff0 <_dtoa_r+0x3a0>
 8007104:	9d03      	ldr	r5, [sp, #12]
 8007106:	9c05      	ldr	r4, [sp, #20]
 8007108:	e792      	b.n	8007030 <_dtoa_r+0x3e0>
 800710a:	9904      	ldr	r1, [sp, #16]
 800710c:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <_dtoa_r+0x560>)
 800710e:	4421      	add	r1, r4
 8007110:	9112      	str	r1, [sp, #72]	; 0x48
 8007112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007118:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800711c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007120:	2900      	cmp	r1, #0
 8007122:	d053      	beq.n	80071cc <_dtoa_r+0x57c>
 8007124:	2000      	movs	r0, #0
 8007126:	4928      	ldr	r1, [pc, #160]	; (80071c8 <_dtoa_r+0x578>)
 8007128:	f7f9 fb00 	bl	800072c <__aeabi_ddiv>
 800712c:	4632      	mov	r2, r6
 800712e:	463b      	mov	r3, r7
 8007130:	f7f9 f81a 	bl	8000168 <__aeabi_dsub>
 8007134:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007138:	9e04      	ldr	r6, [sp, #16]
 800713a:	4659      	mov	r1, fp
 800713c:	4650      	mov	r0, sl
 800713e:	f7f9 fc7b 	bl	8000a38 <__aeabi_d2iz>
 8007142:	4604      	mov	r4, r0
 8007144:	f7f9 f95e 	bl	8000404 <__aeabi_i2d>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4650      	mov	r0, sl
 800714e:	4659      	mov	r1, fp
 8007150:	f7f9 f80a 	bl	8000168 <__aeabi_dsub>
 8007154:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007158:	3430      	adds	r4, #48	; 0x30
 800715a:	f806 4b01 	strb.w	r4, [r6], #1
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	f7f9 fc2b 	bl	80009bc <__aeabi_dcmplt>
 8007166:	2800      	cmp	r0, #0
 8007168:	d171      	bne.n	800724e <_dtoa_r+0x5fe>
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	2000      	movs	r0, #0
 8007170:	4911      	ldr	r1, [pc, #68]	; (80071b8 <_dtoa_r+0x568>)
 8007172:	f7f8 fff9 	bl	8000168 <__aeabi_dsub>
 8007176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800717a:	f7f9 fc1f 	bl	80009bc <__aeabi_dcmplt>
 800717e:	2800      	cmp	r0, #0
 8007180:	f040 80b7 	bne.w	80072f2 <_dtoa_r+0x6a2>
 8007184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007186:	429e      	cmp	r6, r3
 8007188:	f43f af7d 	beq.w	8007086 <_dtoa_r+0x436>
 800718c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007190:	2200      	movs	r2, #0
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <_dtoa_r+0x56c>)
 8007194:	f7f9 f9a0 	bl	80004d8 <__aeabi_dmul>
 8007198:	2200      	movs	r2, #0
 800719a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800719e:	4b07      	ldr	r3, [pc, #28]	; (80071bc <_dtoa_r+0x56c>)
 80071a0:	4650      	mov	r0, sl
 80071a2:	4659      	mov	r1, fp
 80071a4:	f7f9 f998 	bl	80004d8 <__aeabi_dmul>
 80071a8:	4682      	mov	sl, r0
 80071aa:	468b      	mov	fp, r1
 80071ac:	e7c5      	b.n	800713a <_dtoa_r+0x4ea>
 80071ae:	bf00      	nop
 80071b0:	08009628 	.word	0x08009628
 80071b4:	08009600 	.word	0x08009600
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	40240000 	.word	0x40240000
 80071c0:	401c0000 	.word	0x401c0000
 80071c4:	40140000 	.word	0x40140000
 80071c8:	3fe00000 	.word	0x3fe00000
 80071cc:	4630      	mov	r0, r6
 80071ce:	4639      	mov	r1, r7
 80071d0:	f7f9 f982 	bl	80004d8 <__aeabi_dmul>
 80071d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80071d8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80071da:	9e04      	ldr	r6, [sp, #16]
 80071dc:	4659      	mov	r1, fp
 80071de:	4650      	mov	r0, sl
 80071e0:	f7f9 fc2a 	bl	8000a38 <__aeabi_d2iz>
 80071e4:	4604      	mov	r4, r0
 80071e6:	f7f9 f90d 	bl	8000404 <__aeabi_i2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4650      	mov	r0, sl
 80071f0:	4659      	mov	r1, fp
 80071f2:	f7f8 ffb9 	bl	8000168 <__aeabi_dsub>
 80071f6:	3430      	adds	r4, #48	; 0x30
 80071f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071fa:	f806 4b01 	strb.w	r4, [r6], #1
 80071fe:	429e      	cmp	r6, r3
 8007200:	4682      	mov	sl, r0
 8007202:	468b      	mov	fp, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	d123      	bne.n	8007252 <_dtoa_r+0x602>
 800720a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800720e:	4bb1      	ldr	r3, [pc, #708]	; (80074d4 <_dtoa_r+0x884>)
 8007210:	f7f8 ffac 	bl	800016c <__adddf3>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4650      	mov	r0, sl
 800721a:	4659      	mov	r1, fp
 800721c:	f7f9 fbec 	bl	80009f8 <__aeabi_dcmpgt>
 8007220:	2800      	cmp	r0, #0
 8007222:	d166      	bne.n	80072f2 <_dtoa_r+0x6a2>
 8007224:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007228:	2000      	movs	r0, #0
 800722a:	49aa      	ldr	r1, [pc, #680]	; (80074d4 <_dtoa_r+0x884>)
 800722c:	f7f8 ff9c 	bl	8000168 <__aeabi_dsub>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	f7f9 fbc0 	bl	80009bc <__aeabi_dcmplt>
 800723c:	2800      	cmp	r0, #0
 800723e:	f43f af22 	beq.w	8007086 <_dtoa_r+0x436>
 8007242:	463e      	mov	r6, r7
 8007244:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007248:	3f01      	subs	r7, #1
 800724a:	2b30      	cmp	r3, #48	; 0x30
 800724c:	d0f9      	beq.n	8007242 <_dtoa_r+0x5f2>
 800724e:	9503      	str	r5, [sp, #12]
 8007250:	e03e      	b.n	80072d0 <_dtoa_r+0x680>
 8007252:	4ba1      	ldr	r3, [pc, #644]	; (80074d8 <_dtoa_r+0x888>)
 8007254:	f7f9 f940 	bl	80004d8 <__aeabi_dmul>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	e7be      	b.n	80071dc <_dtoa_r+0x58c>
 800725e:	4654      	mov	r4, sl
 8007260:	f04f 0a00 	mov.w	sl, #0
 8007264:	465d      	mov	r5, fp
 8007266:	9e04      	ldr	r6, [sp, #16]
 8007268:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80074d8 <_dtoa_r+0x888>
 800726c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	f7f9 fa5a 	bl	800072c <__aeabi_ddiv>
 8007278:	f7f9 fbde 	bl	8000a38 <__aeabi_d2iz>
 800727c:	4607      	mov	r7, r0
 800727e:	f7f9 f8c1 	bl	8000404 <__aeabi_i2d>
 8007282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007286:	f7f9 f927 	bl	80004d8 <__aeabi_dmul>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f8 ff69 	bl	8000168 <__aeabi_dsub>
 8007296:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800729a:	f806 4b01 	strb.w	r4, [r6], #1
 800729e:	9c04      	ldr	r4, [sp, #16]
 80072a0:	9d05      	ldr	r5, [sp, #20]
 80072a2:	1b34      	subs	r4, r6, r4
 80072a4:	42a5      	cmp	r5, r4
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	d133      	bne.n	8007314 <_dtoa_r+0x6c4>
 80072ac:	f7f8 ff5e 	bl	800016c <__adddf3>
 80072b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	f7f9 fb9e 	bl	80009f8 <__aeabi_dcmpgt>
 80072bc:	b9c0      	cbnz	r0, 80072f0 <_dtoa_r+0x6a0>
 80072be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f9 fb6f 	bl	80009a8 <__aeabi_dcmpeq>
 80072ca:	b108      	cbz	r0, 80072d0 <_dtoa_r+0x680>
 80072cc:	07fb      	lsls	r3, r7, #31
 80072ce:	d40f      	bmi.n	80072f0 <_dtoa_r+0x6a0>
 80072d0:	4641      	mov	r1, r8
 80072d2:	4648      	mov	r0, r9
 80072d4:	f000 faa9 	bl	800782a <_Bfree>
 80072d8:	2300      	movs	r3, #0
 80072da:	7033      	strb	r3, [r6, #0]
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072e0:	3301      	adds	r3, #1
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f43f ace8 	beq.w	8006cbc <_dtoa_r+0x6c>
 80072ec:	601e      	str	r6, [r3, #0]
 80072ee:	e4e5      	b.n	8006cbc <_dtoa_r+0x6c>
 80072f0:	9d03      	ldr	r5, [sp, #12]
 80072f2:	4633      	mov	r3, r6
 80072f4:	461e      	mov	r6, r3
 80072f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072fa:	2a39      	cmp	r2, #57	; 0x39
 80072fc:	d106      	bne.n	800730c <_dtoa_r+0x6bc>
 80072fe:	9a04      	ldr	r2, [sp, #16]
 8007300:	429a      	cmp	r2, r3
 8007302:	d1f7      	bne.n	80072f4 <_dtoa_r+0x6a4>
 8007304:	2230      	movs	r2, #48	; 0x30
 8007306:	9904      	ldr	r1, [sp, #16]
 8007308:	3501      	adds	r5, #1
 800730a:	700a      	strb	r2, [r1, #0]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	3201      	adds	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e79c      	b.n	800724e <_dtoa_r+0x5fe>
 8007314:	4652      	mov	r2, sl
 8007316:	465b      	mov	r3, fp
 8007318:	f7f9 f8de 	bl	80004d8 <__aeabi_dmul>
 800731c:	2200      	movs	r2, #0
 800731e:	2300      	movs	r3, #0
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f7f9 fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8007328:	2800      	cmp	r0, #0
 800732a:	d09f      	beq.n	800726c <_dtoa_r+0x61c>
 800732c:	e7d0      	b.n	80072d0 <_dtoa_r+0x680>
 800732e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007330:	2a00      	cmp	r2, #0
 8007332:	f000 80ca 	beq.w	80074ca <_dtoa_r+0x87a>
 8007336:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007338:	2a01      	cmp	r2, #1
 800733a:	f300 80ad 	bgt.w	8007498 <_dtoa_r+0x848>
 800733e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007340:	2a00      	cmp	r2, #0
 8007342:	f000 80a5 	beq.w	8007490 <_dtoa_r+0x840>
 8007346:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800734a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800734c:	9e06      	ldr	r6, [sp, #24]
 800734e:	9a06      	ldr	r2, [sp, #24]
 8007350:	2101      	movs	r1, #1
 8007352:	441a      	add	r2, r3
 8007354:	9206      	str	r2, [sp, #24]
 8007356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007358:	4648      	mov	r0, r9
 800735a:	441a      	add	r2, r3
 800735c:	9209      	str	r2, [sp, #36]	; 0x24
 800735e:	f000 fb01 	bl	8007964 <__i2b>
 8007362:	4605      	mov	r5, r0
 8007364:	b166      	cbz	r6, 8007380 <_dtoa_r+0x730>
 8007366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	dd09      	ble.n	8007380 <_dtoa_r+0x730>
 800736c:	42b3      	cmp	r3, r6
 800736e:	bfa8      	it	ge
 8007370:	4633      	movge	r3, r6
 8007372:	9a06      	ldr	r2, [sp, #24]
 8007374:	1af6      	subs	r6, r6, r3
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	9206      	str	r2, [sp, #24]
 800737a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	9309      	str	r3, [sp, #36]	; 0x24
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	b1f3      	cbz	r3, 80073c2 <_dtoa_r+0x772>
 8007384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a8 	beq.w	80074dc <_dtoa_r+0x88c>
 800738c:	2c00      	cmp	r4, #0
 800738e:	dd10      	ble.n	80073b2 <_dtoa_r+0x762>
 8007390:	4629      	mov	r1, r5
 8007392:	4622      	mov	r2, r4
 8007394:	4648      	mov	r0, r9
 8007396:	f000 fba3 	bl	8007ae0 <__pow5mult>
 800739a:	4642      	mov	r2, r8
 800739c:	4601      	mov	r1, r0
 800739e:	4605      	mov	r5, r0
 80073a0:	4648      	mov	r0, r9
 80073a2:	f000 faf5 	bl	8007990 <__multiply>
 80073a6:	4607      	mov	r7, r0
 80073a8:	4641      	mov	r1, r8
 80073aa:	4648      	mov	r0, r9
 80073ac:	f000 fa3d 	bl	800782a <_Bfree>
 80073b0:	46b8      	mov	r8, r7
 80073b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b4:	1b1a      	subs	r2, r3, r4
 80073b6:	d004      	beq.n	80073c2 <_dtoa_r+0x772>
 80073b8:	4641      	mov	r1, r8
 80073ba:	4648      	mov	r0, r9
 80073bc:	f000 fb90 	bl	8007ae0 <__pow5mult>
 80073c0:	4680      	mov	r8, r0
 80073c2:	2101      	movs	r1, #1
 80073c4:	4648      	mov	r0, r9
 80073c6:	f000 facd 	bl	8007964 <__i2b>
 80073ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073cc:	4604      	mov	r4, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f340 8086 	ble.w	80074e0 <_dtoa_r+0x890>
 80073d4:	461a      	mov	r2, r3
 80073d6:	4601      	mov	r1, r0
 80073d8:	4648      	mov	r0, r9
 80073da:	f000 fb81 	bl	8007ae0 <__pow5mult>
 80073de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073e0:	4604      	mov	r4, r0
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	dd7f      	ble.n	80074e6 <_dtoa_r+0x896>
 80073e6:	2700      	movs	r7, #0
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073ee:	6918      	ldr	r0, [r3, #16]
 80073f0:	f000 fa6a 	bl	80078c8 <__hi0bits>
 80073f4:	f1c0 0020 	rsb	r0, r0, #32
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	4418      	add	r0, r3
 80073fc:	f010 001f 	ands.w	r0, r0, #31
 8007400:	f000 8098 	beq.w	8007534 <_dtoa_r+0x8e4>
 8007404:	f1c0 0320 	rsb	r3, r0, #32
 8007408:	2b04      	cmp	r3, #4
 800740a:	f340 8088 	ble.w	800751e <_dtoa_r+0x8ce>
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	f1c0 001c 	rsb	r0, r0, #28
 8007414:	4403      	add	r3, r0
 8007416:	9306      	str	r3, [sp, #24]
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	4406      	add	r6, r0
 800741c:	4403      	add	r3, r0
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
 8007420:	9b06      	ldr	r3, [sp, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd05      	ble.n	8007432 <_dtoa_r+0x7e2>
 8007426:	4641      	mov	r1, r8
 8007428:	461a      	mov	r2, r3
 800742a:	4648      	mov	r0, r9
 800742c:	f000 fb98 	bl	8007b60 <__lshift>
 8007430:	4680      	mov	r8, r0
 8007432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	dd05      	ble.n	8007444 <_dtoa_r+0x7f4>
 8007438:	4621      	mov	r1, r4
 800743a:	461a      	mov	r2, r3
 800743c:	4648      	mov	r0, r9
 800743e:	f000 fb8f 	bl	8007b60 <__lshift>
 8007442:	4604      	mov	r4, r0
 8007444:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007446:	2b00      	cmp	r3, #0
 8007448:	d076      	beq.n	8007538 <_dtoa_r+0x8e8>
 800744a:	4621      	mov	r1, r4
 800744c:	4640      	mov	r0, r8
 800744e:	f000 fbf3 	bl	8007c38 <__mcmp>
 8007452:	2800      	cmp	r0, #0
 8007454:	da70      	bge.n	8007538 <_dtoa_r+0x8e8>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	4641      	mov	r1, r8
 800745a:	3b01      	subs	r3, #1
 800745c:	9303      	str	r3, [sp, #12]
 800745e:	220a      	movs	r2, #10
 8007460:	2300      	movs	r3, #0
 8007462:	4648      	mov	r0, r9
 8007464:	f000 f9ea 	bl	800783c <__multadd>
 8007468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746a:	4680      	mov	r8, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 81a9 	beq.w	80077c4 <_dtoa_r+0xb74>
 8007472:	2300      	movs	r3, #0
 8007474:	4629      	mov	r1, r5
 8007476:	220a      	movs	r2, #10
 8007478:	4648      	mov	r0, r9
 800747a:	f000 f9df 	bl	800783c <__multadd>
 800747e:	9b08      	ldr	r3, [sp, #32]
 8007480:	4605      	mov	r5, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f300 8093 	bgt.w	80075ae <_dtoa_r+0x95e>
 8007488:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800748a:	2b02      	cmp	r3, #2
 800748c:	dc5c      	bgt.n	8007548 <_dtoa_r+0x8f8>
 800748e:	e08e      	b.n	80075ae <_dtoa_r+0x95e>
 8007490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007496:	e758      	b.n	800734a <_dtoa_r+0x6fa>
 8007498:	9b05      	ldr	r3, [sp, #20]
 800749a:	1e5c      	subs	r4, r3, #1
 800749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749e:	42a3      	cmp	r3, r4
 80074a0:	bfbf      	itttt	lt
 80074a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074a4:	9a10      	ldrlt	r2, [sp, #64]	; 0x40
 80074a6:	1ae3      	sublt	r3, r4, r3
 80074a8:	18d2      	addlt	r2, r2, r3
 80074aa:	bfa8      	it	ge
 80074ac:	1b1c      	subge	r4, r3, r4
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	bfbe      	ittt	lt
 80074b2:	9210      	strlt	r2, [sp, #64]	; 0x40
 80074b4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074b6:	2400      	movlt	r4, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bfb7      	itett	lt
 80074bc:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 80074c0:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 80074c4:	1a9e      	sublt	r6, r3, r2
 80074c6:	2300      	movlt	r3, #0
 80074c8:	e741      	b.n	800734e <_dtoa_r+0x6fe>
 80074ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074cc:	9e06      	ldr	r6, [sp, #24]
 80074ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074d0:	e748      	b.n	8007364 <_dtoa_r+0x714>
 80074d2:	bf00      	nop
 80074d4:	3fe00000 	.word	0x3fe00000
 80074d8:	40240000 	.word	0x40240000
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	e76b      	b.n	80073b8 <_dtoa_r+0x768>
 80074e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	dc17      	bgt.n	8007516 <_dtoa_r+0x8c6>
 80074e6:	f1ba 0f00 	cmp.w	sl, #0
 80074ea:	d114      	bne.n	8007516 <_dtoa_r+0x8c6>
 80074ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074f0:	b99b      	cbnz	r3, 800751a <_dtoa_r+0x8ca>
 80074f2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80074f6:	0d3f      	lsrs	r7, r7, #20
 80074f8:	053f      	lsls	r7, r7, #20
 80074fa:	b137      	cbz	r7, 800750a <_dtoa_r+0x8ba>
 80074fc:	2701      	movs	r7, #1
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	3301      	adds	r3, #1
 8007502:	9306      	str	r3, [sp, #24]
 8007504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007506:	3301      	adds	r3, #1
 8007508:	9309      	str	r3, [sp, #36]	; 0x24
 800750a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f af6b 	bne.w	80073e8 <_dtoa_r+0x798>
 8007512:	2001      	movs	r0, #1
 8007514:	e770      	b.n	80073f8 <_dtoa_r+0x7a8>
 8007516:	2700      	movs	r7, #0
 8007518:	e7f7      	b.n	800750a <_dtoa_r+0x8ba>
 800751a:	4657      	mov	r7, sl
 800751c:	e7f5      	b.n	800750a <_dtoa_r+0x8ba>
 800751e:	f43f af7f 	beq.w	8007420 <_dtoa_r+0x7d0>
 8007522:	9a06      	ldr	r2, [sp, #24]
 8007524:	331c      	adds	r3, #28
 8007526:	441a      	add	r2, r3
 8007528:	9206      	str	r2, [sp, #24]
 800752a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800752c:	441e      	add	r6, r3
 800752e:	441a      	add	r2, r3
 8007530:	9209      	str	r2, [sp, #36]	; 0x24
 8007532:	e775      	b.n	8007420 <_dtoa_r+0x7d0>
 8007534:	4603      	mov	r3, r0
 8007536:	e7f4      	b.n	8007522 <_dtoa_r+0x8d2>
 8007538:	9b05      	ldr	r3, [sp, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dc31      	bgt.n	80075a2 <_dtoa_r+0x952>
 800753e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007540:	2b02      	cmp	r3, #2
 8007542:	dd2e      	ble.n	80075a2 <_dtoa_r+0x952>
 8007544:	9b05      	ldr	r3, [sp, #20]
 8007546:	9308      	str	r3, [sp, #32]
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	b963      	cbnz	r3, 8007566 <_dtoa_r+0x916>
 800754c:	4621      	mov	r1, r4
 800754e:	2205      	movs	r2, #5
 8007550:	4648      	mov	r0, r9
 8007552:	f000 f973 	bl	800783c <__multadd>
 8007556:	4601      	mov	r1, r0
 8007558:	4604      	mov	r4, r0
 800755a:	4640      	mov	r0, r8
 800755c:	f000 fb6c 	bl	8007c38 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	f73f adba 	bgt.w	80070da <_dtoa_r+0x48a>
 8007566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007568:	9e04      	ldr	r6, [sp, #16]
 800756a:	43db      	mvns	r3, r3
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	2700      	movs	r7, #0
 8007570:	4621      	mov	r1, r4
 8007572:	4648      	mov	r0, r9
 8007574:	f000 f959 	bl	800782a <_Bfree>
 8007578:	2d00      	cmp	r5, #0
 800757a:	f43f aea9 	beq.w	80072d0 <_dtoa_r+0x680>
 800757e:	b12f      	cbz	r7, 800758c <_dtoa_r+0x93c>
 8007580:	42af      	cmp	r7, r5
 8007582:	d003      	beq.n	800758c <_dtoa_r+0x93c>
 8007584:	4639      	mov	r1, r7
 8007586:	4648      	mov	r0, r9
 8007588:	f000 f94f 	bl	800782a <_Bfree>
 800758c:	4629      	mov	r1, r5
 800758e:	4648      	mov	r0, r9
 8007590:	f000 f94b 	bl	800782a <_Bfree>
 8007594:	e69c      	b.n	80072d0 <_dtoa_r+0x680>
 8007596:	2400      	movs	r4, #0
 8007598:	4625      	mov	r5, r4
 800759a:	e7e4      	b.n	8007566 <_dtoa_r+0x916>
 800759c:	9503      	str	r5, [sp, #12]
 800759e:	4625      	mov	r5, r4
 80075a0:	e59b      	b.n	80070da <_dtoa_r+0x48a>
 80075a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80c4 	beq.w	8007732 <_dtoa_r+0xae2>
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	9308      	str	r3, [sp, #32]
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	dd05      	ble.n	80075be <_dtoa_r+0x96e>
 80075b2:	4629      	mov	r1, r5
 80075b4:	4632      	mov	r2, r6
 80075b6:	4648      	mov	r0, r9
 80075b8:	f000 fad2 	bl	8007b60 <__lshift>
 80075bc:	4605      	mov	r5, r0
 80075be:	2f00      	cmp	r7, #0
 80075c0:	d058      	beq.n	8007674 <_dtoa_r+0xa24>
 80075c2:	4648      	mov	r0, r9
 80075c4:	6869      	ldr	r1, [r5, #4]
 80075c6:	f000 f90b 	bl	80077e0 <_Balloc>
 80075ca:	4606      	mov	r6, r0
 80075cc:	b920      	cbnz	r0, 80075d8 <_dtoa_r+0x988>
 80075ce:	4602      	mov	r2, r0
 80075d0:	f240 21ef 	movw	r1, #751	; 0x2ef
 80075d4:	4b7f      	ldr	r3, [pc, #508]	; (80077d4 <_dtoa_r+0xb84>)
 80075d6:	e477      	b.n	8006ec8 <_dtoa_r+0x278>
 80075d8:	692a      	ldr	r2, [r5, #16]
 80075da:	f105 010c 	add.w	r1, r5, #12
 80075de:	3202      	adds	r2, #2
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	300c      	adds	r0, #12
 80075e4:	f000 fcc4 	bl	8007f70 <memcpy>
 80075e8:	2201      	movs	r2, #1
 80075ea:	4631      	mov	r1, r6
 80075ec:	4648      	mov	r0, r9
 80075ee:	f000 fab7 	bl	8007b60 <__lshift>
 80075f2:	462f      	mov	r7, r5
 80075f4:	4605      	mov	r5, r0
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	9b08      	ldr	r3, [sp, #32]
 8007600:	4413      	add	r3, r2
 8007602:	930a      	str	r3, [sp, #40]	; 0x28
 8007604:	f00a 0301 	and.w	r3, sl, #1
 8007608:	9309      	str	r3, [sp, #36]	; 0x24
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f103 3bff 	add.w	fp, r3, #4294967295
 8007614:	f7ff fa92 	bl	8006b3c <quorem>
 8007618:	4639      	mov	r1, r7
 800761a:	9006      	str	r0, [sp, #24]
 800761c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007620:	4640      	mov	r0, r8
 8007622:	f000 fb09 	bl	8007c38 <__mcmp>
 8007626:	462a      	mov	r2, r5
 8007628:	9008      	str	r0, [sp, #32]
 800762a:	4621      	mov	r1, r4
 800762c:	4648      	mov	r0, r9
 800762e:	f000 fb1f 	bl	8007c70 <__mdiff>
 8007632:	68c2      	ldr	r2, [r0, #12]
 8007634:	4606      	mov	r6, r0
 8007636:	b9fa      	cbnz	r2, 8007678 <_dtoa_r+0xa28>
 8007638:	4601      	mov	r1, r0
 800763a:	4640      	mov	r0, r8
 800763c:	f000 fafc 	bl	8007c38 <__mcmp>
 8007640:	4602      	mov	r2, r0
 8007642:	4631      	mov	r1, r6
 8007644:	4648      	mov	r0, r9
 8007646:	920b      	str	r2, [sp, #44]	; 0x2c
 8007648:	f000 f8ef 	bl	800782a <_Bfree>
 800764c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800764e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007650:	9e05      	ldr	r6, [sp, #20]
 8007652:	ea43 0102 	orr.w	r1, r3, r2
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	4319      	orrs	r1, r3
 800765a:	d10f      	bne.n	800767c <_dtoa_r+0xa2c>
 800765c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007660:	d028      	beq.n	80076b4 <_dtoa_r+0xa64>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd02      	ble.n	800766e <_dtoa_r+0xa1e>
 8007668:	9b06      	ldr	r3, [sp, #24]
 800766a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800766e:	f88b a000 	strb.w	sl, [fp]
 8007672:	e77d      	b.n	8007570 <_dtoa_r+0x920>
 8007674:	4628      	mov	r0, r5
 8007676:	e7bc      	b.n	80075f2 <_dtoa_r+0x9a2>
 8007678:	2201      	movs	r2, #1
 800767a:	e7e2      	b.n	8007642 <_dtoa_r+0x9f2>
 800767c:	9b08      	ldr	r3, [sp, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	db04      	blt.n	800768c <_dtoa_r+0xa3c>
 8007682:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007684:	430b      	orrs	r3, r1
 8007686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007688:	430b      	orrs	r3, r1
 800768a:	d120      	bne.n	80076ce <_dtoa_r+0xa7e>
 800768c:	2a00      	cmp	r2, #0
 800768e:	ddee      	ble.n	800766e <_dtoa_r+0xa1e>
 8007690:	4641      	mov	r1, r8
 8007692:	2201      	movs	r2, #1
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fa63 	bl	8007b60 <__lshift>
 800769a:	4621      	mov	r1, r4
 800769c:	4680      	mov	r8, r0
 800769e:	f000 facb 	bl	8007c38 <__mcmp>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	dc03      	bgt.n	80076ae <_dtoa_r+0xa5e>
 80076a6:	d1e2      	bne.n	800766e <_dtoa_r+0xa1e>
 80076a8:	f01a 0f01 	tst.w	sl, #1
 80076ac:	d0df      	beq.n	800766e <_dtoa_r+0xa1e>
 80076ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076b2:	d1d9      	bne.n	8007668 <_dtoa_r+0xa18>
 80076b4:	2339      	movs	r3, #57	; 0x39
 80076b6:	f88b 3000 	strb.w	r3, [fp]
 80076ba:	4633      	mov	r3, r6
 80076bc:	461e      	mov	r6, r3
 80076be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	2a39      	cmp	r2, #57	; 0x39
 80076c6:	d06a      	beq.n	800779e <_dtoa_r+0xb4e>
 80076c8:	3201      	adds	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e750      	b.n	8007570 <_dtoa_r+0x920>
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	dd07      	ble.n	80076e2 <_dtoa_r+0xa92>
 80076d2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076d6:	d0ed      	beq.n	80076b4 <_dtoa_r+0xa64>
 80076d8:	f10a 0301 	add.w	r3, sl, #1
 80076dc:	f88b 3000 	strb.w	r3, [fp]
 80076e0:	e746      	b.n	8007570 <_dtoa_r+0x920>
 80076e2:	9b05      	ldr	r3, [sp, #20]
 80076e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e6:	f803 ac01 	strb.w	sl, [r3, #-1]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d041      	beq.n	8007772 <_dtoa_r+0xb22>
 80076ee:	4641      	mov	r1, r8
 80076f0:	2300      	movs	r3, #0
 80076f2:	220a      	movs	r2, #10
 80076f4:	4648      	mov	r0, r9
 80076f6:	f000 f8a1 	bl	800783c <__multadd>
 80076fa:	42af      	cmp	r7, r5
 80076fc:	4680      	mov	r8, r0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	f04f 020a 	mov.w	r2, #10
 8007706:	4639      	mov	r1, r7
 8007708:	4648      	mov	r0, r9
 800770a:	d107      	bne.n	800771c <_dtoa_r+0xacc>
 800770c:	f000 f896 	bl	800783c <__multadd>
 8007710:	4607      	mov	r7, r0
 8007712:	4605      	mov	r5, r0
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	3301      	adds	r3, #1
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	e776      	b.n	800760a <_dtoa_r+0x9ba>
 800771c:	f000 f88e 	bl	800783c <__multadd>
 8007720:	4629      	mov	r1, r5
 8007722:	4607      	mov	r7, r0
 8007724:	2300      	movs	r3, #0
 8007726:	220a      	movs	r2, #10
 8007728:	4648      	mov	r0, r9
 800772a:	f000 f887 	bl	800783c <__multadd>
 800772e:	4605      	mov	r5, r0
 8007730:	e7f0      	b.n	8007714 <_dtoa_r+0xac4>
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	9e04      	ldr	r6, [sp, #16]
 8007738:	4621      	mov	r1, r4
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff f9fe 	bl	8006b3c <quorem>
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007746:	f806 ab01 	strb.w	sl, [r6], #1
 800774a:	1af2      	subs	r2, r6, r3
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	4293      	cmp	r3, r2
 8007750:	dd07      	ble.n	8007762 <_dtoa_r+0xb12>
 8007752:	4641      	mov	r1, r8
 8007754:	2300      	movs	r3, #0
 8007756:	220a      	movs	r2, #10
 8007758:	4648      	mov	r0, r9
 800775a:	f000 f86f 	bl	800783c <__multadd>
 800775e:	4680      	mov	r8, r0
 8007760:	e7ea      	b.n	8007738 <_dtoa_r+0xae8>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	2700      	movs	r7, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	bfcc      	ite	gt
 800776a:	461e      	movgt	r6, r3
 800776c:	2601      	movle	r6, #1
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	441e      	add	r6, r3
 8007772:	4641      	mov	r1, r8
 8007774:	2201      	movs	r2, #1
 8007776:	4648      	mov	r0, r9
 8007778:	f000 f9f2 	bl	8007b60 <__lshift>
 800777c:	4621      	mov	r1, r4
 800777e:	4680      	mov	r8, r0
 8007780:	f000 fa5a 	bl	8007c38 <__mcmp>
 8007784:	2800      	cmp	r0, #0
 8007786:	dc98      	bgt.n	80076ba <_dtoa_r+0xa6a>
 8007788:	d102      	bne.n	8007790 <_dtoa_r+0xb40>
 800778a:	f01a 0f01 	tst.w	sl, #1
 800778e:	d194      	bne.n	80076ba <_dtoa_r+0xa6a>
 8007790:	4633      	mov	r3, r6
 8007792:	461e      	mov	r6, r3
 8007794:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007798:	2a30      	cmp	r2, #48	; 0x30
 800779a:	d0fa      	beq.n	8007792 <_dtoa_r+0xb42>
 800779c:	e6e8      	b.n	8007570 <_dtoa_r+0x920>
 800779e:	9a04      	ldr	r2, [sp, #16]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d18b      	bne.n	80076bc <_dtoa_r+0xa6c>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	2331      	movs	r3, #49	; 0x31
 80077ac:	7013      	strb	r3, [r2, #0]
 80077ae:	e6df      	b.n	8007570 <_dtoa_r+0x920>
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <_dtoa_r+0xb88>)
 80077b2:	f7ff baa0 	b.w	8006cf6 <_dtoa_r+0xa6>
 80077b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f aa83 	bne.w	8006cc4 <_dtoa_r+0x74>
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <_dtoa_r+0xb8c>)
 80077c0:	f7ff ba99 	b.w	8006cf6 <_dtoa_r+0xa6>
 80077c4:	9b08      	ldr	r3, [sp, #32]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dcb5      	bgt.n	8007736 <_dtoa_r+0xae6>
 80077ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f73f aebb 	bgt.w	8007548 <_dtoa_r+0x8f8>
 80077d2:	e7b0      	b.n	8007736 <_dtoa_r+0xae6>
 80077d4:	08009537 	.word	0x08009537
 80077d8:	08009508 	.word	0x08009508
 80077dc:	0800952a 	.word	0x0800952a

080077e0 <_Balloc>:
 80077e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80077e2:	b570      	push	{r4, r5, r6, lr}
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	b17b      	cbz	r3, 800780a <_Balloc+0x2a>
 80077ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80077ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80077f0:	b9a0      	cbnz	r0, 800781c <_Balloc+0x3c>
 80077f2:	2101      	movs	r1, #1
 80077f4:	fa01 f604 	lsl.w	r6, r1, r4
 80077f8:	1d72      	adds	r2, r6, #5
 80077fa:	4628      	mov	r0, r5
 80077fc:	0092      	lsls	r2, r2, #2
 80077fe:	f000 fbe3 	bl	8007fc8 <_calloc_r>
 8007802:	b148      	cbz	r0, 8007818 <_Balloc+0x38>
 8007804:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007808:	e00b      	b.n	8007822 <_Balloc+0x42>
 800780a:	2221      	movs	r2, #33	; 0x21
 800780c:	2104      	movs	r1, #4
 800780e:	f000 fbdb 	bl	8007fc8 <_calloc_r>
 8007812:	6468      	str	r0, [r5, #68]	; 0x44
 8007814:	2800      	cmp	r0, #0
 8007816:	d1e8      	bne.n	80077ea <_Balloc+0xa>
 8007818:	2000      	movs	r0, #0
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	6802      	ldr	r2, [r0, #0]
 800781e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007822:	2300      	movs	r3, #0
 8007824:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007828:	e7f7      	b.n	800781a <_Balloc+0x3a>

0800782a <_Bfree>:
 800782a:	b131      	cbz	r1, 800783a <_Bfree+0x10>
 800782c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800782e:	684a      	ldr	r2, [r1, #4]
 8007830:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007834:	6008      	str	r0, [r1, #0]
 8007836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800783a:	4770      	bx	lr

0800783c <__multadd>:
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	4607      	mov	r7, r0
 8007842:	460c      	mov	r4, r1
 8007844:	461e      	mov	r6, r3
 8007846:	2000      	movs	r0, #0
 8007848:	690d      	ldr	r5, [r1, #16]
 800784a:	f101 0c14 	add.w	ip, r1, #20
 800784e:	f8dc 3000 	ldr.w	r3, [ip]
 8007852:	3001      	adds	r0, #1
 8007854:	b299      	uxth	r1, r3
 8007856:	fb02 6101 	mla	r1, r2, r1, r6
 800785a:	0c1e      	lsrs	r6, r3, #16
 800785c:	0c0b      	lsrs	r3, r1, #16
 800785e:	fb02 3306 	mla	r3, r2, r6, r3
 8007862:	b289      	uxth	r1, r1
 8007864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007868:	4285      	cmp	r5, r0
 800786a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800786e:	f84c 1b04 	str.w	r1, [ip], #4
 8007872:	dcec      	bgt.n	800784e <__multadd+0x12>
 8007874:	b30e      	cbz	r6, 80078ba <__multadd+0x7e>
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	42ab      	cmp	r3, r5
 800787a:	dc19      	bgt.n	80078b0 <__multadd+0x74>
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	4638      	mov	r0, r7
 8007880:	3101      	adds	r1, #1
 8007882:	f7ff ffad 	bl	80077e0 <_Balloc>
 8007886:	4680      	mov	r8, r0
 8007888:	b928      	cbnz	r0, 8007896 <__multadd+0x5a>
 800788a:	4602      	mov	r2, r0
 800788c:	21ba      	movs	r1, #186	; 0xba
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <__multadd+0x84>)
 8007890:	480c      	ldr	r0, [pc, #48]	; (80078c4 <__multadd+0x88>)
 8007892:	f000 fb7b 	bl	8007f8c <__assert_func>
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	f104 010c 	add.w	r1, r4, #12
 800789c:	3202      	adds	r2, #2
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	300c      	adds	r0, #12
 80078a2:	f000 fb65 	bl	8007f70 <memcpy>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ffbe 	bl	800782a <_Bfree>
 80078ae:	4644      	mov	r4, r8
 80078b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b4:	3501      	adds	r5, #1
 80078b6:	615e      	str	r6, [r3, #20]
 80078b8:	6125      	str	r5, [r4, #16]
 80078ba:	4620      	mov	r0, r4
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	08009537 	.word	0x08009537
 80078c4:	080095a0 	.word	0x080095a0

080078c8 <__hi0bits>:
 80078c8:	0c02      	lsrs	r2, r0, #16
 80078ca:	0412      	lsls	r2, r2, #16
 80078cc:	4603      	mov	r3, r0
 80078ce:	b9ca      	cbnz	r2, 8007904 <__hi0bits+0x3c>
 80078d0:	0403      	lsls	r3, r0, #16
 80078d2:	2010      	movs	r0, #16
 80078d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078d8:	bf04      	itt	eq
 80078da:	021b      	lsleq	r3, r3, #8
 80078dc:	3008      	addeq	r0, #8
 80078de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078e2:	bf04      	itt	eq
 80078e4:	011b      	lsleq	r3, r3, #4
 80078e6:	3004      	addeq	r0, #4
 80078e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078ec:	bf04      	itt	eq
 80078ee:	009b      	lsleq	r3, r3, #2
 80078f0:	3002      	addeq	r0, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	db05      	blt.n	8007902 <__hi0bits+0x3a>
 80078f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078fa:	f100 0001 	add.w	r0, r0, #1
 80078fe:	bf08      	it	eq
 8007900:	2020      	moveq	r0, #32
 8007902:	4770      	bx	lr
 8007904:	2000      	movs	r0, #0
 8007906:	e7e5      	b.n	80078d4 <__hi0bits+0xc>

08007908 <__lo0bits>:
 8007908:	6803      	ldr	r3, [r0, #0]
 800790a:	4602      	mov	r2, r0
 800790c:	f013 0007 	ands.w	r0, r3, #7
 8007910:	d00b      	beq.n	800792a <__lo0bits+0x22>
 8007912:	07d9      	lsls	r1, r3, #31
 8007914:	d421      	bmi.n	800795a <__lo0bits+0x52>
 8007916:	0798      	lsls	r0, r3, #30
 8007918:	bf49      	itett	mi
 800791a:	085b      	lsrmi	r3, r3, #1
 800791c:	089b      	lsrpl	r3, r3, #2
 800791e:	2001      	movmi	r0, #1
 8007920:	6013      	strmi	r3, [r2, #0]
 8007922:	bf5c      	itt	pl
 8007924:	2002      	movpl	r0, #2
 8007926:	6013      	strpl	r3, [r2, #0]
 8007928:	4770      	bx	lr
 800792a:	b299      	uxth	r1, r3
 800792c:	b909      	cbnz	r1, 8007932 <__lo0bits+0x2a>
 800792e:	2010      	movs	r0, #16
 8007930:	0c1b      	lsrs	r3, r3, #16
 8007932:	b2d9      	uxtb	r1, r3
 8007934:	b909      	cbnz	r1, 800793a <__lo0bits+0x32>
 8007936:	3008      	adds	r0, #8
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	0719      	lsls	r1, r3, #28
 800793c:	bf04      	itt	eq
 800793e:	091b      	lsreq	r3, r3, #4
 8007940:	3004      	addeq	r0, #4
 8007942:	0799      	lsls	r1, r3, #30
 8007944:	bf04      	itt	eq
 8007946:	089b      	lsreq	r3, r3, #2
 8007948:	3002      	addeq	r0, #2
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d403      	bmi.n	8007956 <__lo0bits+0x4e>
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	f100 0001 	add.w	r0, r0, #1
 8007954:	d003      	beq.n	800795e <__lo0bits+0x56>
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4770      	bx	lr
 800795a:	2000      	movs	r0, #0
 800795c:	4770      	bx	lr
 800795e:	2020      	movs	r0, #32
 8007960:	4770      	bx	lr
	...

08007964 <__i2b>:
 8007964:	b510      	push	{r4, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	2101      	movs	r1, #1
 800796a:	f7ff ff39 	bl	80077e0 <_Balloc>
 800796e:	4602      	mov	r2, r0
 8007970:	b928      	cbnz	r0, 800797e <__i2b+0x1a>
 8007972:	f240 1145 	movw	r1, #325	; 0x145
 8007976:	4b04      	ldr	r3, [pc, #16]	; (8007988 <__i2b+0x24>)
 8007978:	4804      	ldr	r0, [pc, #16]	; (800798c <__i2b+0x28>)
 800797a:	f000 fb07 	bl	8007f8c <__assert_func>
 800797e:	2301      	movs	r3, #1
 8007980:	6144      	str	r4, [r0, #20]
 8007982:	6103      	str	r3, [r0, #16]
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	08009537 	.word	0x08009537
 800798c:	080095a0 	.word	0x080095a0

08007990 <__multiply>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4691      	mov	r9, r2
 8007996:	690a      	ldr	r2, [r1, #16]
 8007998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800799c:	460c      	mov	r4, r1
 800799e:	429a      	cmp	r2, r3
 80079a0:	bfbe      	ittt	lt
 80079a2:	460b      	movlt	r3, r1
 80079a4:	464c      	movlt	r4, r9
 80079a6:	4699      	movlt	r9, r3
 80079a8:	6927      	ldr	r7, [r4, #16]
 80079aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	eb07 060a 	add.w	r6, r7, sl
 80079b6:	42b3      	cmp	r3, r6
 80079b8:	b085      	sub	sp, #20
 80079ba:	bfb8      	it	lt
 80079bc:	3101      	addlt	r1, #1
 80079be:	f7ff ff0f 	bl	80077e0 <_Balloc>
 80079c2:	b930      	cbnz	r0, 80079d2 <__multiply+0x42>
 80079c4:	4602      	mov	r2, r0
 80079c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079ca:	4b43      	ldr	r3, [pc, #268]	; (8007ad8 <__multiply+0x148>)
 80079cc:	4843      	ldr	r0, [pc, #268]	; (8007adc <__multiply+0x14c>)
 80079ce:	f000 fadd 	bl	8007f8c <__assert_func>
 80079d2:	f100 0514 	add.w	r5, r0, #20
 80079d6:	462b      	mov	r3, r5
 80079d8:	2200      	movs	r2, #0
 80079da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079de:	4543      	cmp	r3, r8
 80079e0:	d321      	bcc.n	8007a26 <__multiply+0x96>
 80079e2:	f104 0314 	add.w	r3, r4, #20
 80079e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079ea:	f109 0314 	add.w	r3, r9, #20
 80079ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f2:	9202      	str	r2, [sp, #8]
 80079f4:	1b3a      	subs	r2, r7, r4
 80079f6:	3a15      	subs	r2, #21
 80079f8:	f022 0203 	bic.w	r2, r2, #3
 80079fc:	3204      	adds	r2, #4
 80079fe:	f104 0115 	add.w	r1, r4, #21
 8007a02:	428f      	cmp	r7, r1
 8007a04:	bf38      	it	cc
 8007a06:	2204      	movcc	r2, #4
 8007a08:	9201      	str	r2, [sp, #4]
 8007a0a:	9a02      	ldr	r2, [sp, #8]
 8007a0c:	9303      	str	r3, [sp, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d80c      	bhi.n	8007a2c <__multiply+0x9c>
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	dd03      	ble.n	8007a1e <__multiply+0x8e>
 8007a16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d05a      	beq.n	8007ad4 <__multiply+0x144>
 8007a1e:	6106      	str	r6, [r0, #16]
 8007a20:	b005      	add	sp, #20
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	f843 2b04 	str.w	r2, [r3], #4
 8007a2a:	e7d8      	b.n	80079de <__multiply+0x4e>
 8007a2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d023      	beq.n	8007a7e <__multiply+0xee>
 8007a36:	46a9      	mov	r9, r5
 8007a38:	f04f 0c00 	mov.w	ip, #0
 8007a3c:	f104 0e14 	add.w	lr, r4, #20
 8007a40:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a44:	f8d9 1000 	ldr.w	r1, [r9]
 8007a48:	fa1f fb82 	uxth.w	fp, r2
 8007a4c:	b289      	uxth	r1, r1
 8007a4e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a52:	4461      	add	r1, ip
 8007a54:	f8d9 c000 	ldr.w	ip, [r9]
 8007a58:	0c12      	lsrs	r2, r2, #16
 8007a5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a5e:	fb0a c202 	mla	r2, sl, r2, ip
 8007a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a66:	b289      	uxth	r1, r1
 8007a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a6c:	4577      	cmp	r7, lr
 8007a6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a72:	f849 1b04 	str.w	r1, [r9], #4
 8007a76:	d8e3      	bhi.n	8007a40 <__multiply+0xb0>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	f845 c002 	str.w	ip, [r5, r2]
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a86:	f1b9 0f00 	cmp.w	r9, #0
 8007a8a:	d021      	beq.n	8007ad0 <__multiply+0x140>
 8007a8c:	46ae      	mov	lr, r5
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	6829      	ldr	r1, [r5, #0]
 8007a94:	f104 0c14 	add.w	ip, r4, #20
 8007a98:	f8bc b000 	ldrh.w	fp, [ip]
 8007a9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa0:	b289      	uxth	r1, r1
 8007aa2:	fb09 220b 	mla	r2, r9, fp, r2
 8007aa6:	4452      	add	r2, sl
 8007aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aac:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ab4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ab8:	f8be 1000 	ldrh.w	r1, [lr]
 8007abc:	4567      	cmp	r7, ip
 8007abe:	fb09 110a 	mla	r1, r9, sl, r1
 8007ac2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ac6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aca:	d8e5      	bhi.n	8007a98 <__multiply+0x108>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	50a9      	str	r1, [r5, r2]
 8007ad0:	3504      	adds	r5, #4
 8007ad2:	e79a      	b.n	8007a0a <__multiply+0x7a>
 8007ad4:	3e01      	subs	r6, #1
 8007ad6:	e79c      	b.n	8007a12 <__multiply+0x82>
 8007ad8:	08009537 	.word	0x08009537
 8007adc:	080095a0 	.word	0x080095a0

08007ae0 <__pow5mult>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	f012 0203 	ands.w	r2, r2, #3
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	d007      	beq.n	8007b00 <__pow5mult+0x20>
 8007af0:	4c1a      	ldr	r4, [pc, #104]	; (8007b5c <__pow5mult+0x7c>)
 8007af2:	3a01      	subs	r2, #1
 8007af4:	2300      	movs	r3, #0
 8007af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afa:	f7ff fe9f 	bl	800783c <__multadd>
 8007afe:	4607      	mov	r7, r0
 8007b00:	10ad      	asrs	r5, r5, #2
 8007b02:	d027      	beq.n	8007b54 <__pow5mult+0x74>
 8007b04:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8007b06:	b944      	cbnz	r4, 8007b1a <__pow5mult+0x3a>
 8007b08:	f240 2171 	movw	r1, #625	; 0x271
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff ff29 	bl	8007964 <__i2b>
 8007b12:	2300      	movs	r3, #0
 8007b14:	4604      	mov	r4, r0
 8007b16:	6430      	str	r0, [r6, #64]	; 0x40
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	07eb      	lsls	r3, r5, #31
 8007b20:	d50a      	bpl.n	8007b38 <__pow5mult+0x58>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff32 	bl	8007990 <__multiply>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe7a 	bl	800782a <_Bfree>
 8007b36:	4647      	mov	r7, r8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	d00b      	beq.n	8007b54 <__pow5mult+0x74>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	b938      	cbnz	r0, 8007b50 <__pow5mult+0x70>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ff23 	bl	8007990 <__multiply>
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f8c0 9000 	str.w	r9, [r0]
 8007b50:	4604      	mov	r4, r0
 8007b52:	e7e4      	b.n	8007b1e <__pow5mult+0x3e>
 8007b54:	4638      	mov	r0, r7
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	bf00      	nop
 8007b5c:	080096f0 	.word	0x080096f0

08007b60 <__lshift>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	460c      	mov	r4, r1
 8007b66:	4607      	mov	r7, r0
 8007b68:	4691      	mov	r9, r2
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6849      	ldr	r1, [r1, #4]
 8007b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b78:	f108 0601 	add.w	r6, r8, #1
 8007b7c:	42b3      	cmp	r3, r6
 8007b7e:	db0b      	blt.n	8007b98 <__lshift+0x38>
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff fe2d 	bl	80077e0 <_Balloc>
 8007b86:	4605      	mov	r5, r0
 8007b88:	b948      	cbnz	r0, 8007b9e <__lshift+0x3e>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b90:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <__lshift+0xd0>)
 8007b92:	4828      	ldr	r0, [pc, #160]	; (8007c34 <__lshift+0xd4>)
 8007b94:	f000 f9fa 	bl	8007f8c <__assert_func>
 8007b98:	3101      	adds	r1, #1
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	e7ee      	b.n	8007b7c <__lshift+0x1c>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f100 0114 	add.w	r1, r0, #20
 8007ba4:	f100 0210 	add.w	r2, r0, #16
 8007ba8:	4618      	mov	r0, r3
 8007baa:	4553      	cmp	r3, sl
 8007bac:	db33      	blt.n	8007c16 <__lshift+0xb6>
 8007bae:	6920      	ldr	r0, [r4, #16]
 8007bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bb4:	f104 0314 	add.w	r3, r4, #20
 8007bb8:	f019 091f 	ands.w	r9, r9, #31
 8007bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bc4:	d02b      	beq.n	8007c1e <__lshift+0xbe>
 8007bc6:	468a      	mov	sl, r1
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f1c9 0e20 	rsb	lr, r9, #32
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8007bd4:	4310      	orrs	r0, r2
 8007bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bde:	459c      	cmp	ip, r3
 8007be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007be4:	d8f3      	bhi.n	8007bce <__lshift+0x6e>
 8007be6:	ebac 0304 	sub.w	r3, ip, r4
 8007bea:	3b15      	subs	r3, #21
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	f104 0015 	add.w	r0, r4, #21
 8007bf6:	4584      	cmp	ip, r0
 8007bf8:	bf38      	it	cc
 8007bfa:	2304      	movcc	r3, #4
 8007bfc:	50ca      	str	r2, [r1, r3]
 8007bfe:	b10a      	cbz	r2, 8007c04 <__lshift+0xa4>
 8007c00:	f108 0602 	add.w	r6, r8, #2
 8007c04:	3e01      	subs	r6, #1
 8007c06:	4638      	mov	r0, r7
 8007c08:	4621      	mov	r1, r4
 8007c0a:	612e      	str	r6, [r5, #16]
 8007c0c:	f7ff fe0d 	bl	800782a <_Bfree>
 8007c10:	4628      	mov	r0, r5
 8007c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	e7c5      	b.n	8007baa <__lshift+0x4a>
 8007c1e:	3904      	subs	r1, #4
 8007c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c24:	459c      	cmp	ip, r3
 8007c26:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c2a:	d8f9      	bhi.n	8007c20 <__lshift+0xc0>
 8007c2c:	e7ea      	b.n	8007c04 <__lshift+0xa4>
 8007c2e:	bf00      	nop
 8007c30:	08009537 	.word	0x08009537
 8007c34:	080095a0 	.word	0x080095a0

08007c38 <__mcmp>:
 8007c38:	4603      	mov	r3, r0
 8007c3a:	690a      	ldr	r2, [r1, #16]
 8007c3c:	6900      	ldr	r0, [r0, #16]
 8007c3e:	b530      	push	{r4, r5, lr}
 8007c40:	1a80      	subs	r0, r0, r2
 8007c42:	d10d      	bne.n	8007c60 <__mcmp+0x28>
 8007c44:	3314      	adds	r3, #20
 8007c46:	3114      	adds	r1, #20
 8007c48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c58:	4295      	cmp	r5, r2
 8007c5a:	d002      	beq.n	8007c62 <__mcmp+0x2a>
 8007c5c:	d304      	bcc.n	8007c68 <__mcmp+0x30>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	bd30      	pop	{r4, r5, pc}
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	d3f4      	bcc.n	8007c50 <__mcmp+0x18>
 8007c66:	e7fb      	b.n	8007c60 <__mcmp+0x28>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e7f8      	b.n	8007c60 <__mcmp+0x28>
	...

08007c70 <__mdiff>:
 8007c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	460d      	mov	r5, r1
 8007c76:	4607      	mov	r7, r0
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	4614      	mov	r4, r2
 8007c7e:	f7ff ffdb 	bl	8007c38 <__mcmp>
 8007c82:	1e06      	subs	r6, r0, #0
 8007c84:	d111      	bne.n	8007caa <__mdiff+0x3a>
 8007c86:	4631      	mov	r1, r6
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7ff fda9 	bl	80077e0 <_Balloc>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	b928      	cbnz	r0, 8007c9e <__mdiff+0x2e>
 8007c92:	f240 2137 	movw	r1, #567	; 0x237
 8007c96:	4b3a      	ldr	r3, [pc, #232]	; (8007d80 <__mdiff+0x110>)
 8007c98:	483a      	ldr	r0, [pc, #232]	; (8007d84 <__mdiff+0x114>)
 8007c9a:	f000 f977 	bl	8007f8c <__assert_func>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	bfa4      	itt	ge
 8007cac:	4623      	movge	r3, r4
 8007cae:	462c      	movge	r4, r5
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	6861      	ldr	r1, [r4, #4]
 8007cb4:	bfa6      	itte	ge
 8007cb6:	461d      	movge	r5, r3
 8007cb8:	2600      	movge	r6, #0
 8007cba:	2601      	movlt	r6, #1
 8007cbc:	f7ff fd90 	bl	80077e0 <_Balloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	b918      	cbnz	r0, 8007ccc <__mdiff+0x5c>
 8007cc4:	f240 2145 	movw	r1, #581	; 0x245
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <__mdiff+0x110>)
 8007cca:	e7e5      	b.n	8007c98 <__mdiff+0x28>
 8007ccc:	f102 0814 	add.w	r8, r2, #20
 8007cd0:	46c2      	mov	sl, r8
 8007cd2:	f04f 0c00 	mov.w	ip, #0
 8007cd6:	6927      	ldr	r7, [r4, #16]
 8007cd8:	60c6      	str	r6, [r0, #12]
 8007cda:	692e      	ldr	r6, [r5, #16]
 8007cdc:	f104 0014 	add.w	r0, r4, #20
 8007ce0:	f105 0914 	add.w	r9, r5, #20
 8007ce4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007ce8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cec:	3410      	adds	r4, #16
 8007cee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007cf2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cf6:	fa1f f18b 	uxth.w	r1, fp
 8007cfa:	4461      	add	r1, ip
 8007cfc:	fa1f fc83 	uxth.w	ip, r3
 8007d00:	0c1b      	lsrs	r3, r3, #16
 8007d02:	eba1 010c 	sub.w	r1, r1, ip
 8007d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d0e:	b289      	uxth	r1, r1
 8007d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d14:	454e      	cmp	r6, r9
 8007d16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d1a:	f84a 1b04 	str.w	r1, [sl], #4
 8007d1e:	d8e6      	bhi.n	8007cee <__mdiff+0x7e>
 8007d20:	1b73      	subs	r3, r6, r5
 8007d22:	3b15      	subs	r3, #21
 8007d24:	f023 0303 	bic.w	r3, r3, #3
 8007d28:	3515      	adds	r5, #21
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	42ae      	cmp	r6, r5
 8007d2e:	bf38      	it	cc
 8007d30:	2304      	movcc	r3, #4
 8007d32:	4418      	add	r0, r3
 8007d34:	4443      	add	r3, r8
 8007d36:	461e      	mov	r6, r3
 8007d38:	4605      	mov	r5, r0
 8007d3a:	4575      	cmp	r5, lr
 8007d3c:	d30e      	bcc.n	8007d5c <__mdiff+0xec>
 8007d3e:	f10e 0103 	add.w	r1, lr, #3
 8007d42:	1a09      	subs	r1, r1, r0
 8007d44:	f021 0103 	bic.w	r1, r1, #3
 8007d48:	3803      	subs	r0, #3
 8007d4a:	4586      	cmp	lr, r0
 8007d4c:	bf38      	it	cc
 8007d4e:	2100      	movcc	r1, #0
 8007d50:	440b      	add	r3, r1
 8007d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d56:	b189      	cbz	r1, 8007d7c <__mdiff+0x10c>
 8007d58:	6117      	str	r7, [r2, #16]
 8007d5a:	e7a3      	b.n	8007ca4 <__mdiff+0x34>
 8007d5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d60:	fa1f f188 	uxth.w	r1, r8
 8007d64:	4461      	add	r1, ip
 8007d66:	140c      	asrs	r4, r1, #16
 8007d68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d6c:	b289      	uxth	r1, r1
 8007d6e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d72:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d76:	f846 1b04 	str.w	r1, [r6], #4
 8007d7a:	e7de      	b.n	8007d3a <__mdiff+0xca>
 8007d7c:	3f01      	subs	r7, #1
 8007d7e:	e7e8      	b.n	8007d52 <__mdiff+0xe2>
 8007d80:	08009537 	.word	0x08009537
 8007d84:	080095a0 	.word	0x080095a0

08007d88 <__d2b>:
 8007d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4617      	mov	r7, r2
 8007d8e:	461c      	mov	r4, r3
 8007d90:	9e08      	ldr	r6, [sp, #32]
 8007d92:	f7ff fd25 	bl	80077e0 <_Balloc>
 8007d96:	4605      	mov	r5, r0
 8007d98:	b930      	cbnz	r0, 8007da8 <__d2b+0x20>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	f240 310f 	movw	r1, #783	; 0x30f
 8007da0:	4b22      	ldr	r3, [pc, #136]	; (8007e2c <__d2b+0xa4>)
 8007da2:	4823      	ldr	r0, [pc, #140]	; (8007e30 <__d2b+0xa8>)
 8007da4:	f000 f8f2 	bl	8007f8c <__assert_func>
 8007da8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007dac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007db0:	bb24      	cbnz	r4, 8007dfc <__d2b+0x74>
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	d026      	beq.n	8007e06 <__d2b+0x7e>
 8007db8:	4668      	mov	r0, sp
 8007dba:	9700      	str	r7, [sp, #0]
 8007dbc:	f7ff fda4 	bl	8007908 <__lo0bits>
 8007dc0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dc4:	b1e8      	cbz	r0, 8007e02 <__d2b+0x7a>
 8007dc6:	f1c0 0320 	rsb	r3, r0, #32
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	40c2      	lsrs	r2, r0
 8007dd2:	616b      	str	r3, [r5, #20]
 8007dd4:	9201      	str	r2, [sp, #4]
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bf14      	ite	ne
 8007ddc:	2102      	movne	r1, #2
 8007dde:	2101      	moveq	r1, #1
 8007de0:	61ab      	str	r3, [r5, #24]
 8007de2:	6129      	str	r1, [r5, #16]
 8007de4:	b1bc      	cbz	r4, 8007e16 <__d2b+0x8e>
 8007de6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007dea:	4404      	add	r4, r0
 8007dec:	6034      	str	r4, [r6, #0]
 8007dee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	6018      	str	r0, [r3, #0]
 8007df6:	4628      	mov	r0, r5
 8007df8:	b003      	add	sp, #12
 8007dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e00:	e7d7      	b.n	8007db2 <__d2b+0x2a>
 8007e02:	6169      	str	r1, [r5, #20]
 8007e04:	e7e7      	b.n	8007dd6 <__d2b+0x4e>
 8007e06:	a801      	add	r0, sp, #4
 8007e08:	f7ff fd7e 	bl	8007908 <__lo0bits>
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	2101      	movs	r1, #1
 8007e10:	616b      	str	r3, [r5, #20]
 8007e12:	3020      	adds	r0, #32
 8007e14:	e7e5      	b.n	8007de2 <__d2b+0x5a>
 8007e16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e1a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007e1e:	6030      	str	r0, [r6, #0]
 8007e20:	6918      	ldr	r0, [r3, #16]
 8007e22:	f7ff fd51 	bl	80078c8 <__hi0bits>
 8007e26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e2a:	e7e2      	b.n	8007df2 <__d2b+0x6a>
 8007e2c:	08009537 	.word	0x08009537
 8007e30:	080095a0 	.word	0x080095a0

08007e34 <__ssprint_r>:
 8007e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	6813      	ldr	r3, [r2, #0]
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	6893      	ldr	r3, [r2, #8]
 8007e40:	460c      	mov	r4, r1
 8007e42:	4617      	mov	r7, r2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d157      	bne.n	8007ef8 <__ssprint_r+0xc4>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	607b      	str	r3, [r7, #4]
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	68a6      	ldr	r6, [r4, #8]
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	f1bb 0f00 	cmp.w	fp, #0
 8007e66:	d0f5      	beq.n	8007e54 <__ssprint_r+0x20>
 8007e68:	45b3      	cmp	fp, r6
 8007e6a:	d32d      	bcc.n	8007ec8 <__ssprint_r+0x94>
 8007e6c:	89a2      	ldrh	r2, [r4, #12]
 8007e6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e72:	d029      	beq.n	8007ec8 <__ssprint_r+0x94>
 8007e74:	6921      	ldr	r1, [r4, #16]
 8007e76:	6965      	ldr	r5, [r4, #20]
 8007e78:	eba0 0901 	sub.w	r9, r0, r1
 8007e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e84:	f109 0001 	add.w	r0, r9, #1
 8007e88:	106d      	asrs	r5, r5, #1
 8007e8a:	4458      	add	r0, fp
 8007e8c:	4285      	cmp	r5, r0
 8007e8e:	bf38      	it	cc
 8007e90:	4605      	movcc	r5, r0
 8007e92:	0553      	lsls	r3, r2, #21
 8007e94:	d534      	bpl.n	8007f00 <__ssprint_r+0xcc>
 8007e96:	4629      	mov	r1, r5
 8007e98:	4640      	mov	r0, r8
 8007e9a:	f7fd f86b 	bl	8004f74 <_malloc_r>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d038      	beq.n	8007f16 <__ssprint_r+0xe2>
 8007ea4:	464a      	mov	r2, r9
 8007ea6:	6921      	ldr	r1, [r4, #16]
 8007ea8:	f000 f862 	bl	8007f70 <memcpy>
 8007eac:	89a2      	ldrh	r2, [r4, #12]
 8007eae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eb6:	81a2      	strh	r2, [r4, #12]
 8007eb8:	6126      	str	r6, [r4, #16]
 8007eba:	444e      	add	r6, r9
 8007ebc:	6026      	str	r6, [r4, #0]
 8007ebe:	465e      	mov	r6, fp
 8007ec0:	6165      	str	r5, [r4, #20]
 8007ec2:	eba5 0509 	sub.w	r5, r5, r9
 8007ec6:	60a5      	str	r5, [r4, #8]
 8007ec8:	455e      	cmp	r6, fp
 8007eca:	bf28      	it	cs
 8007ecc:	465e      	movcs	r6, fp
 8007ece:	4651      	mov	r1, sl
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	f000 f82b 	bl	8007f2e <memmove>
 8007ed8:	68a2      	ldr	r2, [r4, #8]
 8007eda:	44da      	add	sl, fp
 8007edc:	1b92      	subs	r2, r2, r6
 8007ede:	60a2      	str	r2, [r4, #8]
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	4432      	add	r2, r6
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	eba2 030b 	sub.w	r3, r2, fp
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0aa      	beq.n	8007e48 <__ssprint_r+0x14>
 8007ef2:	f04f 0b00 	mov.w	fp, #0
 8007ef6:	e7b2      	b.n	8007e5e <__ssprint_r+0x2a>
 8007ef8:	f04f 0a00 	mov.w	sl, #0
 8007efc:	46d3      	mov	fp, sl
 8007efe:	e7ae      	b.n	8007e5e <__ssprint_r+0x2a>
 8007f00:	462a      	mov	r2, r5
 8007f02:	4640      	mov	r0, r8
 8007f04:	f000 f8a8 	bl	8008058 <_realloc_r>
 8007f08:	4606      	mov	r6, r0
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1d4      	bne.n	8007eb8 <__ssprint_r+0x84>
 8007f0e:	4640      	mov	r0, r8
 8007f10:	6921      	ldr	r1, [r4, #16]
 8007f12:	f7fc ff6f 	bl	8004df4 <_free_r>
 8007f16:	230c      	movs	r3, #12
 8007f18:	f8c8 3000 	str.w	r3, [r8]
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	e78d      	b.n	8007e4a <__ssprint_r+0x16>

08007f2e <memmove>:
 8007f2e:	4288      	cmp	r0, r1
 8007f30:	b510      	push	{r4, lr}
 8007f32:	eb01 0402 	add.w	r4, r1, r2
 8007f36:	d902      	bls.n	8007f3e <memmove+0x10>
 8007f38:	4284      	cmp	r4, r0
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	d807      	bhi.n	8007f4e <memmove+0x20>
 8007f3e:	1e43      	subs	r3, r0, #1
 8007f40:	42a1      	cmp	r1, r4
 8007f42:	d008      	beq.n	8007f56 <memmove+0x28>
 8007f44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f4c:	e7f8      	b.n	8007f40 <memmove+0x12>
 8007f4e:	4601      	mov	r1, r0
 8007f50:	4402      	add	r2, r0
 8007f52:	428a      	cmp	r2, r1
 8007f54:	d100      	bne.n	8007f58 <memmove+0x2a>
 8007f56:	bd10      	pop	{r4, pc}
 8007f58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f60:	e7f7      	b.n	8007f52 <memmove+0x24>
	...

08007f64 <__locale_mb_cur_max>:
 8007f64:	4b01      	ldr	r3, [pc, #4]	; (8007f6c <__locale_mb_cur_max+0x8>)
 8007f66:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007f6a:	4770      	bx	lr
 8007f6c:	20000558 	.word	0x20000558

08007f70 <memcpy>:
 8007f70:	440a      	add	r2, r1
 8007f72:	4291      	cmp	r1, r2
 8007f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f78:	d100      	bne.n	8007f7c <memcpy+0xc>
 8007f7a:	4770      	bx	lr
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f82:	4291      	cmp	r1, r2
 8007f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f88:	d1f9      	bne.n	8007f7e <memcpy+0xe>
 8007f8a:	bd10      	pop	{r4, pc}

08007f8c <__assert_func>:
 8007f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f8e:	4614      	mov	r4, r2
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <__assert_func+0x2c>)
 8007f94:	4605      	mov	r5, r0
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68d8      	ldr	r0, [r3, #12]
 8007f9a:	b14c      	cbz	r4, 8007fb0 <__assert_func+0x24>
 8007f9c:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <__assert_func+0x30>)
 8007f9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fa2:	9100      	str	r1, [sp, #0]
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	4906      	ldr	r1, [pc, #24]	; (8007fc0 <__assert_func+0x34>)
 8007fa8:	f000 fa0e 	bl	80083c8 <fiprintf>
 8007fac:	f001 f92a 	bl	8009204 <abort>
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <__assert_func+0x38>)
 8007fb2:	461c      	mov	r4, r3
 8007fb4:	e7f3      	b.n	8007f9e <__assert_func+0x12>
 8007fb6:	bf00      	nop
 8007fb8:	20000140 	.word	0x20000140
 8007fbc:	08009706 	.word	0x08009706
 8007fc0:	08009713 	.word	0x08009713
 8007fc4:	08009741 	.word	0x08009741

08007fc8 <_calloc_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	fba1 1502 	umull	r1, r5, r1, r2
 8007fce:	b92d      	cbnz	r5, 8007fdc <_calloc_r+0x14>
 8007fd0:	f7fc ffd0 	bl	8004f74 <_malloc_r>
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	b938      	cbnz	r0, 8007fe8 <_calloc_r+0x20>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	f7fc fe78 	bl	8004cd0 <__errno>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	e7f7      	b.n	8007fd8 <_calloc_r+0x10>
 8007fe8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007fec:	f022 0203 	bic.w	r2, r2, #3
 8007ff0:	3a04      	subs	r2, #4
 8007ff2:	2a24      	cmp	r2, #36	; 0x24
 8007ff4:	d819      	bhi.n	800802a <_calloc_r+0x62>
 8007ff6:	2a13      	cmp	r2, #19
 8007ff8:	d915      	bls.n	8008026 <_calloc_r+0x5e>
 8007ffa:	2a1b      	cmp	r2, #27
 8007ffc:	e9c0 5500 	strd	r5, r5, [r0]
 8008000:	d806      	bhi.n	8008010 <_calloc_r+0x48>
 8008002:	f100 0308 	add.w	r3, r0, #8
 8008006:	2200      	movs	r2, #0
 8008008:	e9c3 2200 	strd	r2, r2, [r3]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	e7e3      	b.n	8007fd8 <_calloc_r+0x10>
 8008010:	2a24      	cmp	r2, #36	; 0x24
 8008012:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8008016:	bf11      	iteee	ne
 8008018:	f100 0310 	addne.w	r3, r0, #16
 800801c:	6105      	streq	r5, [r0, #16]
 800801e:	f100 0318 	addeq.w	r3, r0, #24
 8008022:	6145      	streq	r5, [r0, #20]
 8008024:	e7ef      	b.n	8008006 <_calloc_r+0x3e>
 8008026:	4603      	mov	r3, r0
 8008028:	e7ed      	b.n	8008006 <_calloc_r+0x3e>
 800802a:	4629      	mov	r1, r5
 800802c:	f7fc fe01 	bl	8004c32 <memset>
 8008030:	e7d2      	b.n	8007fd8 <_calloc_r+0x10>

08008032 <__ascii_mbtowc>:
 8008032:	b082      	sub	sp, #8
 8008034:	b901      	cbnz	r1, 8008038 <__ascii_mbtowc+0x6>
 8008036:	a901      	add	r1, sp, #4
 8008038:	b142      	cbz	r2, 800804c <__ascii_mbtowc+0x1a>
 800803a:	b14b      	cbz	r3, 8008050 <__ascii_mbtowc+0x1e>
 800803c:	7813      	ldrb	r3, [r2, #0]
 800803e:	600b      	str	r3, [r1, #0]
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	1e10      	subs	r0, r2, #0
 8008044:	bf18      	it	ne
 8008046:	2001      	movne	r0, #1
 8008048:	b002      	add	sp, #8
 800804a:	4770      	bx	lr
 800804c:	4610      	mov	r0, r2
 800804e:	e7fb      	b.n	8008048 <__ascii_mbtowc+0x16>
 8008050:	f06f 0001 	mvn.w	r0, #1
 8008054:	e7f8      	b.n	8008048 <__ascii_mbtowc+0x16>
	...

08008058 <_realloc_r>:
 8008058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	4682      	mov	sl, r0
 8008060:	4611      	mov	r1, r2
 8008062:	b924      	cbnz	r4, 800806e <_realloc_r+0x16>
 8008064:	b003      	add	sp, #12
 8008066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f7fc bf83 	b.w	8004f74 <_malloc_r>
 800806e:	9201      	str	r2, [sp, #4]
 8008070:	f7fd f9ba 	bl	80053e8 <__malloc_lock>
 8008074:	9901      	ldr	r1, [sp, #4]
 8008076:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800807a:	f101 080b 	add.w	r8, r1, #11
 800807e:	f1b8 0f16 	cmp.w	r8, #22
 8008082:	d90b      	bls.n	800809c <_realloc_r+0x44>
 8008084:	f038 0807 	bics.w	r8, r8, #7
 8008088:	d50a      	bpl.n	80080a0 <_realloc_r+0x48>
 800808a:	230c      	movs	r3, #12
 800808c:	f04f 0b00 	mov.w	fp, #0
 8008090:	f8ca 3000 	str.w	r3, [sl]
 8008094:	4658      	mov	r0, fp
 8008096:	b003      	add	sp, #12
 8008098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	f04f 0810 	mov.w	r8, #16
 80080a0:	4588      	cmp	r8, r1
 80080a2:	d3f2      	bcc.n	800808a <_realloc_r+0x32>
 80080a4:	f025 0603 	bic.w	r6, r5, #3
 80080a8:	45b0      	cmp	r8, r6
 80080aa:	f1a4 0908 	sub.w	r9, r4, #8
 80080ae:	f340 8173 	ble.w	8008398 <_realloc_r+0x340>
 80080b2:	4a9d      	ldr	r2, [pc, #628]	; (8008328 <_realloc_r+0x2d0>)
 80080b4:	eb09 0306 	add.w	r3, r9, r6
 80080b8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	459c      	cmp	ip, r3
 80080c0:	d005      	beq.n	80080ce <_realloc_r+0x76>
 80080c2:	f022 0001 	bic.w	r0, r2, #1
 80080c6:	4418      	add	r0, r3
 80080c8:	6840      	ldr	r0, [r0, #4]
 80080ca:	07c7      	lsls	r7, r0, #31
 80080cc:	d447      	bmi.n	800815e <_realloc_r+0x106>
 80080ce:	f022 0203 	bic.w	r2, r2, #3
 80080d2:	459c      	cmp	ip, r3
 80080d4:	eb06 0702 	add.w	r7, r6, r2
 80080d8:	d119      	bne.n	800810e <_realloc_r+0xb6>
 80080da:	f108 0010 	add.w	r0, r8, #16
 80080de:	42b8      	cmp	r0, r7
 80080e0:	dc3f      	bgt.n	8008162 <_realloc_r+0x10a>
 80080e2:	4a91      	ldr	r2, [pc, #580]	; (8008328 <_realloc_r+0x2d0>)
 80080e4:	eba7 0708 	sub.w	r7, r7, r8
 80080e8:	eb09 0308 	add.w	r3, r9, r8
 80080ec:	f047 0701 	orr.w	r7, r7, #1
 80080f0:	6093      	str	r3, [r2, #8]
 80080f2:	605f      	str	r7, [r3, #4]
 80080f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80080f8:	4650      	mov	r0, sl
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	ea43 0308 	orr.w	r3, r3, r8
 8008102:	f844 3c04 	str.w	r3, [r4, #-4]
 8008106:	f7fd f975 	bl	80053f4 <__malloc_unlock>
 800810a:	46a3      	mov	fp, r4
 800810c:	e7c2      	b.n	8008094 <_realloc_r+0x3c>
 800810e:	45b8      	cmp	r8, r7
 8008110:	dc27      	bgt.n	8008162 <_realloc_r+0x10a>
 8008112:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008116:	60da      	str	r2, [r3, #12]
 8008118:	6093      	str	r3, [r2, #8]
 800811a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800811e:	eba7 0008 	sub.w	r0, r7, r8
 8008122:	280f      	cmp	r0, #15
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	eb09 0207 	add.w	r2, r9, r7
 800812c:	f240 8136 	bls.w	800839c <_realloc_r+0x344>
 8008130:	eb09 0108 	add.w	r1, r9, r8
 8008134:	ea48 0303 	orr.w	r3, r8, r3
 8008138:	f040 0001 	orr.w	r0, r0, #1
 800813c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008140:	6048      	str	r0, [r1, #4]
 8008142:	6853      	ldr	r3, [r2, #4]
 8008144:	4650      	mov	r0, sl
 8008146:	f043 0301 	orr.w	r3, r3, #1
 800814a:	6053      	str	r3, [r2, #4]
 800814c:	3108      	adds	r1, #8
 800814e:	f7fc fe51 	bl	8004df4 <_free_r>
 8008152:	4650      	mov	r0, sl
 8008154:	f7fd f94e 	bl	80053f4 <__malloc_unlock>
 8008158:	f109 0b08 	add.w	fp, r9, #8
 800815c:	e79a      	b.n	8008094 <_realloc_r+0x3c>
 800815e:	2200      	movs	r2, #0
 8008160:	4613      	mov	r3, r2
 8008162:	07e8      	lsls	r0, r5, #31
 8008164:	f100 80c9 	bmi.w	80082fa <_realloc_r+0x2a2>
 8008168:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800816c:	eba9 0505 	sub.w	r5, r9, r5
 8008170:	6868      	ldr	r0, [r5, #4]
 8008172:	f020 0003 	bic.w	r0, r0, #3
 8008176:	eb00 0b06 	add.w	fp, r0, r6
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8088 	beq.w	8008290 <_realloc_r+0x238>
 8008180:	459c      	cmp	ip, r3
 8008182:	eb02 070b 	add.w	r7, r2, fp
 8008186:	d14a      	bne.n	800821e <_realloc_r+0x1c6>
 8008188:	f108 0310 	add.w	r3, r8, #16
 800818c:	42bb      	cmp	r3, r7
 800818e:	dc7f      	bgt.n	8008290 <_realloc_r+0x238>
 8008190:	46ab      	mov	fp, r5
 8008192:	68eb      	ldr	r3, [r5, #12]
 8008194:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8008198:	60d3      	str	r3, [r2, #12]
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	1f32      	subs	r2, r6, #4
 800819e:	2a24      	cmp	r2, #36	; 0x24
 80081a0:	d838      	bhi.n	8008214 <_realloc_r+0x1bc>
 80081a2:	2a13      	cmp	r2, #19
 80081a4:	d934      	bls.n	8008210 <_realloc_r+0x1b8>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	2a1b      	cmp	r2, #27
 80081aa:	60ab      	str	r3, [r5, #8]
 80081ac:	6863      	ldr	r3, [r4, #4]
 80081ae:	60eb      	str	r3, [r5, #12]
 80081b0:	d81b      	bhi.n	80081ea <_realloc_r+0x192>
 80081b2:	3408      	adds	r4, #8
 80081b4:	f105 0310 	add.w	r3, r5, #16
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	6862      	ldr	r2, [r4, #4]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	68a2      	ldr	r2, [r4, #8]
 80081c2:	609a      	str	r2, [r3, #8]
 80081c4:	4a58      	ldr	r2, [pc, #352]	; (8008328 <_realloc_r+0x2d0>)
 80081c6:	eba7 0708 	sub.w	r7, r7, r8
 80081ca:	eb05 0308 	add.w	r3, r5, r8
 80081ce:	f047 0701 	orr.w	r7, r7, #1
 80081d2:	6093      	str	r3, [r2, #8]
 80081d4:	605f      	str	r7, [r3, #4]
 80081d6:	686b      	ldr	r3, [r5, #4]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	ea43 0308 	orr.w	r3, r3, r8
 80081e0:	606b      	str	r3, [r5, #4]
 80081e2:	4650      	mov	r0, sl
 80081e4:	f7fd f906 	bl	80053f4 <__malloc_unlock>
 80081e8:	e754      	b.n	8008094 <_realloc_r+0x3c>
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	2a24      	cmp	r2, #36	; 0x24
 80081ee:	612b      	str	r3, [r5, #16]
 80081f0:	68e3      	ldr	r3, [r4, #12]
 80081f2:	bf18      	it	ne
 80081f4:	3410      	addne	r4, #16
 80081f6:	616b      	str	r3, [r5, #20]
 80081f8:	bf09      	itett	eq
 80081fa:	6923      	ldreq	r3, [r4, #16]
 80081fc:	f105 0318 	addne.w	r3, r5, #24
 8008200:	61ab      	streq	r3, [r5, #24]
 8008202:	6962      	ldreq	r2, [r4, #20]
 8008204:	bf02      	ittt	eq
 8008206:	f105 0320 	addeq.w	r3, r5, #32
 800820a:	61ea      	streq	r2, [r5, #28]
 800820c:	3418      	addeq	r4, #24
 800820e:	e7d3      	b.n	80081b8 <_realloc_r+0x160>
 8008210:	465b      	mov	r3, fp
 8008212:	e7d1      	b.n	80081b8 <_realloc_r+0x160>
 8008214:	4621      	mov	r1, r4
 8008216:	4658      	mov	r0, fp
 8008218:	f7ff fe89 	bl	8007f2e <memmove>
 800821c:	e7d2      	b.n	80081c4 <_realloc_r+0x16c>
 800821e:	45b8      	cmp	r8, r7
 8008220:	dc36      	bgt.n	8008290 <_realloc_r+0x238>
 8008222:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008226:	4628      	mov	r0, r5
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	6093      	str	r3, [r2, #8]
 800822c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008230:	68eb      	ldr	r3, [r5, #12]
 8008232:	60d3      	str	r3, [r2, #12]
 8008234:	609a      	str	r2, [r3, #8]
 8008236:	1f32      	subs	r2, r6, #4
 8008238:	2a24      	cmp	r2, #36	; 0x24
 800823a:	d825      	bhi.n	8008288 <_realloc_r+0x230>
 800823c:	2a13      	cmp	r2, #19
 800823e:	d908      	bls.n	8008252 <_realloc_r+0x1fa>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	2a1b      	cmp	r2, #27
 8008244:	60ab      	str	r3, [r5, #8]
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	60eb      	str	r3, [r5, #12]
 800824a:	d80a      	bhi.n	8008262 <_realloc_r+0x20a>
 800824c:	3408      	adds	r4, #8
 800824e:	f105 0010 	add.w	r0, r5, #16
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	6003      	str	r3, [r0, #0]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	6043      	str	r3, [r0, #4]
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	6083      	str	r3, [r0, #8]
 800825e:	46a9      	mov	r9, r5
 8008260:	e75b      	b.n	800811a <_realloc_r+0xc2>
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	2a24      	cmp	r2, #36	; 0x24
 8008266:	612b      	str	r3, [r5, #16]
 8008268:	68e3      	ldr	r3, [r4, #12]
 800826a:	bf18      	it	ne
 800826c:	f105 0018 	addne.w	r0, r5, #24
 8008270:	616b      	str	r3, [r5, #20]
 8008272:	bf09      	itett	eq
 8008274:	6923      	ldreq	r3, [r4, #16]
 8008276:	3410      	addne	r4, #16
 8008278:	61ab      	streq	r3, [r5, #24]
 800827a:	6963      	ldreq	r3, [r4, #20]
 800827c:	bf02      	ittt	eq
 800827e:	f105 0020 	addeq.w	r0, r5, #32
 8008282:	61eb      	streq	r3, [r5, #28]
 8008284:	3418      	addeq	r4, #24
 8008286:	e7e4      	b.n	8008252 <_realloc_r+0x1fa>
 8008288:	4621      	mov	r1, r4
 800828a:	f7ff fe50 	bl	8007f2e <memmove>
 800828e:	e7e6      	b.n	800825e <_realloc_r+0x206>
 8008290:	45d8      	cmp	r8, fp
 8008292:	dc32      	bgt.n	80082fa <_realloc_r+0x2a2>
 8008294:	4628      	mov	r0, r5
 8008296:	68eb      	ldr	r3, [r5, #12]
 8008298:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800829c:	60d3      	str	r3, [r2, #12]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	1f32      	subs	r2, r6, #4
 80082a2:	2a24      	cmp	r2, #36	; 0x24
 80082a4:	d825      	bhi.n	80082f2 <_realloc_r+0x29a>
 80082a6:	2a13      	cmp	r2, #19
 80082a8:	d908      	bls.n	80082bc <_realloc_r+0x264>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	2a1b      	cmp	r2, #27
 80082ae:	60ab      	str	r3, [r5, #8]
 80082b0:	6863      	ldr	r3, [r4, #4]
 80082b2:	60eb      	str	r3, [r5, #12]
 80082b4:	d80a      	bhi.n	80082cc <_realloc_r+0x274>
 80082b6:	3408      	adds	r4, #8
 80082b8:	f105 0010 	add.w	r0, r5, #16
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	6003      	str	r3, [r0, #0]
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	6043      	str	r3, [r0, #4]
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	6083      	str	r3, [r0, #8]
 80082c8:	465f      	mov	r7, fp
 80082ca:	e7c8      	b.n	800825e <_realloc_r+0x206>
 80082cc:	68a3      	ldr	r3, [r4, #8]
 80082ce:	2a24      	cmp	r2, #36	; 0x24
 80082d0:	612b      	str	r3, [r5, #16]
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	bf18      	it	ne
 80082d6:	f105 0018 	addne.w	r0, r5, #24
 80082da:	616b      	str	r3, [r5, #20]
 80082dc:	bf09      	itett	eq
 80082de:	6923      	ldreq	r3, [r4, #16]
 80082e0:	3410      	addne	r4, #16
 80082e2:	61ab      	streq	r3, [r5, #24]
 80082e4:	6963      	ldreq	r3, [r4, #20]
 80082e6:	bf02      	ittt	eq
 80082e8:	f105 0020 	addeq.w	r0, r5, #32
 80082ec:	61eb      	streq	r3, [r5, #28]
 80082ee:	3418      	addeq	r4, #24
 80082f0:	e7e4      	b.n	80082bc <_realloc_r+0x264>
 80082f2:	4621      	mov	r1, r4
 80082f4:	f7ff fe1b 	bl	8007f2e <memmove>
 80082f8:	e7e6      	b.n	80082c8 <_realloc_r+0x270>
 80082fa:	4650      	mov	r0, sl
 80082fc:	f7fc fe3a 	bl	8004f74 <_malloc_r>
 8008300:	4683      	mov	fp, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	f43f af6d 	beq.w	80081e2 <_realloc_r+0x18a>
 8008308:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800830c:	f1a0 0208 	sub.w	r2, r0, #8
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	444b      	add	r3, r9
 8008316:	4293      	cmp	r3, r2
 8008318:	d108      	bne.n	800832c <_realloc_r+0x2d4>
 800831a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800831e:	f027 0703 	bic.w	r7, r7, #3
 8008322:	4437      	add	r7, r6
 8008324:	e6f9      	b.n	800811a <_realloc_r+0xc2>
 8008326:	bf00      	nop
 8008328:	20000148 	.word	0x20000148
 800832c:	1f32      	subs	r2, r6, #4
 800832e:	2a24      	cmp	r2, #36	; 0x24
 8008330:	d82e      	bhi.n	8008390 <_realloc_r+0x338>
 8008332:	2a13      	cmp	r2, #19
 8008334:	d929      	bls.n	800838a <_realloc_r+0x332>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	2a1b      	cmp	r2, #27
 800833a:	6003      	str	r3, [r0, #0]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	6043      	str	r3, [r0, #4]
 8008340:	d80e      	bhi.n	8008360 <_realloc_r+0x308>
 8008342:	f104 0208 	add.w	r2, r4, #8
 8008346:	f100 0308 	add.w	r3, r0, #8
 800834a:	6811      	ldr	r1, [r2, #0]
 800834c:	6019      	str	r1, [r3, #0]
 800834e:	6851      	ldr	r1, [r2, #4]
 8008350:	6059      	str	r1, [r3, #4]
 8008352:	6892      	ldr	r2, [r2, #8]
 8008354:	609a      	str	r2, [r3, #8]
 8008356:	4621      	mov	r1, r4
 8008358:	4650      	mov	r0, sl
 800835a:	f7fc fd4b 	bl	8004df4 <_free_r>
 800835e:	e740      	b.n	80081e2 <_realloc_r+0x18a>
 8008360:	68a3      	ldr	r3, [r4, #8]
 8008362:	2a24      	cmp	r2, #36	; 0x24
 8008364:	6083      	str	r3, [r0, #8]
 8008366:	68e3      	ldr	r3, [r4, #12]
 8008368:	bf18      	it	ne
 800836a:	f104 0210 	addne.w	r2, r4, #16
 800836e:	60c3      	str	r3, [r0, #12]
 8008370:	bf09      	itett	eq
 8008372:	6923      	ldreq	r3, [r4, #16]
 8008374:	f100 0310 	addne.w	r3, r0, #16
 8008378:	6103      	streq	r3, [r0, #16]
 800837a:	6961      	ldreq	r1, [r4, #20]
 800837c:	bf02      	ittt	eq
 800837e:	f104 0218 	addeq.w	r2, r4, #24
 8008382:	f100 0318 	addeq.w	r3, r0, #24
 8008386:	6141      	streq	r1, [r0, #20]
 8008388:	e7df      	b.n	800834a <_realloc_r+0x2f2>
 800838a:	4603      	mov	r3, r0
 800838c:	4622      	mov	r2, r4
 800838e:	e7dc      	b.n	800834a <_realloc_r+0x2f2>
 8008390:	4621      	mov	r1, r4
 8008392:	f7ff fdcc 	bl	8007f2e <memmove>
 8008396:	e7de      	b.n	8008356 <_realloc_r+0x2fe>
 8008398:	4637      	mov	r7, r6
 800839a:	e6be      	b.n	800811a <_realloc_r+0xc2>
 800839c:	431f      	orrs	r7, r3
 800839e:	f8c9 7004 	str.w	r7, [r9, #4]
 80083a2:	6853      	ldr	r3, [r2, #4]
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	6053      	str	r3, [r2, #4]
 80083aa:	e6d2      	b.n	8008152 <_realloc_r+0xfa>

080083ac <__ascii_wctomb>:
 80083ac:	4603      	mov	r3, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	b141      	cbz	r1, 80083c4 <__ascii_wctomb+0x18>
 80083b2:	2aff      	cmp	r2, #255	; 0xff
 80083b4:	d904      	bls.n	80083c0 <__ascii_wctomb+0x14>
 80083b6:	228a      	movs	r2, #138	; 0x8a
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	4770      	bx	lr
 80083c0:	2001      	movs	r0, #1
 80083c2:	700a      	strb	r2, [r1, #0]
 80083c4:	4770      	bx	lr
	...

080083c8 <fiprintf>:
 80083c8:	b40e      	push	{r1, r2, r3}
 80083ca:	b503      	push	{r0, r1, lr}
 80083cc:	4601      	mov	r1, r0
 80083ce:	ab03      	add	r3, sp, #12
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <fiprintf+0x20>)
 80083d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d6:	6800      	ldr	r0, [r0, #0]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	f000 f839 	bl	8008450 <_vfiprintf_r>
 80083de:	b002      	add	sp, #8
 80083e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e4:	b003      	add	sp, #12
 80083e6:	4770      	bx	lr
 80083e8:	20000140 	.word	0x20000140

080083ec <__sprint_r>:
 80083ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f0:	6893      	ldr	r3, [r2, #8]
 80083f2:	4680      	mov	r8, r0
 80083f4:	460f      	mov	r7, r1
 80083f6:	4614      	mov	r4, r2
 80083f8:	b343      	cbz	r3, 800844c <__sprint_r+0x60>
 80083fa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80083fc:	049d      	lsls	r5, r3, #18
 80083fe:	d522      	bpl.n	8008446 <__sprint_r+0x5a>
 8008400:	6815      	ldr	r5, [r2, #0]
 8008402:	3508      	adds	r5, #8
 8008404:	f04f 0900 	mov.w	r9, #0
 8008408:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800840c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008410:	45ca      	cmp	sl, r9
 8008412:	dc0d      	bgt.n	8008430 <__sprint_r+0x44>
 8008414:	68a0      	ldr	r0, [r4, #8]
 8008416:	f026 0603 	bic.w	r6, r6, #3
 800841a:	1b80      	subs	r0, r0, r6
 800841c:	60a0      	str	r0, [r4, #8]
 800841e:	3508      	adds	r5, #8
 8008420:	2800      	cmp	r0, #0
 8008422:	d1ef      	bne.n	8008404 <__sprint_r+0x18>
 8008424:	2300      	movs	r3, #0
 8008426:	60a3      	str	r3, [r4, #8]
 8008428:	2300      	movs	r3, #0
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	463a      	mov	r2, r7
 8008432:	4640      	mov	r0, r8
 8008434:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008438:	f000 febb 	bl	80091b2 <_fputwc_r>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d0f1      	beq.n	8008424 <__sprint_r+0x38>
 8008440:	f109 0901 	add.w	r9, r9, #1
 8008444:	e7e4      	b.n	8008410 <__sprint_r+0x24>
 8008446:	f000 fcd1 	bl	8008dec <__sfvwrite_r>
 800844a:	e7eb      	b.n	8008424 <__sprint_r+0x38>
 800844c:	4618      	mov	r0, r3
 800844e:	e7eb      	b.n	8008428 <__sprint_r+0x3c>

08008450 <_vfiprintf_r>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	b0bd      	sub	sp, #244	; 0xf4
 8008456:	460f      	mov	r7, r1
 8008458:	461d      	mov	r5, r3
 800845a:	461c      	mov	r4, r3
 800845c:	4681      	mov	r9, r0
 800845e:	9202      	str	r2, [sp, #8]
 8008460:	b118      	cbz	r0, 800846a <_vfiprintf_r+0x1a>
 8008462:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008464:	b90b      	cbnz	r3, 800846a <_vfiprintf_r+0x1a>
 8008466:	f7fc fb4b 	bl	8004b00 <__sinit>
 800846a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800846c:	07d8      	lsls	r0, r3, #31
 800846e:	d405      	bmi.n	800847c <_vfiprintf_r+0x2c>
 8008470:	89bb      	ldrh	r3, [r7, #12]
 8008472:	0599      	lsls	r1, r3, #22
 8008474:	d402      	bmi.n	800847c <_vfiprintf_r+0x2c>
 8008476:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008478:	f7fc fc56 	bl	8004d28 <__retarget_lock_acquire_recursive>
 800847c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008480:	049a      	lsls	r2, r3, #18
 8008482:	d406      	bmi.n	8008492 <_vfiprintf_r+0x42>
 8008484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008488:	81bb      	strh	r3, [r7, #12]
 800848a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800848c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008490:	667b      	str	r3, [r7, #100]	; 0x64
 8008492:	89bb      	ldrh	r3, [r7, #12]
 8008494:	071e      	lsls	r6, r3, #28
 8008496:	d501      	bpl.n	800849c <_vfiprintf_r+0x4c>
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	b9ab      	cbnz	r3, 80084c8 <_vfiprintf_r+0x78>
 800849c:	4639      	mov	r1, r7
 800849e:	4648      	mov	r0, r9
 80084a0:	f000 fdee 	bl	8009080 <__swsetup_r>
 80084a4:	b180      	cbz	r0, 80084c8 <_vfiprintf_r+0x78>
 80084a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084a8:	07d8      	lsls	r0, r3, #31
 80084aa:	d506      	bpl.n	80084ba <_vfiprintf_r+0x6a>
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	9803      	ldr	r0, [sp, #12]
 80084b4:	b03d      	add	sp, #244	; 0xf4
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	89bb      	ldrh	r3, [r7, #12]
 80084bc:	0599      	lsls	r1, r3, #22
 80084be:	d4f5      	bmi.n	80084ac <_vfiprintf_r+0x5c>
 80084c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80084c2:	f7fc fc32 	bl	8004d2a <__retarget_lock_release_recursive>
 80084c6:	e7f1      	b.n	80084ac <_vfiprintf_r+0x5c>
 80084c8:	89bb      	ldrh	r3, [r7, #12]
 80084ca:	f003 021a 	and.w	r2, r3, #26
 80084ce:	2a0a      	cmp	r2, #10
 80084d0:	d114      	bne.n	80084fc <_vfiprintf_r+0xac>
 80084d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	db10      	blt.n	80084fc <_vfiprintf_r+0xac>
 80084da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084dc:	07d2      	lsls	r2, r2, #31
 80084de:	d404      	bmi.n	80084ea <_vfiprintf_r+0x9a>
 80084e0:	059e      	lsls	r6, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_vfiprintf_r+0x9a>
 80084e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80084e6:	f7fc fc20 	bl	8004d2a <__retarget_lock_release_recursive>
 80084ea:	462b      	mov	r3, r5
 80084ec:	4639      	mov	r1, r7
 80084ee:	4648      	mov	r0, r9
 80084f0:	9a02      	ldr	r2, [sp, #8]
 80084f2:	b03d      	add	sp, #244	; 0xf4
 80084f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	f000 bc38 	b.w	8008d6c <__sbprintf>
 80084fc:	2300      	movs	r3, #0
 80084fe:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8008502:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8008506:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800850a:	ae13      	add	r6, sp, #76	; 0x4c
 800850c:	9610      	str	r6, [sp, #64]	; 0x40
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	461d      	mov	r5, r3
 8008514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008518:	b10a      	cbz	r2, 800851e <_vfiprintf_r+0xce>
 800851a:	2a25      	cmp	r2, #37	; 0x25
 800851c:	d1f9      	bne.n	8008512 <_vfiprintf_r+0xc2>
 800851e:	9b02      	ldr	r3, [sp, #8]
 8008520:	ebb5 0803 	subs.w	r8, r5, r3
 8008524:	d00d      	beq.n	8008542 <_vfiprintf_r+0xf2>
 8008526:	e9c6 3800 	strd	r3, r8, [r6]
 800852a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800852c:	4443      	add	r3, r8
 800852e:	9312      	str	r3, [sp, #72]	; 0x48
 8008530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008532:	3301      	adds	r3, #1
 8008534:	2b07      	cmp	r3, #7
 8008536:	9311      	str	r3, [sp, #68]	; 0x44
 8008538:	dc76      	bgt.n	8008628 <_vfiprintf_r+0x1d8>
 800853a:	3608      	adds	r6, #8
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	4443      	add	r3, r8
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	782b      	ldrb	r3, [r5, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 83d2 	beq.w	8008cee <_vfiprintf_r+0x89e>
 800854a:	2300      	movs	r3, #0
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	469a      	mov	sl, r3
 8008552:	3501      	adds	r5, #1
 8008554:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8008558:	9201      	str	r2, [sp, #4]
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	462a      	mov	r2, r5
 800855e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008562:	9202      	str	r2, [sp, #8]
 8008564:	f1a3 0220 	sub.w	r2, r3, #32
 8008568:	2a5a      	cmp	r2, #90	; 0x5a
 800856a:	f200 831a 	bhi.w	8008ba2 <_vfiprintf_r+0x752>
 800856e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008572:	007d      	.short	0x007d
 8008574:	03180318 	.word	0x03180318
 8008578:	03180085 	.word	0x03180085
 800857c:	03180318 	.word	0x03180318
 8008580:	03180065 	.word	0x03180065
 8008584:	00880318 	.word	0x00880318
 8008588:	03180092 	.word	0x03180092
 800858c:	0094008f 	.word	0x0094008f
 8008590:	00af0318 	.word	0x00af0318
 8008594:	00b200b2 	.word	0x00b200b2
 8008598:	00b200b2 	.word	0x00b200b2
 800859c:	00b200b2 	.word	0x00b200b2
 80085a0:	00b200b2 	.word	0x00b200b2
 80085a4:	031800b2 	.word	0x031800b2
 80085a8:	03180318 	.word	0x03180318
 80085ac:	03180318 	.word	0x03180318
 80085b0:	03180318 	.word	0x03180318
 80085b4:	03180318 	.word	0x03180318
 80085b8:	00ea00dc 	.word	0x00ea00dc
 80085bc:	03180318 	.word	0x03180318
 80085c0:	03180318 	.word	0x03180318
 80085c4:	03180318 	.word	0x03180318
 80085c8:	03180318 	.word	0x03180318
 80085cc:	03180318 	.word	0x03180318
 80085d0:	03180139 	.word	0x03180139
 80085d4:	03180318 	.word	0x03180318
 80085d8:	0318017e 	.word	0x0318017e
 80085dc:	0318025c 	.word	0x0318025c
 80085e0:	027c0318 	.word	0x027c0318
 80085e4:	03180318 	.word	0x03180318
 80085e8:	03180318 	.word	0x03180318
 80085ec:	03180318 	.word	0x03180318
 80085f0:	03180318 	.word	0x03180318
 80085f4:	03180318 	.word	0x03180318
 80085f8:	00ec00dc 	.word	0x00ec00dc
 80085fc:	03180318 	.word	0x03180318
 8008600:	00c20318 	.word	0x00c20318
 8008604:	00d600ec 	.word	0x00d600ec
 8008608:	00cf0318 	.word	0x00cf0318
 800860c:	01170318 	.word	0x01170318
 8008610:	0170013b 	.word	0x0170013b
 8008614:	031800d6 	.word	0x031800d6
 8008618:	007b017e 	.word	0x007b017e
 800861c:	0318025e 	.word	0x0318025e
 8008620:	02980318 	.word	0x02980318
 8008624:	007b0318 	.word	0x007b0318
 8008628:	4639      	mov	r1, r7
 800862a:	4648      	mov	r0, r9
 800862c:	aa10      	add	r2, sp, #64	; 0x40
 800862e:	f7ff fedd 	bl	80083ec <__sprint_r>
 8008632:	2800      	cmp	r0, #0
 8008634:	f040 833a 	bne.w	8008cac <_vfiprintf_r+0x85c>
 8008638:	ae13      	add	r6, sp, #76	; 0x4c
 800863a:	e77f      	b.n	800853c <_vfiprintf_r+0xec>
 800863c:	4648      	mov	r0, r9
 800863e:	f7fe f9c7 	bl	80069d0 <_localeconv_r>
 8008642:	6843      	ldr	r3, [r0, #4]
 8008644:	4618      	mov	r0, r3
 8008646:	9309      	str	r3, [sp, #36]	; 0x24
 8008648:	f7f7 fd82 	bl	8000150 <strlen>
 800864c:	9008      	str	r0, [sp, #32]
 800864e:	4648      	mov	r0, r9
 8008650:	f7fe f9be 	bl	80069d0 <_localeconv_r>
 8008654:	6883      	ldr	r3, [r0, #8]
 8008656:	9307      	str	r3, [sp, #28]
 8008658:	9b08      	ldr	r3, [sp, #32]
 800865a:	b12b      	cbz	r3, 8008668 <_vfiprintf_r+0x218>
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	b11b      	cbz	r3, 8008668 <_vfiprintf_r+0x218>
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b10b      	cbz	r3, 8008668 <_vfiprintf_r+0x218>
 8008664:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008668:	9d02      	ldr	r5, [sp, #8]
 800866a:	e777      	b.n	800855c <_vfiprintf_r+0x10c>
 800866c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f9      	bne.n	8008668 <_vfiprintf_r+0x218>
 8008674:	2320      	movs	r3, #32
 8008676:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800867a:	e7f5      	b.n	8008668 <_vfiprintf_r+0x218>
 800867c:	f04a 0a01 	orr.w	sl, sl, #1
 8008680:	e7f2      	b.n	8008668 <_vfiprintf_r+0x218>
 8008682:	f854 3b04 	ldr.w	r3, [r4], #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	daed      	bge.n	8008668 <_vfiprintf_r+0x218>
 800868c:	425b      	negs	r3, r3
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	f04a 0a04 	orr.w	sl, sl, #4
 8008694:	e7e8      	b.n	8008668 <_vfiprintf_r+0x218>
 8008696:	232b      	movs	r3, #43	; 0x2b
 8008698:	e7ed      	b.n	8008676 <_vfiprintf_r+0x226>
 800869a:	9a02      	ldr	r2, [sp, #8]
 800869c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	d112      	bne.n	80086ca <_vfiprintf_r+0x27a>
 80086a4:	f854 3b04 	ldr.w	r3, [r4], #4
 80086a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80086b0:	e7da      	b.n	8008668 <_vfiprintf_r+0x218>
 80086b2:	200a      	movs	r0, #10
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	fb00 1303 	mla	r3, r0, r3, r1
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80086c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80086c4:	2909      	cmp	r1, #9
 80086c6:	d9f4      	bls.n	80086b2 <_vfiprintf_r+0x262>
 80086c8:	e74b      	b.n	8008562 <_vfiprintf_r+0x112>
 80086ca:	2100      	movs	r1, #0
 80086cc:	9101      	str	r1, [sp, #4]
 80086ce:	e7f7      	b.n	80086c0 <_vfiprintf_r+0x270>
 80086d0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80086d4:	e7c8      	b.n	8008668 <_vfiprintf_r+0x218>
 80086d6:	2100      	movs	r1, #0
 80086d8:	9a02      	ldr	r2, [sp, #8]
 80086da:	9104      	str	r1, [sp, #16]
 80086dc:	200a      	movs	r0, #10
 80086de:	9904      	ldr	r1, [sp, #16]
 80086e0:	3b30      	subs	r3, #48	; 0x30
 80086e2:	fb00 3301 	mla	r3, r0, r1, r3
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80086ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80086f0:	2909      	cmp	r1, #9
 80086f2:	d9f3      	bls.n	80086dc <_vfiprintf_r+0x28c>
 80086f4:	e735      	b.n	8008562 <_vfiprintf_r+0x112>
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b68      	cmp	r3, #104	; 0x68
 80086fc:	bf01      	itttt	eq
 80086fe:	9b02      	ldreq	r3, [sp, #8]
 8008700:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008704:	3301      	addeq	r3, #1
 8008706:	9302      	streq	r3, [sp, #8]
 8008708:	bf18      	it	ne
 800870a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800870e:	e7ab      	b.n	8008668 <_vfiprintf_r+0x218>
 8008710:	9b02      	ldr	r3, [sp, #8]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b6c      	cmp	r3, #108	; 0x6c
 8008716:	d105      	bne.n	8008724 <_vfiprintf_r+0x2d4>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	3301      	adds	r3, #1
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	f04a 0a20 	orr.w	sl, sl, #32
 8008722:	e7a1      	b.n	8008668 <_vfiprintf_r+0x218>
 8008724:	f04a 0a10 	orr.w	sl, sl, #16
 8008728:	e79e      	b.n	8008668 <_vfiprintf_r+0x218>
 800872a:	46a0      	mov	r8, r4
 800872c:	f858 3b04 	ldr.w	r3, [r8], #4
 8008730:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8008734:	2300      	movs	r3, #0
 8008736:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800873a:	2201      	movs	r2, #1
 800873c:	461d      	mov	r5, r3
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
 8008744:	e0a8      	b.n	8008898 <_vfiprintf_r+0x448>
 8008746:	f04a 0a10 	orr.w	sl, sl, #16
 800874a:	f01a 0f20 	tst.w	sl, #32
 800874e:	d010      	beq.n	8008772 <_vfiprintf_r+0x322>
 8008750:	3407      	adds	r4, #7
 8008752:	f024 0307 	bic.w	r3, r4, #7
 8008756:	4698      	mov	r8, r3
 8008758:	685d      	ldr	r5, [r3, #4]
 800875a:	f858 4b08 	ldr.w	r4, [r8], #8
 800875e:	2d00      	cmp	r5, #0
 8008760:	da05      	bge.n	800876e <_vfiprintf_r+0x31e>
 8008762:	232d      	movs	r3, #45	; 0x2d
 8008764:	4264      	negs	r4, r4
 8008766:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800876a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800876e:	2301      	movs	r3, #1
 8008770:	e04a      	b.n	8008808 <_vfiprintf_r+0x3b8>
 8008772:	46a0      	mov	r8, r4
 8008774:	f01a 0f10 	tst.w	sl, #16
 8008778:	f858 5b04 	ldr.w	r5, [r8], #4
 800877c:	d002      	beq.n	8008784 <_vfiprintf_r+0x334>
 800877e:	462c      	mov	r4, r5
 8008780:	17ed      	asrs	r5, r5, #31
 8008782:	e7ec      	b.n	800875e <_vfiprintf_r+0x30e>
 8008784:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008788:	d003      	beq.n	8008792 <_vfiprintf_r+0x342>
 800878a:	b22c      	sxth	r4, r5
 800878c:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008790:	e7e5      	b.n	800875e <_vfiprintf_r+0x30e>
 8008792:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008796:	d0f2      	beq.n	800877e <_vfiprintf_r+0x32e>
 8008798:	b26c      	sxtb	r4, r5
 800879a:	f345 15c0 	sbfx	r5, r5, #7, #1
 800879e:	e7de      	b.n	800875e <_vfiprintf_r+0x30e>
 80087a0:	f01a 0f20 	tst.w	sl, #32
 80087a4:	f104 0804 	add.w	r8, r4, #4
 80087a8:	d007      	beq.n	80087ba <_vfiprintf_r+0x36a>
 80087aa:	9a03      	ldr	r2, [sp, #12]
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	9903      	ldr	r1, [sp, #12]
 80087b0:	17d2      	asrs	r2, r2, #31
 80087b2:	e9c3 1200 	strd	r1, r2, [r3]
 80087b6:	4644      	mov	r4, r8
 80087b8:	e6aa      	b.n	8008510 <_vfiprintf_r+0xc0>
 80087ba:	f01a 0f10 	tst.w	sl, #16
 80087be:	d003      	beq.n	80087c8 <_vfiprintf_r+0x378>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	9a03      	ldr	r2, [sp, #12]
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e7f6      	b.n	80087b6 <_vfiprintf_r+0x366>
 80087c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80087cc:	d003      	beq.n	80087d6 <_vfiprintf_r+0x386>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	9a03      	ldr	r2, [sp, #12]
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e7ef      	b.n	80087b6 <_vfiprintf_r+0x366>
 80087d6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80087da:	d0f1      	beq.n	80087c0 <_vfiprintf_r+0x370>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	9a03      	ldr	r2, [sp, #12]
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e7e8      	b.n	80087b6 <_vfiprintf_r+0x366>
 80087e4:	f04a 0a10 	orr.w	sl, sl, #16
 80087e8:	f01a 0320 	ands.w	r3, sl, #32
 80087ec:	d01f      	beq.n	800882e <_vfiprintf_r+0x3de>
 80087ee:	3407      	adds	r4, #7
 80087f0:	f024 0307 	bic.w	r3, r4, #7
 80087f4:	4698      	mov	r8, r3
 80087f6:	685d      	ldr	r5, [r3, #4]
 80087f8:	f858 4b08 	ldr.w	r4, [r8], #8
 80087fc:	2300      	movs	r3, #0
 80087fe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008802:	2200      	movs	r2, #0
 8008804:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	3201      	adds	r2, #1
 800880c:	f000 827c 	beq.w	8008d08 <_vfiprintf_r+0x8b8>
 8008810:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008814:	9205      	str	r2, [sp, #20]
 8008816:	ea54 0205 	orrs.w	r2, r4, r5
 800881a:	f040 827b 	bne.w	8008d14 <_vfiprintf_r+0x8c4>
 800881e:	9a01      	ldr	r2, [sp, #4]
 8008820:	2a00      	cmp	r2, #0
 8008822:	f000 81b3 	beq.w	8008b8c <_vfiprintf_r+0x73c>
 8008826:	2b01      	cmp	r3, #1
 8008828:	f040 8277 	bne.w	8008d1a <_vfiprintf_r+0x8ca>
 800882c:	e151      	b.n	8008ad2 <_vfiprintf_r+0x682>
 800882e:	46a0      	mov	r8, r4
 8008830:	f01a 0510 	ands.w	r5, sl, #16
 8008834:	f858 4b04 	ldr.w	r4, [r8], #4
 8008838:	d001      	beq.n	800883e <_vfiprintf_r+0x3ee>
 800883a:	461d      	mov	r5, r3
 800883c:	e7de      	b.n	80087fc <_vfiprintf_r+0x3ac>
 800883e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008842:	d001      	beq.n	8008848 <_vfiprintf_r+0x3f8>
 8008844:	b2a4      	uxth	r4, r4
 8008846:	e7d9      	b.n	80087fc <_vfiprintf_r+0x3ac>
 8008848:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800884c:	d0d6      	beq.n	80087fc <_vfiprintf_r+0x3ac>
 800884e:	b2e4      	uxtb	r4, r4
 8008850:	e7f3      	b.n	800883a <_vfiprintf_r+0x3ea>
 8008852:	f647 0330 	movw	r3, #30768	; 0x7830
 8008856:	46a0      	mov	r8, r4
 8008858:	2500      	movs	r5, #0
 800885a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800885e:	4ba0      	ldr	r3, [pc, #640]	; (8008ae0 <_vfiprintf_r+0x690>)
 8008860:	f858 4b04 	ldr.w	r4, [r8], #4
 8008864:	f04a 0a02 	orr.w	sl, sl, #2
 8008868:	9306      	str	r3, [sp, #24]
 800886a:	2302      	movs	r3, #2
 800886c:	e7c9      	b.n	8008802 <_vfiprintf_r+0x3b2>
 800886e:	46a0      	mov	r8, r4
 8008870:	2500      	movs	r5, #0
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	f858 bb04 	ldr.w	fp, [r8], #4
 8008878:	1c5c      	adds	r4, r3, #1
 800887a:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 800887e:	f000 80cf 	beq.w	8008a20 <_vfiprintf_r+0x5d0>
 8008882:	461a      	mov	r2, r3
 8008884:	4629      	mov	r1, r5
 8008886:	4658      	mov	r0, fp
 8008888:	f7fe f8d6 	bl	8006a38 <memchr>
 800888c:	2800      	cmp	r0, #0
 800888e:	f000 8192 	beq.w	8008bb6 <_vfiprintf_r+0x766>
 8008892:	eba0 030b 	sub.w	r3, r0, fp
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800889e:	42ab      	cmp	r3, r5
 80088a0:	bfb8      	it	lt
 80088a2:	462b      	movlt	r3, r5
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	b10a      	cbz	r2, 80088ac <_vfiprintf_r+0x45c>
 80088a8:	3301      	adds	r3, #1
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	f01a 0302 	ands.w	r3, sl, #2
 80088b0:	930a      	str	r3, [sp, #40]	; 0x28
 80088b2:	bf1e      	ittt	ne
 80088b4:	9b05      	ldrne	r3, [sp, #20]
 80088b6:	3302      	addne	r3, #2
 80088b8:	9305      	strne	r3, [sp, #20]
 80088ba:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80088be:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c0:	d11f      	bne.n	8008902 <_vfiprintf_r+0x4b2>
 80088c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80088c6:	1a9c      	subs	r4, r3, r2
 80088c8:	2c00      	cmp	r4, #0
 80088ca:	dd1a      	ble.n	8008902 <_vfiprintf_r+0x4b2>
 80088cc:	4b85      	ldr	r3, [pc, #532]	; (8008ae4 <_vfiprintf_r+0x694>)
 80088ce:	2c10      	cmp	r4, #16
 80088d0:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 80088d4:	f106 0008 	add.w	r0, r6, #8
 80088d8:	f102 0201 	add.w	r2, r2, #1
 80088dc:	6033      	str	r3, [r6, #0]
 80088de:	f300 816c 	bgt.w	8008bba <_vfiprintf_r+0x76a>
 80088e2:	6074      	str	r4, [r6, #4]
 80088e4:	2a07      	cmp	r2, #7
 80088e6:	440c      	add	r4, r1
 80088e8:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 80088ec:	f340 817a 	ble.w	8008be4 <_vfiprintf_r+0x794>
 80088f0:	4639      	mov	r1, r7
 80088f2:	4648      	mov	r0, r9
 80088f4:	aa10      	add	r2, sp, #64	; 0x40
 80088f6:	f7ff fd79 	bl	80083ec <__sprint_r>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f040 81d6 	bne.w	8008cac <_vfiprintf_r+0x85c>
 8008900:	ae13      	add	r6, sp, #76	; 0x4c
 8008902:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8008906:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800890a:	b160      	cbz	r0, 8008926 <_vfiprintf_r+0x4d6>
 800890c:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 8008910:	6030      	str	r0, [r6, #0]
 8008912:	2001      	movs	r0, #1
 8008914:	3201      	adds	r2, #1
 8008916:	4401      	add	r1, r0
 8008918:	2a07      	cmp	r2, #7
 800891a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 800891e:	6070      	str	r0, [r6, #4]
 8008920:	f300 8162 	bgt.w	8008be8 <_vfiprintf_r+0x798>
 8008924:	3608      	adds	r6, #8
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800892c:	b15b      	cbz	r3, 8008946 <_vfiprintf_r+0x4f6>
 800892e:	a80f      	add	r0, sp, #60	; 0x3c
 8008930:	6030      	str	r0, [r6, #0]
 8008932:	2002      	movs	r0, #2
 8008934:	3201      	adds	r2, #1
 8008936:	4401      	add	r1, r0
 8008938:	2a07      	cmp	r2, #7
 800893a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 800893e:	6070      	str	r0, [r6, #4]
 8008940:	f300 815b 	bgt.w	8008bfa <_vfiprintf_r+0x7aa>
 8008944:	3608      	adds	r6, #8
 8008946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008948:	2b80      	cmp	r3, #128	; 0x80
 800894a:	d11f      	bne.n	800898c <_vfiprintf_r+0x53c>
 800894c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008950:	1a9c      	subs	r4, r3, r2
 8008952:	2c00      	cmp	r4, #0
 8008954:	dd1a      	ble.n	800898c <_vfiprintf_r+0x53c>
 8008956:	4b64      	ldr	r3, [pc, #400]	; (8008ae8 <_vfiprintf_r+0x698>)
 8008958:	2c10      	cmp	r4, #16
 800895a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800895e:	f106 0008 	add.w	r0, r6, #8
 8008962:	f102 0201 	add.w	r2, r2, #1
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f300 8150 	bgt.w	8008c0c <_vfiprintf_r+0x7bc>
 800896c:	6074      	str	r4, [r6, #4]
 800896e:	2a07      	cmp	r2, #7
 8008970:	440c      	add	r4, r1
 8008972:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8008976:	f340 815e 	ble.w	8008c36 <_vfiprintf_r+0x7e6>
 800897a:	4639      	mov	r1, r7
 800897c:	4648      	mov	r0, r9
 800897e:	aa10      	add	r2, sp, #64	; 0x40
 8008980:	f7ff fd34 	bl	80083ec <__sprint_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	f040 8191 	bne.w	8008cac <_vfiprintf_r+0x85c>
 800898a:	ae13      	add	r6, sp, #76	; 0x4c
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	1aec      	subs	r4, r5, r3
 8008990:	2c00      	cmp	r4, #0
 8008992:	dd1b      	ble.n	80089cc <_vfiprintf_r+0x57c>
 8008994:	2310      	movs	r3, #16
 8008996:	4d54      	ldr	r5, [pc, #336]	; (8008ae8 <_vfiprintf_r+0x698>)
 8008998:	2c10      	cmp	r4, #16
 800899a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800899e:	f106 0008 	add.w	r0, r6, #8
 80089a2:	f102 0201 	add.w	r2, r2, #1
 80089a6:	6035      	str	r5, [r6, #0]
 80089a8:	f300 8147 	bgt.w	8008c3a <_vfiprintf_r+0x7ea>
 80089ac:	6074      	str	r4, [r6, #4]
 80089ae:	2a07      	cmp	r2, #7
 80089b0:	440c      	add	r4, r1
 80089b2:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 80089b6:	f340 8151 	ble.w	8008c5c <_vfiprintf_r+0x80c>
 80089ba:	4639      	mov	r1, r7
 80089bc:	4648      	mov	r0, r9
 80089be:	aa10      	add	r2, sp, #64	; 0x40
 80089c0:	f7ff fd14 	bl	80083ec <__sprint_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 8171 	bne.w	8008cac <_vfiprintf_r+0x85c>
 80089ca:	ae13      	add	r6, sp, #76	; 0x4c
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	9a01      	ldr	r2, [sp, #4]
 80089d0:	6073      	str	r3, [r6, #4]
 80089d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089d4:	f8c6 b000 	str.w	fp, [r6]
 80089d8:	4413      	add	r3, r2
 80089da:	9312      	str	r3, [sp, #72]	; 0x48
 80089dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089de:	3301      	adds	r3, #1
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	9311      	str	r3, [sp, #68]	; 0x44
 80089e4:	f300 813c 	bgt.w	8008c60 <_vfiprintf_r+0x810>
 80089e8:	f106 0308 	add.w	r3, r6, #8
 80089ec:	f01a 0f04 	tst.w	sl, #4
 80089f0:	f040 813e 	bne.w	8008c70 <_vfiprintf_r+0x820>
 80089f4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80089f8:	9905      	ldr	r1, [sp, #20]
 80089fa:	428a      	cmp	r2, r1
 80089fc:	bfac      	ite	ge
 80089fe:	189b      	addge	r3, r3, r2
 8008a00:	185b      	addlt	r3, r3, r1
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a06:	b13b      	cbz	r3, 8008a18 <_vfiprintf_r+0x5c8>
 8008a08:	4639      	mov	r1, r7
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	aa10      	add	r2, sp, #64	; 0x40
 8008a0e:	f7ff fced 	bl	80083ec <__sprint_r>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f040 814a 	bne.w	8008cac <_vfiprintf_r+0x85c>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	ae13      	add	r6, sp, #76	; 0x4c
 8008a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8008a1e:	e6ca      	b.n	80087b6 <_vfiprintf_r+0x366>
 8008a20:	4658      	mov	r0, fp
 8008a22:	f7f7 fb95 	bl	8000150 <strlen>
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	e736      	b.n	8008898 <_vfiprintf_r+0x448>
 8008a2a:	f04a 0a10 	orr.w	sl, sl, #16
 8008a2e:	f01a 0320 	ands.w	r3, sl, #32
 8008a32:	d008      	beq.n	8008a46 <_vfiprintf_r+0x5f6>
 8008a34:	3407      	adds	r4, #7
 8008a36:	f024 0307 	bic.w	r3, r4, #7
 8008a3a:	4698      	mov	r8, r3
 8008a3c:	685d      	ldr	r5, [r3, #4]
 8008a3e:	f858 4b08 	ldr.w	r4, [r8], #8
 8008a42:	2301      	movs	r3, #1
 8008a44:	e6dd      	b.n	8008802 <_vfiprintf_r+0x3b2>
 8008a46:	46a0      	mov	r8, r4
 8008a48:	f01a 0510 	ands.w	r5, sl, #16
 8008a4c:	f858 4b04 	ldr.w	r4, [r8], #4
 8008a50:	d001      	beq.n	8008a56 <_vfiprintf_r+0x606>
 8008a52:	461d      	mov	r5, r3
 8008a54:	e7f5      	b.n	8008a42 <_vfiprintf_r+0x5f2>
 8008a56:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008a5a:	d001      	beq.n	8008a60 <_vfiprintf_r+0x610>
 8008a5c:	b2a4      	uxth	r4, r4
 8008a5e:	e7f0      	b.n	8008a42 <_vfiprintf_r+0x5f2>
 8008a60:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008a64:	d0ed      	beq.n	8008a42 <_vfiprintf_r+0x5f2>
 8008a66:	b2e4      	uxtb	r4, r4
 8008a68:	e7f3      	b.n	8008a52 <_vfiprintf_r+0x602>
 8008a6a:	4a20      	ldr	r2, [pc, #128]	; (8008aec <_vfiprintf_r+0x69c>)
 8008a6c:	9206      	str	r2, [sp, #24]
 8008a6e:	f01a 0220 	ands.w	r2, sl, #32
 8008a72:	d018      	beq.n	8008aa6 <_vfiprintf_r+0x656>
 8008a74:	3407      	adds	r4, #7
 8008a76:	f024 0207 	bic.w	r2, r4, #7
 8008a7a:	4690      	mov	r8, r2
 8008a7c:	6855      	ldr	r5, [r2, #4]
 8008a7e:	f858 4b08 	ldr.w	r4, [r8], #8
 8008a82:	f01a 0f01 	tst.w	sl, #1
 8008a86:	d009      	beq.n	8008a9c <_vfiprintf_r+0x64c>
 8008a88:	ea54 0205 	orrs.w	r2, r4, r5
 8008a8c:	bf1f      	itttt	ne
 8008a8e:	2230      	movne	r2, #48	; 0x30
 8008a90:	f88d 303d 	strbne.w	r3, [sp, #61]	; 0x3d
 8008a94:	f88d 203c 	strbne.w	r2, [sp, #60]	; 0x3c
 8008a98:	f04a 0a02 	orrne.w	sl, sl, #2
 8008a9c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008aa0:	e6e3      	b.n	800886a <_vfiprintf_r+0x41a>
 8008aa2:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <_vfiprintf_r+0x690>)
 8008aa4:	e7e2      	b.n	8008a6c <_vfiprintf_r+0x61c>
 8008aa6:	46a0      	mov	r8, r4
 8008aa8:	f01a 0510 	ands.w	r5, sl, #16
 8008aac:	f858 4b04 	ldr.w	r4, [r8], #4
 8008ab0:	d001      	beq.n	8008ab6 <_vfiprintf_r+0x666>
 8008ab2:	4615      	mov	r5, r2
 8008ab4:	e7e5      	b.n	8008a82 <_vfiprintf_r+0x632>
 8008ab6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8008aba:	d001      	beq.n	8008ac0 <_vfiprintf_r+0x670>
 8008abc:	b2a4      	uxth	r4, r4
 8008abe:	e7e0      	b.n	8008a82 <_vfiprintf_r+0x632>
 8008ac0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008ac4:	d0dd      	beq.n	8008a82 <_vfiprintf_r+0x632>
 8008ac6:	b2e4      	uxtb	r4, r4
 8008ac8:	e7f3      	b.n	8008ab2 <_vfiprintf_r+0x662>
 8008aca:	2c0a      	cmp	r4, #10
 8008acc:	f175 0300 	sbcs.w	r3, r5, #0
 8008ad0:	d20e      	bcs.n	8008af0 <_vfiprintf_r+0x6a0>
 8008ad2:	3430      	adds	r4, #48	; 0x30
 8008ad4:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
 8008ad8:	f10d 0bef 	add.w	fp, sp, #239	; 0xef
 8008adc:	e139      	b.n	8008d52 <_vfiprintf_r+0x902>
 8008ade:	bf00      	nop
 8008ae0:	080094e6 	.word	0x080094e6
 8008ae4:	08009843 	.word	0x08009843
 8008ae8:	08009853 	.word	0x08009853
 8008aec:	080094f7 	.word	0x080094f7
 8008af0:	f04f 0a00 	mov.w	sl, #0
 8008af4:	ab3c      	add	r3, sp, #240	; 0xf0
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
 8008af8:	9b05      	ldr	r3, [sp, #20]
 8008afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b00:	220a      	movs	r2, #10
 8008b02:	2300      	movs	r3, #0
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f7 ffbe 	bl	8000a88 <__aeabi_uldivmod>
 8008b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0e:	3230      	adds	r2, #48	; 0x30
 8008b10:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b14:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b1e:	f10a 0a01 	add.w	sl, sl, #1
 8008b22:	b1cb      	cbz	r3, 8008b58 <_vfiprintf_r+0x708>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	4552      	cmp	r2, sl
 8008b2a:	d115      	bne.n	8008b58 <_vfiprintf_r+0x708>
 8008b2c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008b30:	d012      	beq.n	8008b58 <_vfiprintf_r+0x708>
 8008b32:	2c0a      	cmp	r4, #10
 8008b34:	f175 0200 	sbcs.w	r2, r5, #0
 8008b38:	d30e      	bcc.n	8008b58 <_vfiprintf_r+0x708>
 8008b3a:	9b08      	ldr	r3, [sp, #32]
 8008b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b3e:	ebab 0b03 	sub.w	fp, fp, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	4658      	mov	r0, fp
 8008b46:	f7fd ff30 	bl	80069aa <strncpy>
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	785a      	ldrb	r2, [r3, #1]
 8008b4e:	b16a      	cbz	r2, 8008b6c <_vfiprintf_r+0x71c>
 8008b50:	f04f 0a00 	mov.w	sl, #0
 8008b54:	3301      	adds	r3, #1
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	2c0a      	cmp	r4, #10
 8008b5a:	f175 0500 	sbcs.w	r5, r5, #0
 8008b5e:	f0c0 80f8 	bcc.w	8008d52 <_vfiprintf_r+0x902>
 8008b62:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8008b66:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008b6a:	e7c9      	b.n	8008b00 <_vfiprintf_r+0x6b0>
 8008b6c:	4692      	mov	sl, r2
 8008b6e:	e7f3      	b.n	8008b58 <_vfiprintf_r+0x708>
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	f004 020f 	and.w	r2, r4, #15
 8008b76:	5c9a      	ldrb	r2, [r3, r2]
 8008b78:	0924      	lsrs	r4, r4, #4
 8008b7a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8008b7e:	092d      	lsrs	r5, r5, #4
 8008b80:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8008b84:	ea54 0205 	orrs.w	r2, r4, r5
 8008b88:	d1f2      	bne.n	8008b70 <_vfiprintf_r+0x720>
 8008b8a:	e0e2      	b.n	8008d52 <_vfiprintf_r+0x902>
 8008b8c:	b933      	cbnz	r3, 8008b9c <_vfiprintf_r+0x74c>
 8008b8e:	f01a 0f01 	tst.w	sl, #1
 8008b92:	d003      	beq.n	8008b9c <_vfiprintf_r+0x74c>
 8008b94:	2330      	movs	r3, #48	; 0x30
 8008b96:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8008b9a:	e79d      	b.n	8008ad8 <_vfiprintf_r+0x688>
 8008b9c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8008ba0:	e0d7      	b.n	8008d52 <_vfiprintf_r+0x902>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80a3 	beq.w	8008cee <_vfiprintf_r+0x89e>
 8008ba8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8008bac:	2300      	movs	r3, #0
 8008bae:	46a0      	mov	r8, r4
 8008bb0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8008bb4:	e5c1      	b.n	800873a <_vfiprintf_r+0x2ea>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	e66e      	b.n	8008898 <_vfiprintf_r+0x448>
 8008bba:	f04f 0c10 	mov.w	ip, #16
 8008bbe:	2a07      	cmp	r2, #7
 8008bc0:	4461      	add	r1, ip
 8008bc2:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8008bc6:	f8c6 c004 	str.w	ip, [r6, #4]
 8008bca:	dd08      	ble.n	8008bde <_vfiprintf_r+0x78e>
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4648      	mov	r0, r9
 8008bd0:	aa10      	add	r2, sp, #64	; 0x40
 8008bd2:	f7ff fc0b 	bl	80083ec <__sprint_r>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d168      	bne.n	8008cac <_vfiprintf_r+0x85c>
 8008bda:	4b62      	ldr	r3, [pc, #392]	; (8008d64 <_vfiprintf_r+0x914>)
 8008bdc:	a813      	add	r0, sp, #76	; 0x4c
 8008bde:	4606      	mov	r6, r0
 8008be0:	3c10      	subs	r4, #16
 8008be2:	e674      	b.n	80088ce <_vfiprintf_r+0x47e>
 8008be4:	4606      	mov	r6, r0
 8008be6:	e68c      	b.n	8008902 <_vfiprintf_r+0x4b2>
 8008be8:	4639      	mov	r1, r7
 8008bea:	4648      	mov	r0, r9
 8008bec:	aa10      	add	r2, sp, #64	; 0x40
 8008bee:	f7ff fbfd 	bl	80083ec <__sprint_r>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d15a      	bne.n	8008cac <_vfiprintf_r+0x85c>
 8008bf6:	ae13      	add	r6, sp, #76	; 0x4c
 8008bf8:	e695      	b.n	8008926 <_vfiprintf_r+0x4d6>
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	aa10      	add	r2, sp, #64	; 0x40
 8008c00:	f7ff fbf4 	bl	80083ec <__sprint_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d151      	bne.n	8008cac <_vfiprintf_r+0x85c>
 8008c08:	ae13      	add	r6, sp, #76	; 0x4c
 8008c0a:	e69c      	b.n	8008946 <_vfiprintf_r+0x4f6>
 8008c0c:	f04f 0c10 	mov.w	ip, #16
 8008c10:	2a07      	cmp	r2, #7
 8008c12:	4461      	add	r1, ip
 8008c14:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8008c18:	f8c6 c004 	str.w	ip, [r6, #4]
 8008c1c:	dd08      	ble.n	8008c30 <_vfiprintf_r+0x7e0>
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4648      	mov	r0, r9
 8008c22:	aa10      	add	r2, sp, #64	; 0x40
 8008c24:	f7ff fbe2 	bl	80083ec <__sprint_r>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d13f      	bne.n	8008cac <_vfiprintf_r+0x85c>
 8008c2c:	4b4e      	ldr	r3, [pc, #312]	; (8008d68 <_vfiprintf_r+0x918>)
 8008c2e:	a813      	add	r0, sp, #76	; 0x4c
 8008c30:	4606      	mov	r6, r0
 8008c32:	3c10      	subs	r4, #16
 8008c34:	e690      	b.n	8008958 <_vfiprintf_r+0x508>
 8008c36:	4606      	mov	r6, r0
 8008c38:	e6a8      	b.n	800898c <_vfiprintf_r+0x53c>
 8008c3a:	3110      	adds	r1, #16
 8008c3c:	2a07      	cmp	r2, #7
 8008c3e:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8008c42:	6073      	str	r3, [r6, #4]
 8008c44:	dd07      	ble.n	8008c56 <_vfiprintf_r+0x806>
 8008c46:	4639      	mov	r1, r7
 8008c48:	4648      	mov	r0, r9
 8008c4a:	aa10      	add	r2, sp, #64	; 0x40
 8008c4c:	f7ff fbce 	bl	80083ec <__sprint_r>
 8008c50:	bb60      	cbnz	r0, 8008cac <_vfiprintf_r+0x85c>
 8008c52:	2310      	movs	r3, #16
 8008c54:	a813      	add	r0, sp, #76	; 0x4c
 8008c56:	4606      	mov	r6, r0
 8008c58:	3c10      	subs	r4, #16
 8008c5a:	e69d      	b.n	8008998 <_vfiprintf_r+0x548>
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	e6b5      	b.n	80089cc <_vfiprintf_r+0x57c>
 8008c60:	4639      	mov	r1, r7
 8008c62:	4648      	mov	r0, r9
 8008c64:	aa10      	add	r2, sp, #64	; 0x40
 8008c66:	f7ff fbc1 	bl	80083ec <__sprint_r>
 8008c6a:	b9f8      	cbnz	r0, 8008cac <_vfiprintf_r+0x85c>
 8008c6c:	ab13      	add	r3, sp, #76	; 0x4c
 8008c6e:	e6bd      	b.n	80089ec <_vfiprintf_r+0x59c>
 8008c70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8008c74:	1a54      	subs	r4, r2, r1
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	f77f aebc 	ble.w	80089f4 <_vfiprintf_r+0x5a4>
 8008c7c:	2610      	movs	r6, #16
 8008c7e:	4d39      	ldr	r5, [pc, #228]	; (8008d64 <_vfiprintf_r+0x914>)
 8008c80:	2c10      	cmp	r4, #16
 8008c82:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8008c86:	601d      	str	r5, [r3, #0]
 8008c88:	f102 0201 	add.w	r2, r2, #1
 8008c8c:	dc1d      	bgt.n	8008cca <_vfiprintf_r+0x87a>
 8008c8e:	605c      	str	r4, [r3, #4]
 8008c90:	2a07      	cmp	r2, #7
 8008c92:	440c      	add	r4, r1
 8008c94:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8008c98:	f77f aeac 	ble.w	80089f4 <_vfiprintf_r+0x5a4>
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	aa10      	add	r2, sp, #64	; 0x40
 8008ca2:	f7ff fba3 	bl	80083ec <__sprint_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f43f aea4 	beq.w	80089f4 <_vfiprintf_r+0x5a4>
 8008cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cae:	07d9      	lsls	r1, r3, #31
 8008cb0:	d405      	bmi.n	8008cbe <_vfiprintf_r+0x86e>
 8008cb2:	89bb      	ldrh	r3, [r7, #12]
 8008cb4:	059a      	lsls	r2, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_vfiprintf_r+0x86e>
 8008cb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008cba:	f7fc f836 	bl	8004d2a <__retarget_lock_release_recursive>
 8008cbe:	89bb      	ldrh	r3, [r7, #12]
 8008cc0:	065b      	lsls	r3, r3, #25
 8008cc2:	f57f abf6 	bpl.w	80084b2 <_vfiprintf_r+0x62>
 8008cc6:	f7ff bbf1 	b.w	80084ac <_vfiprintf_r+0x5c>
 8008cca:	3110      	adds	r1, #16
 8008ccc:	2a07      	cmp	r2, #7
 8008cce:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8008cd2:	605e      	str	r6, [r3, #4]
 8008cd4:	dc02      	bgt.n	8008cdc <_vfiprintf_r+0x88c>
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	3c10      	subs	r4, #16
 8008cda:	e7d1      	b.n	8008c80 <_vfiprintf_r+0x830>
 8008cdc:	4639      	mov	r1, r7
 8008cde:	4648      	mov	r0, r9
 8008ce0:	aa10      	add	r2, sp, #64	; 0x40
 8008ce2:	f7ff fb83 	bl	80083ec <__sprint_r>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d1e0      	bne.n	8008cac <_vfiprintf_r+0x85c>
 8008cea:	ab13      	add	r3, sp, #76	; 0x4c
 8008cec:	e7f4      	b.n	8008cd8 <_vfiprintf_r+0x888>
 8008cee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x8a8>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8008cf6:	e7d9      	b.n	8008cac <_vfiprintf_r+0x85c>
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	aa10      	add	r2, sp, #64	; 0x40
 8008cfe:	f7ff fb75 	bl	80083ec <__sprint_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d0f5      	beq.n	8008cf2 <_vfiprintf_r+0x8a2>
 8008d06:	e7d1      	b.n	8008cac <_vfiprintf_r+0x85c>
 8008d08:	ea54 0205 	orrs.w	r2, r4, r5
 8008d0c:	f8cd a014 	str.w	sl, [sp, #20]
 8008d10:	f43f ad89 	beq.w	8008826 <_vfiprintf_r+0x3d6>
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	f43f aed8 	beq.w	8008aca <_vfiprintf_r+0x67a>
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8008d20:	f43f af26 	beq.w	8008b70 <_vfiprintf_r+0x720>
 8008d24:	f004 0207 	and.w	r2, r4, #7
 8008d28:	08e4      	lsrs	r4, r4, #3
 8008d2a:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8008d2e:	08ed      	lsrs	r5, r5, #3
 8008d30:	3230      	adds	r2, #48	; 0x30
 8008d32:	ea54 0005 	orrs.w	r0, r4, r5
 8008d36:	4659      	mov	r1, fp
 8008d38:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8008d3c:	d1f2      	bne.n	8008d24 <_vfiprintf_r+0x8d4>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	07d8      	lsls	r0, r3, #31
 8008d42:	d506      	bpl.n	8008d52 <_vfiprintf_r+0x902>
 8008d44:	2a30      	cmp	r2, #48	; 0x30
 8008d46:	d004      	beq.n	8008d52 <_vfiprintf_r+0x902>
 8008d48:	2230      	movs	r2, #48	; 0x30
 8008d4a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8008d4e:	f1a1 0b02 	sub.w	fp, r1, #2
 8008d52:	ab3c      	add	r3, sp, #240	; 0xf0
 8008d54:	eba3 030b 	sub.w	r3, r3, fp
 8008d58:	9d01      	ldr	r5, [sp, #4]
 8008d5a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	e59a      	b.n	8008898 <_vfiprintf_r+0x448>
 8008d62:	bf00      	nop
 8008d64:	08009843 	.word	0x08009843
 8008d68:	08009853 	.word	0x08009853

08008d6c <__sbprintf>:
 8008d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	898b      	ldrh	r3, [r1, #12]
 8008d72:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008d76:	f023 0302 	bic.w	r3, r3, #2
 8008d7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d7e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008d80:	4615      	mov	r5, r2
 8008d82:	9319      	str	r3, [sp, #100]	; 0x64
 8008d84:	89cb      	ldrh	r3, [r1, #14]
 8008d86:	4606      	mov	r6, r0
 8008d88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d8c:	69cb      	ldr	r3, [r1, #28]
 8008d8e:	a816      	add	r0, sp, #88	; 0x58
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008d94:	460c      	mov	r4, r1
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	ab1a      	add	r3, sp, #104	; 0x68
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9306      	str	r3, [sp, #24]
 8008daa:	f7fb ffbb 	bl	8004d24 <__retarget_lock_init_recursive>
 8008dae:	462a      	mov	r2, r5
 8008db0:	463b      	mov	r3, r7
 8008db2:	4669      	mov	r1, sp
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7ff fb4b 	bl	8008450 <_vfiprintf_r>
 8008dba:	1e05      	subs	r5, r0, #0
 8008dbc:	db07      	blt.n	8008dce <__sbprintf+0x62>
 8008dbe:	4669      	mov	r1, sp
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7fd fdcd 	bl	8006960 <_fflush_r>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	bf18      	it	ne
 8008dca:	f04f 35ff 	movne.w	r5, #4294967295
 8008dce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008dd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008dd4:	065b      	lsls	r3, r3, #25
 8008dd6:	bf42      	ittt	mi
 8008dd8:	89a3      	ldrhmi	r3, [r4, #12]
 8008dda:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008dde:	81a3      	strhmi	r3, [r4, #12]
 8008de0:	f7fb ffa1 	bl	8004d26 <__retarget_lock_close_recursive>
 8008de4:	4628      	mov	r0, r5
 8008de6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dec <__sfvwrite_r>:
 8008dec:	6893      	ldr	r3, [r2, #8]
 8008dee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df2:	4606      	mov	r6, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	4691      	mov	r9, r2
 8008df8:	b91b      	cbnz	r3, 8008e02 <__sfvwrite_r+0x16>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	898b      	ldrh	r3, [r1, #12]
 8008e04:	0718      	lsls	r0, r3, #28
 8008e06:	d54f      	bpl.n	8008ea8 <__sfvwrite_r+0xbc>
 8008e08:	690b      	ldr	r3, [r1, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d04c      	beq.n	8008ea8 <__sfvwrite_r+0xbc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f8d9 8000 	ldr.w	r8, [r9]
 8008e14:	f013 0702 	ands.w	r7, r3, #2
 8008e18:	d16b      	bne.n	8008ef2 <__sfvwrite_r+0x106>
 8008e1a:	f013 0301 	ands.w	r3, r3, #1
 8008e1e:	f000 809b 	beq.w	8008f58 <__sfvwrite_r+0x16c>
 8008e22:	4638      	mov	r0, r7
 8008e24:	46ba      	mov	sl, r7
 8008e26:	46bb      	mov	fp, r7
 8008e28:	f1bb 0f00 	cmp.w	fp, #0
 8008e2c:	f000 8102 	beq.w	8009034 <__sfvwrite_r+0x248>
 8008e30:	b950      	cbnz	r0, 8008e48 <__sfvwrite_r+0x5c>
 8008e32:	465a      	mov	r2, fp
 8008e34:	210a      	movs	r1, #10
 8008e36:	4650      	mov	r0, sl
 8008e38:	f7fd fdfe 	bl	8006a38 <memchr>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f000 80ff 	beq.w	8009040 <__sfvwrite_r+0x254>
 8008e42:	3001      	adds	r0, #1
 8008e44:	eba0 070a 	sub.w	r7, r0, sl
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	6921      	ldr	r1, [r4, #16]
 8008e4c:	455f      	cmp	r7, fp
 8008e4e:	463a      	mov	r2, r7
 8008e50:	bf28      	it	cs
 8008e52:	465a      	movcs	r2, fp
 8008e54:	4288      	cmp	r0, r1
 8008e56:	68a5      	ldr	r5, [r4, #8]
 8008e58:	6963      	ldr	r3, [r4, #20]
 8008e5a:	f240 80f4 	bls.w	8009046 <__sfvwrite_r+0x25a>
 8008e5e:	441d      	add	r5, r3
 8008e60:	42aa      	cmp	r2, r5
 8008e62:	f340 80f0 	ble.w	8009046 <__sfvwrite_r+0x25a>
 8008e66:	4651      	mov	r1, sl
 8008e68:	462a      	mov	r2, r5
 8008e6a:	f7ff f860 	bl	8007f2e <memmove>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	4621      	mov	r1, r4
 8008e72:	442b      	add	r3, r5
 8008e74:	4630      	mov	r0, r6
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	f7fd fd72 	bl	8006960 <_fflush_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d166      	bne.n	8008f4e <__sfvwrite_r+0x162>
 8008e80:	1b7f      	subs	r7, r7, r5
 8008e82:	f040 80f8 	bne.w	8009076 <__sfvwrite_r+0x28a>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7fd fd69 	bl	8006960 <_fflush_r>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d15d      	bne.n	8008f4e <__sfvwrite_r+0x162>
 8008e92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008e96:	44aa      	add	sl, r5
 8008e98:	1b5b      	subs	r3, r3, r5
 8008e9a:	ebab 0b05 	sub.w	fp, fp, r5
 8008e9e:	f8c9 3008 	str.w	r3, [r9, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1c0      	bne.n	8008e28 <__sfvwrite_r+0x3c>
 8008ea6:	e7a8      	b.n	8008dfa <__sfvwrite_r+0xe>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f8e8 	bl	8009080 <__swsetup_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d0ac      	beq.n	8008e0e <__sfvwrite_r+0x22>
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	e7a0      	b.n	8008dfc <__sfvwrite_r+0x10>
 8008eba:	e9d8 a500 	ldrd	sl, r5, [r8]
 8008ebe:	f108 0808 	add.w	r8, r8, #8
 8008ec2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008ec6:	69e1      	ldr	r1, [r4, #28]
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	d0f6      	beq.n	8008eba <__sfvwrite_r+0xce>
 8008ecc:	42bd      	cmp	r5, r7
 8008ece:	462b      	mov	r3, r5
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	bf28      	it	cs
 8008ed4:	463b      	movcs	r3, r7
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	47d8      	blx	fp
 8008eda:	2800      	cmp	r0, #0
 8008edc:	dd37      	ble.n	8008f4e <__sfvwrite_r+0x162>
 8008ede:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008ee2:	4482      	add	sl, r0
 8008ee4:	1a1b      	subs	r3, r3, r0
 8008ee6:	1a2d      	subs	r5, r5, r0
 8008ee8:	f8c9 3008 	str.w	r3, [r9, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e8      	bne.n	8008ec2 <__sfvwrite_r+0xd6>
 8008ef0:	e783      	b.n	8008dfa <__sfvwrite_r+0xe>
 8008ef2:	f04f 0a00 	mov.w	sl, #0
 8008ef6:	4f61      	ldr	r7, [pc, #388]	; (800907c <__sfvwrite_r+0x290>)
 8008ef8:	4655      	mov	r5, sl
 8008efa:	e7e2      	b.n	8008ec2 <__sfvwrite_r+0xd6>
 8008efc:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8008f00:	f108 0808 	add.w	r8, r8, #8
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	68a2      	ldr	r2, [r4, #8]
 8008f08:	f1ba 0f00 	cmp.w	sl, #0
 8008f0c:	d0f6      	beq.n	8008efc <__sfvwrite_r+0x110>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	0599      	lsls	r1, r3, #22
 8008f12:	d563      	bpl.n	8008fdc <__sfvwrite_r+0x1f0>
 8008f14:	4552      	cmp	r2, sl
 8008f16:	d836      	bhi.n	8008f86 <__sfvwrite_r+0x19a>
 8008f18:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008f1c:	d033      	beq.n	8008f86 <__sfvwrite_r+0x19a>
 8008f1e:	6921      	ldr	r1, [r4, #16]
 8008f20:	6965      	ldr	r5, [r4, #20]
 8008f22:	eba0 0b01 	sub.w	fp, r0, r1
 8008f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f2e:	f10b 0201 	add.w	r2, fp, #1
 8008f32:	106d      	asrs	r5, r5, #1
 8008f34:	4452      	add	r2, sl
 8008f36:	4295      	cmp	r5, r2
 8008f38:	bf38      	it	cc
 8008f3a:	4615      	movcc	r5, r2
 8008f3c:	055b      	lsls	r3, r3, #21
 8008f3e:	d53d      	bpl.n	8008fbc <__sfvwrite_r+0x1d0>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7fc f816 	bl	8004f74 <_malloc_r>
 8008f48:	b948      	cbnz	r0, 8008f5e <__sfvwrite_r+0x172>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	6033      	str	r3, [r6, #0]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	e7ad      	b.n	8008eb4 <__sfvwrite_r+0xc8>
 8008f58:	461f      	mov	r7, r3
 8008f5a:	469a      	mov	sl, r3
 8008f5c:	e7d2      	b.n	8008f04 <__sfvwrite_r+0x118>
 8008f5e:	465a      	mov	r2, fp
 8008f60:	6921      	ldr	r1, [r4, #16]
 8008f62:	9001      	str	r0, [sp, #4]
 8008f64:	f7ff f804 	bl	8007f70 <memcpy>
 8008f68:	89a2      	ldrh	r2, [r4, #12]
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f74:	81a2      	strh	r2, [r4, #12]
 8008f76:	4652      	mov	r2, sl
 8008f78:	6123      	str	r3, [r4, #16]
 8008f7a:	6165      	str	r5, [r4, #20]
 8008f7c:	445b      	add	r3, fp
 8008f7e:	eba5 050b 	sub.w	r5, r5, fp
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	4552      	cmp	r2, sl
 8008f88:	bf28      	it	cs
 8008f8a:	4652      	movcs	r2, sl
 8008f8c:	4655      	mov	r5, sl
 8008f8e:	4639      	mov	r1, r7
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	9201      	str	r2, [sp, #4]
 8008f94:	f7fe ffcb 	bl	8007f2e <memmove>
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008faa:	442f      	add	r7, r5
 8008fac:	1b5b      	subs	r3, r3, r5
 8008fae:	ebaa 0a05 	sub.w	sl, sl, r5
 8008fb2:	f8c9 3008 	str.w	r3, [r9, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1a4      	bne.n	8008f04 <__sfvwrite_r+0x118>
 8008fba:	e71e      	b.n	8008dfa <__sfvwrite_r+0xe>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff f84a 	bl	8008058 <_realloc_r>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d1d5      	bne.n	8008f76 <__sfvwrite_r+0x18a>
 8008fca:	4630      	mov	r0, r6
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	f7fb ff11 	bl	8004df4 <_free_r>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	e7b6      	b.n	8008f4a <__sfvwrite_r+0x15e>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	4283      	cmp	r3, r0
 8008fe0:	d302      	bcc.n	8008fe8 <__sfvwrite_r+0x1fc>
 8008fe2:	6961      	ldr	r1, [r4, #20]
 8008fe4:	4551      	cmp	r1, sl
 8008fe6:	d915      	bls.n	8009014 <__sfvwrite_r+0x228>
 8008fe8:	4552      	cmp	r2, sl
 8008fea:	bf28      	it	cs
 8008fec:	4652      	movcs	r2, sl
 8008fee:	4615      	mov	r5, r2
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	f7fe ff9c 	bl	8007f2e <memmove>
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	1b5b      	subs	r3, r3, r5
 8008ffc:	442a      	add	r2, r5
 8008ffe:	60a3      	str	r3, [r4, #8]
 8009000:	6022      	str	r2, [r4, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1cf      	bne.n	8008fa6 <__sfvwrite_r+0x1ba>
 8009006:	4621      	mov	r1, r4
 8009008:	4630      	mov	r0, r6
 800900a:	f7fd fca9 	bl	8006960 <_fflush_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	d0c9      	beq.n	8008fa6 <__sfvwrite_r+0x1ba>
 8009012:	e79c      	b.n	8008f4e <__sfvwrite_r+0x162>
 8009014:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009018:	459a      	cmp	sl, r3
 800901a:	bf38      	it	cc
 800901c:	4653      	movcc	r3, sl
 800901e:	fb93 f3f1 	sdiv	r3, r3, r1
 8009022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009024:	434b      	muls	r3, r1
 8009026:	463a      	mov	r2, r7
 8009028:	4630      	mov	r0, r6
 800902a:	69e1      	ldr	r1, [r4, #28]
 800902c:	47a8      	blx	r5
 800902e:	1e05      	subs	r5, r0, #0
 8009030:	dcb9      	bgt.n	8008fa6 <__sfvwrite_r+0x1ba>
 8009032:	e78c      	b.n	8008f4e <__sfvwrite_r+0x162>
 8009034:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8009038:	2000      	movs	r0, #0
 800903a:	f108 0808 	add.w	r8, r8, #8
 800903e:	e6f3      	b.n	8008e28 <__sfvwrite_r+0x3c>
 8009040:	f10b 0701 	add.w	r7, fp, #1
 8009044:	e700      	b.n	8008e48 <__sfvwrite_r+0x5c>
 8009046:	4293      	cmp	r3, r2
 8009048:	dc08      	bgt.n	800905c <__sfvwrite_r+0x270>
 800904a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800904c:	4652      	mov	r2, sl
 800904e:	4630      	mov	r0, r6
 8009050:	69e1      	ldr	r1, [r4, #28]
 8009052:	47a8      	blx	r5
 8009054:	1e05      	subs	r5, r0, #0
 8009056:	f73f af13 	bgt.w	8008e80 <__sfvwrite_r+0x94>
 800905a:	e778      	b.n	8008f4e <__sfvwrite_r+0x162>
 800905c:	4651      	mov	r1, sl
 800905e:	9201      	str	r2, [sp, #4]
 8009060:	f7fe ff65 	bl	8007f2e <memmove>
 8009064:	9a01      	ldr	r2, [sp, #4]
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	4615      	mov	r5, r2
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	4413      	add	r3, r2
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	e704      	b.n	8008e80 <__sfvwrite_r+0x94>
 8009076:	2001      	movs	r0, #1
 8009078:	e70b      	b.n	8008e92 <__sfvwrite_r+0xa6>
 800907a:	bf00      	nop
 800907c:	7ffffc00 	.word	0x7ffffc00

08009080 <__swsetup_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4b2a      	ldr	r3, [pc, #168]	; (800912c <__swsetup_r+0xac>)
 8009084:	4605      	mov	r5, r0
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	460c      	mov	r4, r1
 800908a:	b118      	cbz	r0, 8009094 <__swsetup_r+0x14>
 800908c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800908e:	b90b      	cbnz	r3, 8009094 <__swsetup_r+0x14>
 8009090:	f7fb fd36 	bl	8004b00 <__sinit>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800909a:	0718      	lsls	r0, r3, #28
 800909c:	d422      	bmi.n	80090e4 <__swsetup_r+0x64>
 800909e:	06d9      	lsls	r1, r3, #27
 80090a0:	d407      	bmi.n	80090b2 <__swsetup_r+0x32>
 80090a2:	2309      	movs	r3, #9
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	e034      	b.n	800911c <__swsetup_r+0x9c>
 80090b2:	0758      	lsls	r0, r3, #29
 80090b4:	d512      	bpl.n	80090dc <__swsetup_r+0x5c>
 80090b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80090b8:	b141      	cbz	r1, 80090cc <__swsetup_r+0x4c>
 80090ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80090be:	4299      	cmp	r1, r3
 80090c0:	d002      	beq.n	80090c8 <__swsetup_r+0x48>
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7fb fe96 	bl	8004df4 <_free_r>
 80090c8:	2300      	movs	r3, #0
 80090ca:	6323      	str	r3, [r4, #48]	; 0x30
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	2300      	movs	r3, #0
 80090d6:	6063      	str	r3, [r4, #4]
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f043 0308 	orr.w	r3, r3, #8
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b94b      	cbnz	r3, 80090fc <__swsetup_r+0x7c>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f2:	d003      	beq.n	80090fc <__swsetup_r+0x7c>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 f8ca 	bl	8009290 <__smakebuf_r>
 80090fc:	89a0      	ldrh	r0, [r4, #12]
 80090fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009102:	f010 0301 	ands.w	r3, r0, #1
 8009106:	d00a      	beq.n	800911e <__swsetup_r+0x9e>
 8009108:	2300      	movs	r3, #0
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6963      	ldr	r3, [r4, #20]
 800910e:	425b      	negs	r3, r3
 8009110:	61a3      	str	r3, [r4, #24]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	b943      	cbnz	r3, 8009128 <__swsetup_r+0xa8>
 8009116:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800911a:	d1c4      	bne.n	80090a6 <__swsetup_r+0x26>
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	0781      	lsls	r1, r0, #30
 8009120:	bf58      	it	pl
 8009122:	6963      	ldrpl	r3, [r4, #20]
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	e7f4      	b.n	8009112 <__swsetup_r+0x92>
 8009128:	2000      	movs	r0, #0
 800912a:	e7f7      	b.n	800911c <__swsetup_r+0x9c>
 800912c:	20000140 	.word	0x20000140

08009130 <__fputwc>:
 8009130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009134:	4680      	mov	r8, r0
 8009136:	460e      	mov	r6, r1
 8009138:	4615      	mov	r5, r2
 800913a:	f7fe ff13 	bl	8007f64 <__locale_mb_cur_max>
 800913e:	2801      	cmp	r0, #1
 8009140:	4604      	mov	r4, r0
 8009142:	d11b      	bne.n	800917c <__fputwc+0x4c>
 8009144:	1e73      	subs	r3, r6, #1
 8009146:	2bfe      	cmp	r3, #254	; 0xfe
 8009148:	d818      	bhi.n	800917c <__fputwc+0x4c>
 800914a:	f88d 6004 	strb.w	r6, [sp, #4]
 800914e:	2700      	movs	r7, #0
 8009150:	f10d 0904 	add.w	r9, sp, #4
 8009154:	42a7      	cmp	r7, r4
 8009156:	d020      	beq.n	800919a <__fputwc+0x6a>
 8009158:	68ab      	ldr	r3, [r5, #8]
 800915a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800915e:	3b01      	subs	r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	60ab      	str	r3, [r5, #8]
 8009164:	da04      	bge.n	8009170 <__fputwc+0x40>
 8009166:	69aa      	ldr	r2, [r5, #24]
 8009168:	4293      	cmp	r3, r2
 800916a:	db1a      	blt.n	80091a2 <__fputwc+0x72>
 800916c:	290a      	cmp	r1, #10
 800916e:	d018      	beq.n	80091a2 <__fputwc+0x72>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	7019      	strb	r1, [r3, #0]
 8009178:	3701      	adds	r7, #1
 800917a:	e7eb      	b.n	8009154 <__fputwc+0x24>
 800917c:	4632      	mov	r2, r6
 800917e:	4640      	mov	r0, r8
 8009180:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8009184:	a901      	add	r1, sp, #4
 8009186:	f000 f845 	bl	8009214 <_wcrtomb_r>
 800918a:	1c42      	adds	r2, r0, #1
 800918c:	4604      	mov	r4, r0
 800918e:	d1de      	bne.n	800914e <__fputwc+0x1e>
 8009190:	4606      	mov	r6, r0
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	81ab      	strh	r3, [r5, #12]
 800919a:	4630      	mov	r0, r6
 800919c:	b003      	add	sp, #12
 800919e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091a2:	462a      	mov	r2, r5
 80091a4:	4640      	mov	r0, r8
 80091a6:	f000 f8af 	bl	8009308 <__swbuf_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d1e4      	bne.n	8009178 <__fputwc+0x48>
 80091ae:	4606      	mov	r6, r0
 80091b0:	e7f3      	b.n	800919a <__fputwc+0x6a>

080091b2 <_fputwc_r>:
 80091b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	07db      	lsls	r3, r3, #31
 80091b8:	4605      	mov	r5, r0
 80091ba:	460e      	mov	r6, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	d405      	bmi.n	80091cc <_fputwc_r+0x1a>
 80091c0:	8993      	ldrh	r3, [r2, #12]
 80091c2:	0598      	lsls	r0, r3, #22
 80091c4:	d402      	bmi.n	80091cc <_fputwc_r+0x1a>
 80091c6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80091c8:	f7fb fdae 	bl	8004d28 <__retarget_lock_acquire_recursive>
 80091cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d0:	0499      	lsls	r1, r3, #18
 80091d2:	d406      	bmi.n	80091e2 <_fputwc_r+0x30>
 80091d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091e0:	6663      	str	r3, [r4, #100]	; 0x64
 80091e2:	4622      	mov	r2, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	4631      	mov	r1, r6
 80091e8:	f7ff ffa2 	bl	8009130 <__fputwc>
 80091ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091ee:	4605      	mov	r5, r0
 80091f0:	07da      	lsls	r2, r3, #31
 80091f2:	d405      	bmi.n	8009200 <_fputwc_r+0x4e>
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	059b      	lsls	r3, r3, #22
 80091f8:	d402      	bmi.n	8009200 <_fputwc_r+0x4e>
 80091fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fc:	f7fb fd95 	bl	8004d2a <__retarget_lock_release_recursive>
 8009200:	4628      	mov	r0, r5
 8009202:	bd70      	pop	{r4, r5, r6, pc}

08009204 <abort>:
 8009204:	2006      	movs	r0, #6
 8009206:	b508      	push	{r3, lr}
 8009208:	f000 f8f0 	bl	80093ec <raise>
 800920c:	2001      	movs	r0, #1
 800920e:	f7f8 fb98 	bl	8001942 <_exit>
	...

08009214 <_wcrtomb_r>:
 8009214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009216:	4c09      	ldr	r4, [pc, #36]	; (800923c <_wcrtomb_r+0x28>)
 8009218:	4605      	mov	r5, r0
 800921a:	461e      	mov	r6, r3
 800921c:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8009220:	b085      	sub	sp, #20
 8009222:	b909      	cbnz	r1, 8009228 <_wcrtomb_r+0x14>
 8009224:	460a      	mov	r2, r1
 8009226:	a901      	add	r1, sp, #4
 8009228:	47b8      	blx	r7
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	bf01      	itttt	eq
 800922e:	2300      	moveq	r3, #0
 8009230:	6033      	streq	r3, [r6, #0]
 8009232:	238a      	moveq	r3, #138	; 0x8a
 8009234:	602b      	streq	r3, [r5, #0]
 8009236:	b005      	add	sp, #20
 8009238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923a:	bf00      	nop
 800923c:	20000558 	.word	0x20000558

08009240 <__swhatbuf_r>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009248:	4615      	mov	r5, r2
 800924a:	2900      	cmp	r1, #0
 800924c:	461e      	mov	r6, r3
 800924e:	b096      	sub	sp, #88	; 0x58
 8009250:	da07      	bge.n	8009262 <__swhatbuf_r+0x22>
 8009252:	89a1      	ldrh	r1, [r4, #12]
 8009254:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8009258:	d017      	beq.n	800928a <__swhatbuf_r+0x4a>
 800925a:	2100      	movs	r1, #0
 800925c:	2340      	movs	r3, #64	; 0x40
 800925e:	4608      	mov	r0, r1
 8009260:	e00f      	b.n	8009282 <__swhatbuf_r+0x42>
 8009262:	466a      	mov	r2, sp
 8009264:	f000 f8ca 	bl	80093fc <_fstat_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	dbf2      	blt.n	8009252 <__swhatbuf_r+0x12>
 800926c:	9901      	ldr	r1, [sp, #4]
 800926e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800927a:	4259      	negs	r1, r3
 800927c:	4159      	adcs	r1, r3
 800927e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009282:	6031      	str	r1, [r6, #0]
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	b016      	add	sp, #88	; 0x58
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928e:	e7e6      	b.n	800925e <__swhatbuf_r+0x1e>

08009290 <__smakebuf_r>:
 8009290:	898b      	ldrh	r3, [r1, #12]
 8009292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009294:	079d      	lsls	r5, r3, #30
 8009296:	4606      	mov	r6, r0
 8009298:	460c      	mov	r4, r1
 800929a:	d507      	bpl.n	80092ac <__smakebuf_r+0x1c>
 800929c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	2301      	movs	r3, #1
 80092a6:	6163      	str	r3, [r4, #20]
 80092a8:	b002      	add	sp, #8
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	466a      	mov	r2, sp
 80092ae:	ab01      	add	r3, sp, #4
 80092b0:	f7ff ffc6 	bl	8009240 <__swhatbuf_r>
 80092b4:	9900      	ldr	r1, [sp, #0]
 80092b6:	4605      	mov	r5, r0
 80092b8:	4630      	mov	r0, r6
 80092ba:	f7fb fe5b 	bl	8004f74 <_malloc_r>
 80092be:	b948      	cbnz	r0, 80092d4 <__smakebuf_r+0x44>
 80092c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d4ef      	bmi.n	80092a8 <__smakebuf_r+0x18>
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	f043 0302 	orr.w	r3, r3, #2
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	e7e3      	b.n	800929c <__smakebuf_r+0xc>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	9b00      	ldr	r3, [sp, #0]
 80092e0:	6120      	str	r0, [r4, #16]
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	b15b      	cbz	r3, 8009300 <__smakebuf_r+0x70>
 80092e8:	4630      	mov	r0, r6
 80092ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ee:	f000 f897 	bl	8009420 <_isatty_r>
 80092f2:	b128      	cbz	r0, 8009300 <__smakebuf_r+0x70>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	f043 0301 	orr.w	r3, r3, #1
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	431d      	orrs	r5, r3
 8009304:	81a5      	strh	r5, [r4, #12]
 8009306:	e7cf      	b.n	80092a8 <__smakebuf_r+0x18>

08009308 <__swbuf_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	460e      	mov	r6, r1
 800930c:	4614      	mov	r4, r2
 800930e:	4605      	mov	r5, r0
 8009310:	b118      	cbz	r0, 800931a <__swbuf_r+0x12>
 8009312:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009314:	b90b      	cbnz	r3, 800931a <__swbuf_r+0x12>
 8009316:	f7fb fbf3 	bl	8004b00 <__sinit>
 800931a:	69a3      	ldr	r3, [r4, #24]
 800931c:	60a3      	str	r3, [r4, #8]
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	0719      	lsls	r1, r3, #28
 8009322:	d529      	bpl.n	8009378 <__swbuf_r+0x70>
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	b33b      	cbz	r3, 8009378 <__swbuf_r+0x70>
 8009328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932c:	b2f6      	uxtb	r6, r6
 800932e:	049a      	lsls	r2, r3, #18
 8009330:	4637      	mov	r7, r6
 8009332:	d52a      	bpl.n	800938a <__swbuf_r+0x82>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	6922      	ldr	r2, [r4, #16]
 8009338:	1a98      	subs	r0, r3, r2
 800933a:	6963      	ldr	r3, [r4, #20]
 800933c:	4283      	cmp	r3, r0
 800933e:	dc04      	bgt.n	800934a <__swbuf_r+0x42>
 8009340:	4621      	mov	r1, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f7fd fb0c 	bl	8006960 <_fflush_r>
 8009348:	b9e0      	cbnz	r0, 8009384 <__swbuf_r+0x7c>
 800934a:	68a3      	ldr	r3, [r4, #8]
 800934c:	3b01      	subs	r3, #1
 800934e:	60a3      	str	r3, [r4, #8]
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	6022      	str	r2, [r4, #0]
 8009356:	701e      	strb	r6, [r3, #0]
 8009358:	6962      	ldr	r2, [r4, #20]
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	429a      	cmp	r2, r3
 800935e:	d004      	beq.n	800936a <__swbuf_r+0x62>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	07db      	lsls	r3, r3, #31
 8009364:	d506      	bpl.n	8009374 <__swbuf_r+0x6c>
 8009366:	2e0a      	cmp	r6, #10
 8009368:	d104      	bne.n	8009374 <__swbuf_r+0x6c>
 800936a:	4621      	mov	r1, r4
 800936c:	4628      	mov	r0, r5
 800936e:	f7fd faf7 	bl	8006960 <_fflush_r>
 8009372:	b938      	cbnz	r0, 8009384 <__swbuf_r+0x7c>
 8009374:	4638      	mov	r0, r7
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	4621      	mov	r1, r4
 800937a:	4628      	mov	r0, r5
 800937c:	f7ff fe80 	bl	8009080 <__swsetup_r>
 8009380:	2800      	cmp	r0, #0
 8009382:	d0d1      	beq.n	8009328 <__swbuf_r+0x20>
 8009384:	f04f 37ff 	mov.w	r7, #4294967295
 8009388:	e7f4      	b.n	8009374 <__swbuf_r+0x6c>
 800938a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009396:	6663      	str	r3, [r4, #100]	; 0x64
 8009398:	e7cc      	b.n	8009334 <__swbuf_r+0x2c>

0800939a <_raise_r>:
 800939a:	291f      	cmp	r1, #31
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	d904      	bls.n	80093ae <_raise_r+0x14>
 80093a4:	2316      	movs	r3, #22
 80093a6:	6003      	str	r3, [r0, #0]
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
 80093ae:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80093b2:	b112      	cbz	r2, 80093ba <_raise_r+0x20>
 80093b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b8:	b94b      	cbnz	r3, 80093ce <_raise_r+0x34>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f852 	bl	8009464 <_getpid_r>
 80093c0:	462a      	mov	r2, r5
 80093c2:	4601      	mov	r1, r0
 80093c4:	4620      	mov	r0, r4
 80093c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ca:	f000 b839 	b.w	8009440 <_kill_r>
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d00a      	beq.n	80093e8 <_raise_r+0x4e>
 80093d2:	1c59      	adds	r1, r3, #1
 80093d4:	d103      	bne.n	80093de <_raise_r+0x44>
 80093d6:	2316      	movs	r3, #22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	2001      	movs	r0, #1
 80093dc:	e7e6      	b.n	80093ac <_raise_r+0x12>
 80093de:	2400      	movs	r4, #0
 80093e0:	4628      	mov	r0, r5
 80093e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e6:	4798      	blx	r3
 80093e8:	2000      	movs	r0, #0
 80093ea:	e7df      	b.n	80093ac <_raise_r+0x12>

080093ec <raise>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <raise+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f7ff bfd2 	b.w	800939a <_raise_r>
 80093f6:	bf00      	nop
 80093f8:	20000140 	.word	0x20000140

080093fc <_fstat_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	2300      	movs	r3, #0
 8009400:	4d06      	ldr	r5, [pc, #24]	; (800941c <_fstat_r+0x20>)
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f7f8 fae8 	bl	80019de <_fstat>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d102      	bne.n	8009418 <_fstat_r+0x1c>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	b103      	cbz	r3, 8009418 <_fstat_r+0x1c>
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	bf00      	nop
 800941c:	20000c28 	.word	0x20000c28

08009420 <_isatty_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	2300      	movs	r3, #0
 8009424:	4d05      	ldr	r5, [pc, #20]	; (800943c <_isatty_r+0x1c>)
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	f7f8 fae6 	bl	80019fc <_isatty>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_isatty_r+0x1a>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b103      	cbz	r3, 800943a <_isatty_r+0x1a>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	20000c28 	.word	0x20000c28

08009440 <_kill_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	2300      	movs	r3, #0
 8009444:	4d06      	ldr	r5, [pc, #24]	; (8009460 <_kill_r+0x20>)
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	4611      	mov	r1, r2
 800944c:	602b      	str	r3, [r5, #0]
 800944e:	f7f8 fa68 	bl	8001922 <_kill>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d102      	bne.n	800945c <_kill_r+0x1c>
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	b103      	cbz	r3, 800945c <_kill_r+0x1c>
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	bd38      	pop	{r3, r4, r5, pc}
 800945e:	bf00      	nop
 8009460:	20000c28 	.word	0x20000c28

08009464 <_getpid_r>:
 8009464:	f7f8 ba56 	b.w	8001914 <_getpid>

08009468 <_init>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr

08009474 <_fini>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr
