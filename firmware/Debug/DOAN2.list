
DOAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb4  08003bb4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb4  08003bb4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb4  08003bb4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000014  08003bd4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08003bd4  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ac7  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027aa  00000000  00000000  00030b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ceb  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf3  00000000  00000000  0003507b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b1f  00000000  00000000  00037d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000922b9  00000000  00000000  0004b88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047c4  00000000  00000000  000ddb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003b70 	.word	0x08003b70

0800014c <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fcc5 	bl	8001b28 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000a8 	.word	0x200000a8

080001ac <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80001b0:	2033      	movs	r0, #51	; 0x33
 80001b2:	f7ff ffcb 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f7ff ffc8 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	; 0x32
 80001be:	f000 fd17 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80001c2:	2028      	movs	r0, #40	; 0x28
 80001c4:	f7ff ffc2 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001c8:	2032      	movs	r0, #50	; 0x32
 80001ca:	f000 fd11 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffbc 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001d4:	2032      	movs	r0, #50	; 0x32
 80001d6:	f000 fd0b 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80001da:	2006      	movs	r0, #6
 80001dc:	f7ff ffb6 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 fd05 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80001e6:	200c      	movs	r0, #12
 80001e8:	f7ff ffb0 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001ec:	2032      	movs	r0, #50	; 0x32
 80001ee:	f000 fcff 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80001f2:	2002      	movs	r0, #2
 80001f4:	f7ff ffaa 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001f8:	2032      	movs	r0, #50	; 0x32
 80001fa:	f000 fcf9 	bl	8000bf0 <HAL_Delay>
	lcd_send_cmd (0x80);
 80001fe:	2080      	movs	r0, #128	; 0x80
 8000200:	f7ff ffa4 	bl	800014c <lcd_send_cmd>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <lcd_clear_display>:
{
	while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ff9d 	bl	800014c <lcd_send_cmd>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <PWM_Control>:
#include "PWM_Control.h"

const int TIM_CLOCK = 24000000;

void PWM_Control(int dutyCycle, int frequency)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	TIM1->ARR  =  TIM_CLOCK/frequency;
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <PWM_Control+0x38>)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	fb92 f2f3 	sdiv	r2, r2, r3
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <PWM_Control+0x3c>)
 800022c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = ((dutyCycle)*(TIM1->ARR))/100;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <PWM_Control+0x3c>)
 8000230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <PWM_Control+0x3c>)
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <PWM_Control+0x40>)
 800023c:	fba1 1303 	umull	r1, r3, r1, r3
 8000240:	095b      	lsrs	r3, r3, #5
 8000242:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	016e3600 	.word	0x016e3600
 8000254:	40012c00 	.word	0x40012c00
 8000258:	51eb851f 	.word	0x51eb851f

0800025c <PWM_Enable>:

void PWM_Enable(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4802      	ldr	r0, [pc, #8]	; (800026c <PWM_Enable+0x10>)
 8000264:	f002 fe12 	bl	8002e8c <HAL_TIM_PWM_Start>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000fc 	.word	0x200000fc

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc5a 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f81e 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9f2 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f9d2 	bl	8000628 <MX_DMA_Init>
  MX_ADC1_Init();
 8000284:	f000 f876 	bl	8000374 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000288:	f000 f8de 	bl	8000448 <MX_I2C1_Init>
  MX_TIM1_Init();
 800028c:	f000 f90a 	bl	80004a4 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000290:	f000 f9a8 	bl	80005e4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000294:	f7ff ff8a 	bl	80001ac <lcd_init>
  lcd_clear_display();
 8000298:	f7ff ffb6 	bl	8000208 <lcd_clear_display>
  PWM_Control(dutyCycle,100000);
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <main+0x40>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4904      	ldr	r1, [pc, #16]	; (80002b4 <main+0x44>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffb8 	bl	8000218 <PWM_Control>
  PWM_Enable();
 80002a8:	f7ff ffd8 	bl	800025c <PWM_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x3c>
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fbbf 	bl	8003a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000308:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f862 	bl	80023d8 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031a:	f000 fa55 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800032a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800032e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f002 face 	bl	80028dc <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000346:	f000 fa3f 	bl	80007c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800034a:	2312      	movs	r3, #18
 800034c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800034e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000352:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000354:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000358:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f002 fc37 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000368:	f000 fa2e 	bl	80007c8 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3750      	adds	r7, #80	; 0x50
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <MX_ADC1_Init+0xcc>)
 8000386:	4a2f      	ldr	r2, [pc, #188]	; (8000444 <MX_ADC1_Init+0xd0>)
 8000388:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <MX_ADC1_Init+0xcc>)
 800038c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000390:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_ADC1_Init+0xcc>)
 8000394:	2200      	movs	r2, #0
 8000396:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000398:	4b29      	ldr	r3, [pc, #164]	; (8000440 <MX_ADC1_Init+0xcc>)
 800039a:	2200      	movs	r2, #0
 800039c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003a0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a6:	4b26      	ldr	r3, [pc, #152]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80003ac:	4b24      	ldr	r3, [pc, #144]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003ae:	2204      	movs	r2, #4
 80003b0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b2:	4823      	ldr	r0, [pc, #140]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003b4:	f000 fc40 	bl	8000c38 <HAL_ADC_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003be:	f000 fa03 	bl	80007c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	481b      	ldr	r0, [pc, #108]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003d4:	f000 fd08 	bl	8000de8 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003de:	f000 f9f3 	bl	80007c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4814      	ldr	r0, [pc, #80]	; (8000440 <MX_ADC1_Init+0xcc>)
 80003f0:	f000 fcfa 	bl	8000de8 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003fa:	f000 f9e5 	bl	80007c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003fe:	2302      	movs	r3, #2
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000402:	2303      	movs	r3, #3
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <MX_ADC1_Init+0xcc>)
 800040c:	f000 fcec 	bl	8000de8 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000416:	f000 f9d7 	bl	80007c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800041a:	2303      	movs	r3, #3
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800041e:	2304      	movs	r3, #4
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_ADC1_Init+0xcc>)
 8000428:	f000 fcde 	bl	8000de8 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000432:	f000 f9c9 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000034 	.word	0x20000034
 8000444:	40012400 	.word	0x40012400

08000448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_I2C1_Init+0x50>)
 800044e:	4a13      	ldr	r2, [pc, #76]	; (800049c <MX_I2C1_Init+0x54>)
 8000450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_I2C1_Init+0x50>)
 8000454:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <MX_I2C1_Init+0x58>)
 8000456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_I2C1_Init+0x50>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_I2C1_Init+0x50>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_I2C1_Init+0x50>)
 8000466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_I2C1_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_I2C1_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_I2C1_Init+0x50>)
 8000486:	f001 fa0b 	bl	80018a0 <HAL_I2C_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000490:	f000 f99a 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000a8 	.word	0x200000a8
 800049c:	40005400 	.word	0x40005400
 80004a0:	000186a0 	.word	0x000186a0

080004a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b096      	sub	sp, #88	; 0x58
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2220      	movs	r2, #32
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 fab4 	bl	8003a4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e2:	4b3e      	ldr	r3, [pc, #248]	; (80005dc <MX_TIM1_Init+0x138>)
 80004e4:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <MX_TIM1_Init+0x13c>)
 80004e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e8:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <MX_TIM1_Init+0x138>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ee:	4b3b      	ldr	r3, [pc, #236]	; (80005dc <MX_TIM1_Init+0x138>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <MX_TIM1_Init+0x138>)
 80004f6:	2263      	movs	r2, #99	; 0x63
 80004f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <MX_TIM1_Init+0x138>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000500:	4b36      	ldr	r3, [pc, #216]	; (80005dc <MX_TIM1_Init+0x138>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b35      	ldr	r3, [pc, #212]	; (80005dc <MX_TIM1_Init+0x138>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050c:	4833      	ldr	r0, [pc, #204]	; (80005dc <MX_TIM1_Init+0x138>)
 800050e:	f002 fc15 	bl	8002d3c <HAL_TIM_Base_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000518:	f000 f956 	bl	80007c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000520:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000526:	4619      	mov	r1, r3
 8000528:	482c      	ldr	r0, [pc, #176]	; (80005dc <MX_TIM1_Init+0x138>)
 800052a:	f002 fe13 	bl	8003154 <HAL_TIM_ConfigClockSource>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000534:	f000 f948 	bl	80007c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000538:	4828      	ldr	r0, [pc, #160]	; (80005dc <MX_TIM1_Init+0x138>)
 800053a:	f002 fc4e 	bl	8002dda <HAL_TIM_PWM_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000544:	f000 f940 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000554:	4619      	mov	r1, r3
 8000556:	4821      	ldr	r0, [pc, #132]	; (80005dc <MX_TIM1_Init+0x138>)
 8000558:	f003 f968 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000562:	f000 f931 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000566:	2360      	movs	r3, #96	; 0x60
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000572:	2300      	movs	r3, #0
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800057a:	2300      	movs	r3, #0
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_TIM1_Init+0x138>)
 800058c:	f002 fd20 	bl	8002fd0 <HAL_TIM_PWM_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000596:	f000 f917 	bl	80007c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <MX_TIM1_Init+0x138>)
 80005be:	f003 f993 	bl	80038e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005c8:	f000 f8fe 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <MX_TIM1_Init+0x138>)
 80005ce:	f000 f9f7 	bl	80009c0 <HAL_TIM_MspPostInit>

}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000fc 	.word	0x200000fc
 80005e0:	40012c00 	.word	0x40012c00

080005e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <MX_USB_PCD_Init+0x40>)
 80005ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_USB_PCD_Init+0x3c>)
 800060e:	f001 fde3 	bl	80021d8 <HAL_PCD_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000618:	f000 f8d6 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000144 	.word	0x20000144
 8000624:	40005c00 	.word	0x40005c00

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA_Init+0x38>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <MX_DMA_Init+0x38>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DMA_Init+0x38>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	200b      	movs	r0, #11
 800064c:	f000 fddd 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000650:	200b      	movs	r0, #11
 8000652:	f000 fdf6 	bl	8001242 <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b42      	ldr	r3, [pc, #264]	; (8000784 <MX_GPIO_Init+0x120>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a41      	ldr	r2, [pc, #260]	; (8000784 <MX_GPIO_Init+0x120>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <MX_GPIO_Init+0x120>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <MX_GPIO_Init+0x120>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a3b      	ldr	r2, [pc, #236]	; (8000784 <MX_GPIO_Init+0x120>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_GPIO_Init+0x120>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_GPIO_Init+0x120>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a35      	ldr	r2, [pc, #212]	; (8000784 <MX_GPIO_Init+0x120>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0x120>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <MX_GPIO_Init+0x120>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <MX_GPIO_Init+0x120>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0x120>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	482a      	ldr	r0, [pc, #168]	; (8000788 <MX_GPIO_Init+0x124>)
 80006e0:	f001 f8ae 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_CTR_GPIO_Port, LOAD_CTR_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2101      	movs	r1, #1
 80006e8:	4828      	ldr	r0, [pc, #160]	; (800078c <MX_GPIO_Init+0x128>)
 80006ea:	f001 f8a9 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	4826      	ldr	r0, [pc, #152]	; (8000790 <MX_GPIO_Init+0x12c>)
 80006f6:	f001 f8a3 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <MX_GPIO_Init+0x124>)
 8000714:	f000 ff10 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_DISPLAY_Pin */
  GPIO_InitStruct.Pin = CHANGE_DISPLAY_Pin;
 8000718:	2310      	movs	r3, #16
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0x130>)
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHANGE_DISPLAY_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_GPIO_Init+0x12c>)
 800072c:	f000 ff04 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOAD_CTR_Pin */
  GPIO_InitStruct.Pin = LOAD_CTR_Pin;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOAD_CTR_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0x128>)
 8000748:	f000 fef6 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUCK_EN_Pin */
  GPIO_InitStruct.Pin = BUCK_EN_Pin;
 800074c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_EN_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <MX_GPIO_Init+0x12c>)
 8000766:	f000 fee7 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fd4b 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000774:	200a      	movs	r0, #10
 8000776:	f000 fd64 	bl	8001242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40011000 	.word	0x40011000
 800078c:	40010c00 	.word	0x40010c00
 8000790:	40010800 	.word	0x40010800
 8000794:	10210000 	.word	0x10210000

08000798 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CHANGE_DISPLAY_Pin)
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	2b10      	cmp	r3, #16
 80007a6:	d106      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		display = ~display;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80007b2:	701a      	strb	r2, [r3, #0]
	} else
	{
		__NOP();
	}

}
 80007b4:	e000      	b.n	80007b8 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 80007b6:	bf00      	nop
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000030 	.word	0x20000030

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_ADC_MspInit+0xbc>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d149      	bne.n	80008ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800085e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|CURRENT_OUT_Pin|VADC_IN_Pin|VADC_OUT_Pin;
 8000888:	230f      	movs	r3, #15
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <HAL_ADC_MspInit+0xc4>)
 8000898:	f000 fe4e 	bl	8001538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008c6:	2220      	movs	r2, #32
 80008c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008d2:	f000 fcd1 	bl	8001278 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008dc:	f7ff ff74 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008e4:	621a      	str	r2, [r3, #32]
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800
 8000900:	20000064 	.word	0x20000064
 8000904:	40020008 	.word	0x40020008

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_I2C_MspInit+0x70>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d123      	bne.n	8000970 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_I2C_MspInit+0x74>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_I2C_MspInit+0x74>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_I2C_MspInit+0x74>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000940:	23c0      	movs	r3, #192	; 0xc0
 8000942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000944:	2312      	movs	r3, #18
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <HAL_I2C_MspInit+0x78>)
 8000954:	f000 fdf0 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_I2C_MspInit+0x74>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_I2C_MspInit+0x74>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_I2C_MspInit+0x74>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40005400 	.word	0x40005400
 800097c:	40021000 	.word	0x40021000
 8000980:	40010c00 	.word	0x40010c00

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <HAL_TIM_Base_MspInit+0x34>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 800099c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40012c00 	.word	0x40012c00
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_TIM_MspPostInit+0x5c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d118      	bne.n	8000a12 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_TIM_MspPostInit+0x60>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_TIM_MspPostInit+0x60>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_TIM_MspPostInit+0x60>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_TIM_MspPostInit+0x64>)
 8000a0e:	f000 fd93 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010800 	.word	0x40010800

08000a28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_PCD_MspInit+0x34>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10b      	bne.n	8000a52 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_PCD_MspInit+0x38>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_PCD_MspInit+0x38>)
 8000a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_PCD_MspInit+0x38>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40005c00 	.word	0x40005c00
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f885 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_DISPLAY_Pin);
 8000ab6:	2010      	movs	r0, #16
 8000ab8:	f000 feda 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ac6:	f000 fc31 	bl	800132c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000064 	.word	0x20000064

08000ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
                                                                                                                                                                                                                                                                                        bl  SystemInit
 8000ae0:	f7ff fff8 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ae6:	490c      	ldr	r1, [pc, #48]	; (8000b18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000afc:	4c09      	ldr	r4, [pc, #36]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 ffa7 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff fbaf 	bl	8000270 <main>
  bx lr
 8000b12:	4770      	bx	lr
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b1c:	08003bc0 	.word	0x08003bc0
  ldr r2, =_sbss
 8000b20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b24:	200005d0 	.word	0x200005d0

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 fb59 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fe44 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fb71 	bl	800125e <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 fb39 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000434 	.word	0x20000434

08000bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <HAL_GetTick+0x10>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000434 	.word	0x20000434

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff fff0 	bl	8000bdc <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffe0 	bl	8000bdc <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000000c 	.word	0x2000000c

08000c38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e0be      	b.n	8000dd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d109      	bne.n	8000c7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fdde 	bl	8000838 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f9ab 	bl	8000fd8 <ADC_ConversionStop_Disable>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8099 	bne.w	8000dc6 <HAL_ADC_Init+0x18e>
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8095 	bne.w	8000dc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ca4:	f023 0302 	bic.w	r3, r3, #2
 8000ca8:	f043 0202 	orr.w	r2, r3, #2
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7b1b      	ldrb	r3, [r3, #12]
 8000cbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd0:	d003      	beq.n	8000cda <HAL_ADC_Init+0xa2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_ADC_Init+0xa8>
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_Init+0xaa>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7d1b      	ldrb	r3, [r3, #20]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d119      	bne.n	8000d24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7b1b      	ldrb	r3, [r3, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	035a      	lsls	r2, r3, #13
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	e00b      	b.n	8000d24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	f043 0220 	orr.w	r2, r3, #32
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_ADC_Init+0x1a8>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d54:	d003      	beq.n	8000d5e <HAL_ADC_Init+0x126>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d104      	bne.n	8000d68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	051b      	lsls	r3, r3, #20
 8000d66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_ADC_Init+0x1ac>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d10b      	bne.n	8000da4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	f043 0201 	orr.w	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da2:	e018      	b.n	8000dd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f023 0312 	bic.w	r3, r3, #18
 8000dac:	f043 0210 	orr.w	r2, r3, #16
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	f043 0201 	orr.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc4:	e007      	b.n	8000dd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	f043 0210 	orr.w	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	ffe1f7fd 	.word	0xffe1f7fd
 8000de4:	ff1f0efe 	.word	0xff1f0efe

08000de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x20>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e0dc      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x1da>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d81c      	bhi.n	8000e52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b05      	subs	r3, #5
 8000e2a:	221f      	movs	r2, #31
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4019      	ands	r1, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	3b05      	subs	r3, #5
 8000e44:	fa00 f203 	lsl.w	r2, r0, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e50:	e03c      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d81c      	bhi.n	8000e94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b23      	subs	r3, #35	; 0x23
 8000e6c:	221f      	movs	r2, #31
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4019      	ands	r1, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	3b23      	subs	r3, #35	; 0x23
 8000e86:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
 8000e92:	e01b      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3b41      	subs	r3, #65	; 0x41
 8000ea6:	221f      	movs	r2, #31
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4019      	ands	r1, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3b41      	subs	r3, #65	; 0x41
 8000ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b09      	cmp	r3, #9
 8000ed2:	d91c      	bls.n	8000f0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68d9      	ldr	r1, [r3, #12]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b1e      	subs	r3, #30
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	3b1e      	subs	r3, #30
 8000f00:	fa00 f203 	lsl.w	r2, r0, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	e019      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2207      	movs	r2, #7
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4019      	ands	r1, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d003      	beq.n	8000f52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d132      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d125      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d126      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d11a      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9a      	lsrs	r2, r3, #18
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f98:	e002      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0x1b2>
 8000fa6:	e007      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f043 0220 	orr.w	r2, r3, #32
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40012400 	.word	0x40012400
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	431bde83 	.word	0x431bde83

08000fd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d12e      	bne.n	8001050 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001002:	f7ff fdeb 	bl	8000bdc <HAL_GetTick>
 8001006:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001008:	e01b      	b.n	8001042 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800100a:	f7ff fde7 	bl	8000bdc <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d914      	bls.n	8001042 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10d      	bne.n	8001042 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f043 0210 	orr.w	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e007      	b.n	8001052 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d0dc      	beq.n	800100a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <__NVIC_EnableIRQ+0x34>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff2d 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff42 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e043      	b.n	8001316 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_DMA_Init+0xa8>)
 8001296:	4413      	add	r3, r2
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_DMA_Init+0xac>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	009a      	lsls	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_DMA_Init+0xb0>)
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	bffdfff8 	.word	0xbffdfff8
 8001324:	cccccccd 	.word	0xcccccccd
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2204      	movs	r2, #4
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d04f      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xc8>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d04a      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_DMA_IRQHandler+0x1f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d029      	beq.n	80013da <HAL_DMA_IRQHandler+0xae>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a65      	ldr	r2, [pc, #404]	; (8001520 <HAL_DMA_IRQHandler+0x1f4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d022      	beq.n	80013d6 <HAL_DMA_IRQHandler+0xaa>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_DMA_IRQHandler+0x1f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01a      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xa4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a62      	ldr	r2, [pc, #392]	; (8001528 <HAL_DMA_IRQHandler+0x1fc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0x9e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_DMA_IRQHandler+0x200>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x98>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5f      	ldr	r2, [pc, #380]	; (8001530 <HAL_DMA_IRQHandler+0x204>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <HAL_DMA_IRQHandler+0x92>
 80013b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013bc:	e00e      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c2:	e00b      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013c8:	e008      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ce:	e005      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d4:	e002      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013d6:	2340      	movs	r3, #64	; 0x40
 80013d8:	e000      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013da:	2304      	movs	r3, #4
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <HAL_DMA_IRQHandler+0x208>)
 80013de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8094 	beq.w	8001512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013f2:	e08e      	b.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	2202      	movs	r2, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d056      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x186>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d051      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 020a 	bic.w	r2, r2, #10
 800142a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <HAL_DMA_IRQHandler+0x1f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d029      	beq.n	8001492 <HAL_DMA_IRQHandler+0x166>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <HAL_DMA_IRQHandler+0x1f4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d022      	beq.n	800148e <HAL_DMA_IRQHandler+0x162>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <HAL_DMA_IRQHandler+0x1f8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x15c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a34      	ldr	r2, [pc, #208]	; (8001528 <HAL_DMA_IRQHandler+0x1fc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d012      	beq.n	8001482 <HAL_DMA_IRQHandler+0x156>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_DMA_IRQHandler+0x200>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00a      	beq.n	800147c <HAL_DMA_IRQHandler+0x150>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_DMA_IRQHandler+0x204>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d102      	bne.n	8001476 <HAL_DMA_IRQHandler+0x14a>
 8001470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001474:	e00e      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147a:	e00b      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 800147c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001480:	e008      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	e005      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	e002      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 800148e:	2320      	movs	r3, #32
 8001490:	e000      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001492:	2302      	movs	r3, #2
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_DMA_IRQHandler+0x208>)
 8001496:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d034      	beq.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014b0:	e02f      	b.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2208      	movs	r2, #8
 80014b8:	409a      	lsls	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d028      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    }
  }
  return;
 8001512:	bf00      	nop
 8001514:	bf00      	nop
}
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020008 	.word	0x40020008
 8001520:	4002001c 	.word	0x4002001c
 8001524:	40020030 	.word	0x40020030
 8001528:	40020044 	.word	0x40020044
 800152c:	40020058 	.word	0x40020058
 8001530:	4002006c 	.word	0x4002006c
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e169      	b.n	8001820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800154c:	2201      	movs	r2, #1
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	429a      	cmp	r2, r3
 8001566:	f040 8158 	bne.w	800181a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a9a      	ldr	r2, [pc, #616]	; (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d05e      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001574:	4a98      	ldr	r2, [pc, #608]	; (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d875      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800157a:	4a98      	ldr	r2, [pc, #608]	; (80017dc <HAL_GPIO_Init+0x2a4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d058      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001580:	4a96      	ldr	r2, [pc, #600]	; (80017dc <HAL_GPIO_Init+0x2a4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d86f      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001586:	4a96      	ldr	r2, [pc, #600]	; (80017e0 <HAL_GPIO_Init+0x2a8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d052      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 800158c:	4a94      	ldr	r2, [pc, #592]	; (80017e0 <HAL_GPIO_Init+0x2a8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d869      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001592:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_GPIO_Init+0x2ac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d04c      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001598:	4a92      	ldr	r2, [pc, #584]	; (80017e4 <HAL_GPIO_Init+0x2ac>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d863      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800159e:	4a92      	ldr	r2, [pc, #584]	; (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d046      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 80015a4:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d85d      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d82a      	bhi.n	8001604 <HAL_GPIO_Init+0xcc>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d859      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <HAL_GPIO_Init+0x80>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	08001633 	.word	0x08001633
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	0800161f 	.word	0x0800161f
 80015c4:	08001661 	.word	0x08001661
 80015c8:	08001667 	.word	0x08001667
 80015cc:	08001667 	.word	0x08001667
 80015d0:	08001667 	.word	0x08001667
 80015d4:	08001667 	.word	0x08001667
 80015d8:	08001667 	.word	0x08001667
 80015dc:	08001667 	.word	0x08001667
 80015e0:	08001667 	.word	0x08001667
 80015e4:	08001667 	.word	0x08001667
 80015e8:	08001667 	.word	0x08001667
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001667 	.word	0x08001667
 80015f4:	08001667 	.word	0x08001667
 80015f8:	08001667 	.word	0x08001667
 80015fc:	08001615 	.word	0x08001615
 8001600:	08001629 	.word	0x08001629
 8001604:	4a79      	ldr	r2, [pc, #484]	; (80017ec <HAL_GPIO_Init+0x2b4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160a:	e02c      	b.n	8001666 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e029      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	3304      	adds	r3, #4
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e024      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	3308      	adds	r3, #8
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e01f      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	330c      	adds	r3, #12
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e01a      	b.n	8001668 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163a:	2304      	movs	r3, #4
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e013      	b.n	8001668 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001648:	2308      	movs	r3, #8
 800164a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	611a      	str	r2, [r3, #16]
          break;
 8001652:	e009      	b.n	8001668 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	615a      	str	r2, [r3, #20]
          break;
 800165e:	e003      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x130>
          break;
 8001666:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d801      	bhi.n	8001672 <HAL_GPIO_Init+0x13a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_Init+0x13e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d802      	bhi.n	8001684 <HAL_GPIO_Init+0x14c>
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x152>
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	3b08      	subs	r3, #8
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	210f      	movs	r1, #15
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80b1 	beq.w	800181a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b8:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d0:	4a48      	ldr	r2, [pc, #288]	; (80017f4 <HAL_GPIO_Init+0x2bc>)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a40      	ldr	r2, [pc, #256]	; (80017f8 <HAL_GPIO_Init+0x2c0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d013      	beq.n	8001724 <HAL_GPIO_Init+0x1ec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <HAL_GPIO_Init+0x2c4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00d      	beq.n	8001720 <HAL_GPIO_Init+0x1e8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3e      	ldr	r2, [pc, #248]	; (8001800 <HAL_GPIO_Init+0x2c8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d007      	beq.n	800171c <HAL_GPIO_Init+0x1e4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_GPIO_Init+0x1e0>
 8001714:	2303      	movs	r3, #3
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001718:	2304      	movs	r3, #4
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001724:	2300      	movs	r3, #0
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001736:	492f      	ldr	r1, [pc, #188]	; (80017f4 <HAL_GPIO_Init+0x2bc>)
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	492c      	ldr	r1, [pc, #176]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4928      	ldr	r1, [pc, #160]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4922      	ldr	r1, [pc, #136]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	491e      	ldr	r1, [pc, #120]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 8001790:	4013      	ands	r3, r2
 8001792:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4918      	ldr	r1, [pc, #96]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4914      	ldr	r1, [pc, #80]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e021      	b.n	800181a <HAL_GPIO_Init+0x2e2>
 80017d6:	bf00      	nop
 80017d8:	10320000 	.word	0x10320000
 80017dc:	10310000 	.word	0x10310000
 80017e0:	10220000 	.word	0x10220000
 80017e4:	10210000 	.word	0x10210000
 80017e8:	10120000 	.word	0x10120000
 80017ec:	10110000 	.word	0x10110000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40011000 	.word	0x40011000
 8001804:	40011400 	.word	0x40011400
 8001808:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_GPIO_Init+0x304>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	4909      	ldr	r1, [pc, #36]	; (800183c <HAL_GPIO_Init+0x304>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f ae8e 	bne.w	800154c <HAL_GPIO_Init+0x14>
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	372c      	adds	r7, #44	; 0x2c
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185c:	e003      	b.n	8001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe ff82 	bl	8000798 <HAL_GPIO_EXTI_Callback>
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e12b      	b.n	8001b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff f81e 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001904:	f001 f932 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a81      	ldr	r2, [pc, #516]	; (8001b14 <HAL_I2C_Init+0x274>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d807      	bhi.n	8001924 <HAL_I2C_Init+0x84>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a80      	ldr	r2, [pc, #512]	; (8001b18 <HAL_I2C_Init+0x278>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e006      	b.n	8001932 <HAL_I2C_Init+0x92>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a7d      	ldr	r2, [pc, #500]	; (8001b1c <HAL_I2C_Init+0x27c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0e7      	b.n	8001b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a78      	ldr	r2, [pc, #480]	; (8001b20 <HAL_I2C_Init+0x280>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <HAL_I2C_Init+0x274>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d802      	bhi.n	8001974 <HAL_I2C_Init+0xd4>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	e009      	b.n	8001988 <HAL_I2C_Init+0xe8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4a69      	ldr	r2, [pc, #420]	; (8001b24 <HAL_I2C_Init+0x284>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800199a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	495c      	ldr	r1, [pc, #368]	; (8001b14 <HAL_I2C_Init+0x274>)
 80019a4:	428b      	cmp	r3, r1
 80019a6:	d819      	bhi.n	80019dc <HAL_I2C_Init+0x13c>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e59      	subs	r1, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019bc:	400b      	ands	r3, r1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <HAL_I2C_Init+0x138>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1e59      	subs	r1, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d6:	e051      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 80019d8:	2304      	movs	r3, #4
 80019da:	e04f      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_I2C_Init+0x168>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e012      	b.n	8001a2e <HAL_I2C_Init+0x18e>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Init+0x196>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e022      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10e      	bne.n	8001a5c <HAL_I2C_Init+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e58      	subs	r0, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	e00f      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	0099      	lsls	r1, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6809      	ldr	r1, [r1, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6911      	ldr	r1, [r2, #16]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68d2      	ldr	r2, [r2, #12]
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	000186a0 	.word	0x000186a0
 8001b18:	001e847f 	.word	0x001e847f
 8001b1c:	003d08ff 	.word	0x003d08ff
 8001b20:	431bde83 	.word	0x431bde83
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff f84e 	bl	8000bdc <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	f040 80e0 	bne.w	8001d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	4970      	ldr	r1, [pc, #448]	; (8001d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f964 	bl	8001e28 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e0d3      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Master_Transmit+0x50>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0cc      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d007      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2221      	movs	r2, #33	; 0x21
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f89c 	bl	8001d24 <I2C_MasterRequestWrite>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e08d      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c0c:	e066      	b.n	8001cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	6a39      	ldr	r1, [r7, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fa22 	bl	800205c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d107      	bne.n	8001c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06b      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_I2C_Master_Transmit+0x188>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d017      	beq.n	8001cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fa19 	bl	80020ec <I2C_WaitOnBTFFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d107      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01a      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d194      	bne.n	8001c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	00100002 	.word	0x00100002
 8001d20:	ffff0000 	.word	0xffff0000

08001d24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	460b      	mov	r3, r1
 8001d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d006      	beq.n	8001d4e <I2C_MasterRequestWrite+0x2a>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d003      	beq.n	8001d4e <I2C_MasterRequestWrite+0x2a>
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d4c:	d108      	bne.n	8001d60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e00b      	b.n	8001d78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d107      	bne.n	8001d78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f84f 	bl	8001e28 <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00d      	beq.n	8001dac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9e:	d103      	bne.n	8001da8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e035      	b.n	8001e18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db4:	d108      	bne.n	8001dc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	e01b      	b.n	8001e00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	11db      	asrs	r3, r3, #7
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f003 0306 	and.w	r3, r3, #6
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f063 030f 	orn	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	490e      	ldr	r1, [pc, #56]	; (8001e20 <I2C_MasterRequestWrite+0xfc>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f898 	bl	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e010      	b.n	8001e18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <I2C_MasterRequestWrite+0x100>)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f888 	bl	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	00010008 	.word	0x00010008
 8001e24:	00010002 	.word	0x00010002

08001e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e38:	e048      	b.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d044      	beq.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e42:	f7fe fecb 	bl	8000bdc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d302      	bcc.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d139      	bne.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10d      	bne.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	e00c      	b.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d116      	bne.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e023      	b.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10d      	bne.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	e00c      	b.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d093      	beq.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f2a:	e071      	b.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d123      	bne.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e067      	b.n	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d041      	beq.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8c:	f7fe fe26 	bl	8000bdc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d302      	bcc.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d136      	bne.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10c      	bne.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	e00b      	b.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e021      	b.n	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10c      	bne.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	43da      	mvns	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4013      	ands	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e00b      	b.n	800204c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4013      	ands	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f af6d 	bne.w	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002068:	e034      	b.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f886 	bl	800217c <I2C_IsAcknowledgeFailed>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e034      	b.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d028      	beq.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7fe fdab 	bl	8000bdc <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11d      	bne.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d016      	beq.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f043 0220 	orr.w	r2, r3, #32
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e007      	b.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d1c3      	bne.n	800206a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f8:	e034      	b.n	8002164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f83e 	bl	800217c <I2C_IsAcknowledgeFailed>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e034      	b.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d028      	beq.n	8002164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7fe fd63 	bl	8000bdc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11d      	bne.n	8002164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b04      	cmp	r3, #4
 8002134:	d016      	beq.n	8002164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e007      	b.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d1c3      	bne.n	80020fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d11b      	bne.n	80021cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800219c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af06      	add	r7, sp, #24
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0f1      	b.n	80023ce <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fc12 	bl	8000a28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fbca 	bl	80039aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	687e      	ldr	r6, [r7, #4]
 800221e:	466d      	mov	r5, sp
 8002220:	f106 0410 	add.w	r4, r6, #16
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	602b      	str	r3, [r5, #0]
 800222c:	1d33      	adds	r3, r6, #4
 800222e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	f001 fbaa 	bl	800398a <USB_CoreInit>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0c2      	b.n	80023ce <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fbc5 	bl	80039de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e040      	b.n	80022dc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3301      	adds	r3, #1
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	3303      	adds	r3, #3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	3338      	adds	r3, #56	; 0x38
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333c      	adds	r3, #60	; 0x3c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3340      	adds	r3, #64	; 0x40
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3b9      	bcc.n	800225a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e044      	b.n	8002376 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	3301      	adds	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3b5      	bcc.n	80022ec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	687e      	ldr	r6, [r7, #4]
 8002388:	466d      	mov	r5, sp
 800238a:	f106 0410 	add.w	r4, r6, #16
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	1d33      	adds	r3, r6, #4
 8002398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	f001 fb2b 	bl	80039f6 <USB_DevInit>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00d      	b.n	80023ce <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fb35 	bl	8003a36 <USB_DevDisconnect>

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e272      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8087 	beq.w	8002506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b04      	cmp	r3, #4
 8002402:	d00c      	beq.n	800241e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002404:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d112      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
 8002410:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b89      	ldr	r3, [pc, #548]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d06c      	beq.n	8002504 <HAL_RCC_OscConfig+0x12c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d168      	bne.n	8002504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e24c      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x76>
 8002440:	4b80      	ldr	r3, [pc, #512]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a7f      	ldr	r2, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e02e      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b78      	ldr	r3, [pc, #480]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a77      	ldr	r2, [pc, #476]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0xbc>
 800247a:	4b72      	ldr	r3, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a71      	ldr	r2, [pc, #452]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 8002494:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a67      	ldr	r2, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fb92 	bl	8000bdc <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fb8e 	bl	8000bdc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e200      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xe4>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fb7e 	bl	8000bdc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fb7a 	bl	8000bdc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1ec      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x10c>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x18c>
 800252a:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x176>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1c0      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4939      	ldr	r1, [pc, #228]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_OscConfig+0x270>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fb33 	bl	8000bdc <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fb2f 	bl	8000bdc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1a1      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x270>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe fb12 	bl	8000bdc <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fb0e 	bl	8000bdc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e180      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d03a      	beq.n	800265c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_RCC_OscConfig+0x274>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7fe faf2 	bl	8000bdc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe faee 	bl	8000bdc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e160      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800261a:	2001      	movs	r0, #1
 800261c:	f000 faba 	bl	8002b94 <RCC_Delay>
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x274>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe fad8 	bl	8000bdc <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262e:	e00f      	b.n	8002650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fad4 	bl	8000bdc <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d908      	bls.n	8002650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e146      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	42420000 	.word	0x42420000
 800264c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b92      	ldr	r3, [pc, #584]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e9      	bne.n	8002630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a6 	beq.w	80027b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b8b      	ldr	r3, [pc, #556]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4a87      	ldr	r2, [pc, #540]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	61d3      	str	r3, [r2, #28]
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fa95 	bl	8000bdc <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe fa91 	bl	8000bdc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e103      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x312>
 80026dc:	4b6f      	ldr	r3, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a6e      	ldr	r2, [pc, #440]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	e02d      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x334>
 80026f2:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a69      	ldr	r2, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	e01c      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d10c      	bne.n	800272e <HAL_RCC_OscConfig+0x356>
 8002714:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a60      	ldr	r2, [pc, #384]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a5a      	ldr	r2, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6213      	str	r3, [r2, #32]
 800273a:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe fa45 	bl	8000bdc <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fa41 	bl	8000bdc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0b1      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ee      	beq.n	8002756 <HAL_RCC_OscConfig+0x37e>
 8002778:	e014      	b.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fa2f 	bl	8000bdc <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fa2b 	bl	8000bdc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e09b      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a3b      	ldr	r2, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d061      	beq.n	8002890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d146      	bne.n	8002862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe f9ff 	bl	8000bdc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe f9fb 	bl	8000bdc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e06d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d108      	bne.n	800281c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4921      	ldr	r1, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a19      	ldr	r1, [r3, #32]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	430b      	orrs	r3, r1
 800282e:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f9cf 	bl	8000bdc <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f9cb 	bl	8000bdc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x46a>
 8002860:	e035      	b.n	80028ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f9b8 	bl	8000bdc <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe f9b4 	bl	8000bdc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e026      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x498>
 800288e:	e01e      	b.n	80028ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e019      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x500>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d0      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4965      	ldr	r1, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800295a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4936      	ldr	r1, [pc, #216]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe f906 	bl	8000bdc <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe f902 	bl	8000bdc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e053      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d210      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4922      	ldr	r1, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe f864 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08003b88 	.word	0x08003b88
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20000008 	.word	0x20000008

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ade:	e027      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae2:	613b      	str	r3, [r7, #16]
      break;
 8002ae4:	e027      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	0c5b      	lsrs	r3, r3, #17
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b32:	613b      	str	r3, [r7, #16]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	693b      	ldr	r3, [r7, #16]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	007a1200 	.word	0x007a1200
 8002b4c:	08003ba0 	.word	0x08003ba0
 8002b50:	08003bb0 	.word	0x08003bb0
 8002b54:	003d0900 	.word	0x003d0900

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff2 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08003b98 	.word	0x08003b98

08002b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <RCC_Delay+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <RCC_Delay+0x38>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0a5b      	lsrs	r3, r3, #9
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb0:	bf00      	nop
  }
  while (Delay --);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <RCC_Delay+0x1c>
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	61d3      	str	r3, [r2, #28]
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d118      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c30:	f7fd ffd4 	bl	8000bdc <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	e008      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fd ffd0 	bl	8000bdc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e06d      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02e      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d027      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fd ff9f 	bl	8000bdc <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fd ff9b 	bl	8000bdc <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e036      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4917      	ldr	r1, [pc, #92]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	490b      	ldr	r1, [pc, #44]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4904      	ldr	r1, [pc, #16]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42420440 	.word	0x42420440

08002d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fe0e 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 fab2 	bl	80032e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e041      	b.n	8002e70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f839 	bl	8002e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f000 fa63 	bl	80032e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x24>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e022      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d109      	bne.n	8002eca <HAL_TIM_PWM_Start+0x3e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e015      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x58>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e05e      	b.n	8002fbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x82>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fc50 	bl	80037e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_TIM_PWM_Start+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_TIM_PWM_Start+0x138>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d009      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_TIM_PWM_Start+0x13c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIM_PWM_Start+0x140>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d010      	beq.n	8002fba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	e007      	b.n	8002fba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800

08002fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0ae      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f200 809f 	bhi.w	800313c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	0800313d 	.word	0x0800313d
 800300c:	0800313d 	.word	0x0800313d
 8003010:	0800313d 	.word	0x0800313d
 8003014:	08003079 	.word	0x08003079
 8003018:	0800313d 	.word	0x0800313d
 800301c:	0800313d 	.word	0x0800313d
 8003020:	0800313d 	.word	0x0800313d
 8003024:	080030bb 	.word	0x080030bb
 8003028:	0800313d 	.word	0x0800313d
 800302c:	0800313d 	.word	0x0800313d
 8003030:	0800313d 	.word	0x0800313d
 8003034:	080030fb 	.word	0x080030fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f9b2 	bl	80033a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	619a      	str	r2, [r3, #24]
      break;
 8003076:	e064      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f9f8 	bl	8003474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
      break;
 80030b8:	e043      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa41 	bl	8003548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0208 	orr.w	r2, r2, #8
 80030d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0204 	bic.w	r2, r2, #4
 80030e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69d9      	ldr	r1, [r3, #28]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]
      break;
 80030f8:	e023      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fa8b 	bl	800361c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69d9      	ldr	r1, [r3, #28]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
      break;
 800313a:	e002      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
      break;
 8003140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIM_ConfigClockSource+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e0b4      	b.n	80032da <HAL_TIM_ConfigClockSource+0x186>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800318e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d03e      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0xd4>
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	f200 8087 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	f000 8086 	beq.w	80032c6 <HAL_TIM_ConfigClockSource+0x172>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d87f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d01a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xa6>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d87b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b60      	cmp	r3, #96	; 0x60
 80031ca:	d050      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x11a>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d877      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d03c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xfa>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d873      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d058      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x13a>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d86f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d064      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d86b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d060      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d867      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d05a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	e062      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800320a:	f000 facc 	bl	80037a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800321c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
      break;
 8003226:	e04f      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003238:	f000 fab5 	bl	80037a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e03c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	461a      	mov	r2, r3
 800325c:	f000 fa2c 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2150      	movs	r1, #80	; 0x50
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa83 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800326c:	e02c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800327a:	461a      	mov	r2, r3
 800327c:	f000 fa4a 	bl	8003714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2160      	movs	r1, #96	; 0x60
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa73 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 800328c:	e01c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329a:	461a      	mov	r2, r3
 800329c:	f000 fa0c 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa63 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e00c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 fa5a 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 80032be:	e003      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e000      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <TIM_Base_SetConfig+0xb8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d007      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <TIM_Base_SetConfig+0xbc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <TIM_Base_SetConfig+0xc0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d108      	bne.n	8003326 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1c      	ldr	r2, [pc, #112]	; (800339c <TIM_Base_SetConfig+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <TIM_Base_SetConfig+0xbc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <TIM_Base_SetConfig+0xc0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <TIM_Base_SetConfig+0xb8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d103      	bne.n	800338c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	615a      	str	r2, [r3, #20]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0201 	bic.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 0302 	bic.w	r3, r3, #2
 80033f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <TIM_OC1_SetConfig+0xc8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0308 	bic.w	r3, r3, #8
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <TIM_OC1_SetConfig+0xc8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00

08003474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0210 	bic.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0320 	bic.w	r3, r3, #32
 80034be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <TIM_OC2_SetConfig+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10d      	bne.n	80034f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <TIM_OC2_SetConfig+0xd0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d113      	bne.n	8003520 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00

08003548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <TIM_OC3_SetConfig+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10d      	bne.n	80035c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <TIM_OC3_SetConfig+0xd0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d113      	bne.n	80035f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	621a      	str	r2, [r3, #32]
}
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00

0800361c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	031b      	lsls	r3, r3, #12
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <TIM_OC4_SetConfig+0x98>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d109      	bne.n	8003690 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0201 	bic.w	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 030a 	bic.w	r3, r3, #10
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0210 	bic.w	r2, r3, #16
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	031b      	lsls	r3, r3, #12
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003750:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	bf00      	nop
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	f043 0307 	orr.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2201      	movs	r2, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e046      	b.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d009      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10c      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800

080038e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003900:	2302      	movs	r3, #2
 8003902:	e03d      	b.n	8003980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800398a:	b084      	sub	sp, #16
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	f107 0014 	add.w	r0, r7, #20
 8003998:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	b004      	add	sp, #16
 80039a8:	4770      	bx	lr

080039aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039b2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4013      	ands	r3, r2
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039f6:	b084      	sub	sp, #16
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	f107 0014 	add.w	r0, r7, #20
 8003a04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	b004      	add	sp, #16
 8003a34:	4770      	bx	lr

08003a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <memset>:
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d100      	bne.n	8003a54 <memset+0xa>
 8003a52:	4770      	bx	lr
 8003a54:	f803 1b01 	strb.w	r1, [r3], #1
 8003a58:	e7f9      	b.n	8003a4e <memset+0x4>
	...

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2600      	movs	r6, #0
 8003a60:	4d0c      	ldr	r5, [pc, #48]	; (8003a94 <__libc_init_array+0x38>)
 8003a62:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a64:	1b64      	subs	r4, r4, r5
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	42a6      	cmp	r6, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	f000 f880 	bl	8003b70 <_init>
 8003a70:	2600      	movs	r6, #0
 8003a72:	4d0a      	ldr	r5, [pc, #40]	; (8003a9c <__libc_init_array+0x40>)
 8003a74:	4c0a      	ldr	r4, [pc, #40]	; (8003aa0 <__libc_init_array+0x44>)
 8003a76:	1b64      	subs	r4, r4, r5
 8003a78:	10a4      	asrs	r4, r4, #2
 8003a7a:	42a6      	cmp	r6, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a84:	4798      	blx	r3
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8e:	4798      	blx	r3
 8003a90:	3601      	adds	r6, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	08003bb4 	.word	0x08003bb4
 8003a98:	08003bb4 	.word	0x08003bb4
 8003a9c:	08003bb4 	.word	0x08003bb4
 8003aa0:	08003bbc 	.word	0x08003bbc

08003aa4 <__retarget_lock_acquire_recursive>:
 8003aa4:	4770      	bx	lr

08003aa6 <__retarget_lock_release_recursive>:
 8003aa6:	4770      	bx	lr

08003aa8 <register_fini>:
 8003aa8:	4b02      	ldr	r3, [pc, #8]	; (8003ab4 <register_fini+0xc>)
 8003aaa:	b113      	cbz	r3, 8003ab2 <register_fini+0xa>
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <register_fini+0x10>)
 8003aae:	f000 b805 	b.w	8003abc <atexit>
 8003ab2:	4770      	bx	lr
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	08003ac9 	.word	0x08003ac9

08003abc <atexit>:
 8003abc:	2300      	movs	r3, #0
 8003abe:	4601      	mov	r1, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 b814 	b.w	8003af0 <__register_exitproc>

08003ac8 <__libc_fini_array>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <__libc_fini_array+0x20>)
 8003acc:	4c07      	ldr	r4, [pc, #28]	; (8003aec <__libc_fini_array+0x24>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	b91c      	cbnz	r4, 8003adc <__libc_fini_array+0x14>
 8003ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad8:	f000 b850 	b.w	8003b7c <_fini>
 8003adc:	3c01      	subs	r4, #1
 8003ade:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003ae2:	4798      	blx	r3
 8003ae4:	e7f5      	b.n	8003ad2 <__libc_fini_array+0xa>
 8003ae6:	bf00      	nop
 8003ae8:	08003bbc 	.word	0x08003bbc
 8003aec:	08003bc0 	.word	0x08003bc0

08003af0 <__register_exitproc>:
 8003af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8003b64 <__register_exitproc+0x74>
 8003af8:	4606      	mov	r6, r0
 8003afa:	f8da 0000 	ldr.w	r0, [sl]
 8003afe:	4698      	mov	r8, r3
 8003b00:	460f      	mov	r7, r1
 8003b02:	4691      	mov	r9, r2
 8003b04:	f7ff ffce 	bl	8003aa4 <__retarget_lock_acquire_recursive>
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <__register_exitproc+0x78>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	b90c      	cbnz	r4, 8003b12 <__register_exitproc+0x22>
 8003b0e:	4c17      	ldr	r4, [pc, #92]	; (8003b6c <__register_exitproc+0x7c>)
 8003b10:	601c      	str	r4, [r3, #0]
 8003b12:	6865      	ldr	r5, [r4, #4]
 8003b14:	f8da 0000 	ldr.w	r0, [sl]
 8003b18:	2d1f      	cmp	r5, #31
 8003b1a:	dd05      	ble.n	8003b28 <__register_exitproc+0x38>
 8003b1c:	f7ff ffc3 	bl	8003aa6 <__retarget_lock_release_recursive>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	b19e      	cbz	r6, 8003b52 <__register_exitproc+0x62>
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8003b30:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8003b34:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8003b38:	40aa      	lsls	r2, r5
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8003b40:	2e02      	cmp	r6, #2
 8003b42:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8003b46:	bf02      	ittt	eq
 8003b48:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8003b4c:	4313      	orreq	r3, r2
 8003b4e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8003b52:	1c6b      	adds	r3, r5, #1
 8003b54:	3502      	adds	r5, #2
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8003b5c:	f7ff ffa3 	bl	8003aa6 <__retarget_lock_release_recursive>
 8003b60:	2000      	movs	r0, #0
 8003b62:	e7df      	b.n	8003b24 <__register_exitproc+0x34>
 8003b64:	20000010 	.word	0x20000010
 8003b68:	2000043c 	.word	0x2000043c
 8003b6c:	20000440 	.word	0x20000440

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
