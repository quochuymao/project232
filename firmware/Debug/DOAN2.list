
DOAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000000c  08003a30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08003a30  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108f6  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000275b  00000000  00000000  0003096e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd3  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022ee  00000000  00000000  00034e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a12  00000000  00000000  00037109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f01c  00000000  00000000  0004ab1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045a8  00000000  00000000  000d9b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000de0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080039d8 	.word	0x080039d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080039d8 	.word	0x080039d8

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fc5f 	bl	8001a5c <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000009c 	.word	0x2000009c

080001ac <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80001b0:	2033      	movs	r0, #51	; 0x33
 80001b2:	f7ff ffcb 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f7ff ffc8 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	; 0x32
 80001be:	f000 fcc9 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80001c2:	2028      	movs	r0, #40	; 0x28
 80001c4:	f7ff ffc2 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001c8:	2032      	movs	r0, #50	; 0x32
 80001ca:	f000 fcc3 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffbc 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001d4:	2032      	movs	r0, #50	; 0x32
 80001d6:	f000 fcbd 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80001da:	2006      	movs	r0, #6
 80001dc:	f7ff ffb6 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 fcb7 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80001e6:	200c      	movs	r0, #12
 80001e8:	f7ff ffb0 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001ec:	2032      	movs	r0, #50	; 0x32
 80001ee:	f000 fcb1 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80001f2:	2002      	movs	r0, #2
 80001f4:	f7ff ffaa 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001f8:	2032      	movs	r0, #50	; 0x32
 80001fa:	f000 fcab 	bl	8000b54 <HAL_Delay>
	lcd_send_cmd (0x80);
 80001fe:	2080      	movs	r0, #128	; 0x80
 8000200:	f7ff ffa4 	bl	800014c <lcd_send_cmd>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <lcd_clear_display>:
{
	while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ff9d 	bl	800014c <lcd_send_cmd>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <PWM_Control>:
#include "PWM_Control.h"

const int TIM_CLOCK = 24000000;

void PWM_Control(int dutyCycle, int frequency)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	TIM1->ARR  =  TIM_CLOCK/frequency;
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <PWM_Control+0x38>)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	fb92 f2f3 	sdiv	r2, r2, r3
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <PWM_Control+0x3c>)
 800022c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = ((dutyCycle)*(TIM1->ARR))/100;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <PWM_Control+0x3c>)
 8000230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <PWM_Control+0x3c>)
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <PWM_Control+0x40>)
 800023c:	fba1 1303 	umull	r1, r3, r1, r3
 8000240:	095b      	lsrs	r3, r3, #5
 8000242:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	016e3600 	.word	0x016e3600
 8000254:	40012c00 	.word	0x40012c00
 8000258:	51eb851f 	.word	0x51eb851f

0800025c <PWM_Enable>:

void PWM_Enable(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4802      	ldr	r0, [pc, #8]	; (800026c <PWM_Enable+0x10>)
 8000264:	f002 fdac 	bl	8002dc0 <HAL_TIM_PWM_Start>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000f0 	.word	0x200000f0

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc0c 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f81a 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f9ee 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f9ce 	bl	8000620 <MX_DMA_Init>
  MX_ADC1_Init();
 8000284:	f000 f872 	bl	800036c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000288:	f000 f8da 	bl	8000440 <MX_I2C1_Init>
  MX_TIM1_Init();
 800028c:	f000 f906 	bl	800049c <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000290:	f000 f9a4 	bl	80005dc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000294:	f7ff ff8a 	bl	80001ac <lcd_init>
  lcd_clear_display();
 8000298:	f7ff ffb6 	bl	8000208 <lcd_clear_display>
  PWM_Control(20,100000);
 800029c:	4903      	ldr	r1, [pc, #12]	; (80002ac <main+0x3c>)
 800029e:	2014      	movs	r0, #20
 80002a0:	f7ff ffba 	bl	8000218 <PWM_Control>
  PWM_Enable();
 80002a4:	f7ff ffda 	bl	800025c <PWM_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x38>
 80002aa:	bf00      	nop
 80002ac:	000186a0 	.word	0x000186a0

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b094      	sub	sp, #80	; 0x50
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fb5d 	bl	800397e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000306:	4618      	mov	r0, r3
 8000308:	f002 f800 	bl	800230c <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000312:	f000 fa11 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000322:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000326:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fa6c 	bl	8002810 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800033e:	f000 f9fb 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000342:	2312      	movs	r3, #18
 8000344:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800034a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800034c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000350:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f002 fbd5 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000360:	f000 f9ea 	bl	8000738 <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3750      	adds	r7, #80	; 0x50
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <MX_ADC1_Init+0xcc>)
 800037e:	4a2f      	ldr	r2, [pc, #188]	; (800043c <MX_ADC1_Init+0xd0>)
 8000380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <MX_ADC1_Init+0xcc>)
 800038c:	2200      	movs	r2, #0
 800038e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000398:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800039c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039e:	4b26      	ldr	r3, [pc, #152]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003aa:	4823      	ldr	r0, [pc, #140]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003ac:	f000 fbf6 	bl	8000b9c <HAL_ADC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003b6:	f000 f9bf 	bl	8000738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	481b      	ldr	r0, [pc, #108]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003cc:	f000 fcbe 	bl	8000d4c <HAL_ADC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003d6:	f000 f9af 	bl	8000738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003da:	2301      	movs	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003de:	2302      	movs	r3, #2
 80003e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	4814      	ldr	r0, [pc, #80]	; (8000438 <MX_ADC1_Init+0xcc>)
 80003e8:	f000 fcb0 	bl	8000d4c <HAL_ADC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003f2:	f000 f9a1 	bl	8000738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000404:	f000 fca2 	bl	8000d4c <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800040e:	f000 f993 	bl	8000738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000412:	2303      	movs	r3, #3
 8000414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000416:	2304      	movs	r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <MX_ADC1_Init+0xcc>)
 8000420:	f000 fc94 	bl	8000d4c <HAL_ADC_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800042a:	f000 f985 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000028 	.word	0x20000028
 800043c:	40012400 	.word	0x40012400

08000440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_I2C1_Init+0x50>)
 8000446:	4a13      	ldr	r2, [pc, #76]	; (8000494 <MX_I2C1_Init+0x54>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_I2C1_Init+0x50>)
 800044c:	4a12      	ldr	r2, [pc, #72]	; (8000498 <MX_I2C1_Init+0x58>)
 800044e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_I2C1_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_I2C1_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_I2C1_Init+0x50>)
 800045e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_I2C1_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_I2C1_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <MX_I2C1_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_I2C1_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_I2C1_Init+0x50>)
 800047e:	f001 f9a9 	bl	80017d4 <HAL_I2C_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000488:	f000 f956 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000009c 	.word	0x2000009c
 8000494:	40005400 	.word	0x40005400
 8000498:	000186a0 	.word	0x000186a0

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b096      	sub	sp, #88	; 0x58
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2220      	movs	r2, #32
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f003 fa52 	bl	800397e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004da:	4b3e      	ldr	r3, [pc, #248]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004dc:	4a3e      	ldr	r2, [pc, #248]	; (80005d8 <MX_TIM1_Init+0x13c>)
 80004de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e0:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e6:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80004ec:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004ee:	2263      	movs	r2, #99	; 0x63
 80004f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_TIM1_Init+0x138>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fe:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000504:	4833      	ldr	r0, [pc, #204]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000506:	f002 fbb3 	bl	8002c70 <HAL_TIM_Base_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000510:	f000 f912 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000518:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800051a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800051e:	4619      	mov	r1, r3
 8000520:	482c      	ldr	r0, [pc, #176]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000522:	f002 fdb1 	bl	8003088 <HAL_TIM_ConfigClockSource>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800052c:	f000 f904 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000530:	4828      	ldr	r0, [pc, #160]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000532:	f002 fbec 	bl	8002d0e <HAL_TIM_PWM_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800053c:	f000 f8fc 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	2300      	movs	r3, #0
 8000542:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000548:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800054c:	4619      	mov	r1, r3
 800054e:	4821      	ldr	r0, [pc, #132]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000550:	f003 f906 	bl	8003760 <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800055a:	f000 f8ed 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055e:	2360      	movs	r3, #96	; 0x60
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000566:	2300      	movs	r3, #0
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800056a:	2300      	movs	r3, #0
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <MX_TIM1_Init+0x138>)
 8000584:	f002 fcbe 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800058e:	f000 f8d3 	bl	8000738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <MX_TIM1_Init+0x138>)
 80005b6:	f003 f931 	bl	800381c <HAL_TIMEx_ConfigBreakDeadTime>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005c0:	f000 f8ba 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM1_Init+0x138>)
 80005c6:	f000 f9b3 	bl	8000930 <HAL_TIM_MspPostInit>

}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000f0 	.word	0x200000f0
 80005d8:	40012c00 	.word	0x40012c00

080005dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_USB_PCD_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_USB_PCD_Init+0x3c>)
 8000606:	f001 fd81 	bl	800210c <HAL_PCD_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 f892 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000138 	.word	0x20000138
 800061c:	40005c00 	.word	0x40005c00

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA_Init+0x38>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <MX_DMA_Init+0x38>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_DMA_Init+0x38>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	200b      	movs	r0, #11
 8000644:	f000 fd93 	bl	800116e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000648:	200b      	movs	r0, #11
 800064a:	f000 fdac 	bl	80011a6 <HAL_NVIC_EnableIRQ>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_GPIO_Init+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a2d      	ldr	r2, [pc, #180]	; (800072c <MX_GPIO_Init+0xd0>)
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_GPIO_Init+0xd0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0320 	and.w	r3, r3, #32
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_GPIO_Init+0xd0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <MX_GPIO_Init+0xd0>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_GPIO_Init+0xd0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_GPIO_Init+0xd0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_GPIO_Init+0xd0>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_GPIO_Init+0xd0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOAD_CTR_Pin|TEST_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f640 0101 	movw	r1, #2049	; 0x801
 80006be:	481c      	ldr	r0, [pc, #112]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006c0:	f001 f870 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ca:	481a      	ldr	r0, [pc, #104]	; (8000734 <MX_GPIO_Init+0xd8>)
 80006cc:	f001 f86a 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LOAD_CHECK_Pin */
  GPIO_InitStruct.Pin = LOAD_CHECK_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOAD_CHECK_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_GPIO_Init+0xd8>)
 80006e4:	f000 feda 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_CTR_Pin TEST_Pin */
  GPIO_InitStruct.Pin = LOAD_CTR_Pin|TEST_Pin;
 80006e8:	f640 0301 	movw	r3, #2049	; 0x801
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000702:	f000 fecb 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUCK_EN_Pin */
  GPIO_InitStruct.Pin = BUCK_EN_Pin;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUCK_EN_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_GPIO_Init+0xd8>)
 8000720:	f000 febc 	bl	800149c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	40010c00 	.word	0x40010c00
 8000734:	40010800 	.word	0x40010800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a28      	ldr	r2, [pc, #160]	; (8000864 <HAL_ADC_MspInit+0xbc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d149      	bne.n	800085c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a26      	ldr	r2, [pc, #152]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_ADC_MspInit+0xc0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|CURRENT_OUT_Pin|VADC_IN_Pin|VADC_OUT_Pin;
 80007f8:	230f      	movs	r3, #15
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	2303      	movs	r3, #3
 80007fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4819      	ldr	r0, [pc, #100]	; (800086c <HAL_ADC_MspInit+0xc4>)
 8000808:	f000 fe48 	bl	800149c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_ADC_MspInit+0xcc>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 800082e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000832:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000836:	2220      	movs	r2, #32
 8000838:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000842:	f000 fccb 	bl	80011dc <HAL_DMA_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800084c:	f7ff ff74 	bl	8000738 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000854:	621a      	str	r2, [r3, #32]
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_ADC_MspInit+0xc8>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40012400 	.word	0x40012400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800
 8000870:	20000058 	.word	0x20000058
 8000874:	40020008 	.word	0x40020008

08000878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <HAL_I2C_MspInit+0x70>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d123      	bne.n	80008e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_I2C_MspInit+0x74>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_I2C_MspInit+0x74>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_I2C_MspInit+0x74>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b0:	23c0      	movs	r3, #192	; 0xc0
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b4:	2312      	movs	r3, #18
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_I2C_MspInit+0x78>)
 80008c4:	f000 fdea 	bl	800149c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_I2C_MspInit+0x74>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_I2C_MspInit+0x74>)
 80008ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d2:	61d3      	str	r3, [r2, #28]
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_I2C_MspInit+0x74>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_TIM_Base_MspInit+0x34>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10b      	bne.n	800091e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_Base_MspInit+0x38>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_TIM_Base_MspInit+0x38>)
 800090c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_TIM_Base_MspInit+0x38>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40012c00 	.word	0x40012c00
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_TIM_MspPostInit+0x5c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d118      	bne.n	8000982 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_TIM_MspPostInit+0x60>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_TIM_MspPostInit+0x60>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_TIM_MspPostInit+0x60>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <HAL_TIM_MspPostInit+0x64>)
 800097e:	f000 fd8d 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_PCD_MspInit+0x34>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_PCD_MspInit+0x38>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_PCD_MspInit+0x38>)
 80009b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_PCD_MspInit+0x38>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40005c00 	.word	0x40005c00
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f87f 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA1_Channel1_IRQHandler+0x10>)
 8000a2a:	f000 fc31 	bl	8001290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000058 	.word	0x20000058

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
                                                                                                                                                                                                                                                                                        bl  SystemInit
 8000a44:	f7ff fff8 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a60:	4c09      	ldr	r4, [pc, #36]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 ff8f 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fbfd 	bl	8000270 <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a80:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a88:	2000042c 	.word	0x2000042c

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 fb59 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe4a 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fb71 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 fb39 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000428 	.word	0x20000428

08000b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000428 	.word	0x20000428

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e0be      	b.n	8000d3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fde4 	bl	80007a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f9ab 	bl	8000f3c <ADC_ConversionStop_Disable>
 8000be6:	4603      	mov	r3, r0
 8000be8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8099 	bne.w	8000d2a <HAL_ADC_Init+0x18e>
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8095 	bne.w	8000d2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c08:	f023 0302 	bic.w	r3, r3, #2
 8000c0c:	f043 0202 	orr.w	r2, r3, #2
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7b1b      	ldrb	r3, [r3, #12]
 8000c22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0xa2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d102      	bne.n	8000c44 <HAL_ADC_Init+0xa8>
 8000c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c42:	e000      	b.n	8000c46 <HAL_ADC_Init+0xaa>
 8000c44:	2300      	movs	r3, #0
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7d1b      	ldrb	r3, [r3, #20]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d119      	bne.n	8000c88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7b1b      	ldrb	r3, [r3, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	035a      	lsls	r2, r3, #13
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	e00b      	b.n	8000c88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f043 0220 	orr.w	r2, r3, #32
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_ADC_Init+0x1a8>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb8:	d003      	beq.n	8000cc2 <HAL_ADC_Init+0x126>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d104      	bne.n	8000ccc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	051b      	lsls	r3, r3, #20
 8000cca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_ADC_Init+0x1ac>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d10b      	bne.n	8000d08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	f023 0303 	bic.w	r3, r3, #3
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d06:	e018      	b.n	8000d3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f023 0312 	bic.w	r3, r3, #18
 8000d10:	f043 0210 	orr.w	r2, r3, #16
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d28:	e007      	b.n	8000d3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f043 0210 	orr.w	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	ffe1f7fd 	.word	0xffe1f7fd
 8000d48:	ff1f0efe 	.word	0xff1f0efe

08000d4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d101      	bne.n	8000d6c <HAL_ADC_ConfigChannel+0x20>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e0dc      	b.n	8000f26 <HAL_ADC_ConfigChannel+0x1da>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d81c      	bhi.n	8000db6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b05      	subs	r3, #5
 8000d8e:	221f      	movs	r2, #31
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3b05      	subs	r3, #5
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
 8000db4:	e03c      	b.n	8000e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	d81c      	bhi.n	8000df8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	3b23      	subs	r3, #35	; 0x23
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4019      	ands	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	3b23      	subs	r3, #35	; 0x23
 8000dea:	fa00 f203 	lsl.w	r2, r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
 8000df6:	e01b      	b.n	8000e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	3b41      	subs	r3, #65	; 0x41
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4019      	ands	r1, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	3b41      	subs	r3, #65	; 0x41
 8000e24:	fa00 f203 	lsl.w	r2, r0, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d91c      	bls.n	8000e72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68d9      	ldr	r1, [r3, #12]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	3b1e      	subs	r3, #30
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6898      	ldr	r0, [r3, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	3b1e      	subs	r3, #30
 8000e64:	fa00 f203 	lsl.w	r2, r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	e019      	b.n	8000ea6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6919      	ldr	r1, [r3, #16]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	2207      	movs	r2, #7
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6898      	ldr	r0, [r3, #8]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d003      	beq.n	8000eb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d132      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d125      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d126      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000edc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d11a      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_ADC_ConfigChannel+0x1ec>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9a      	lsrs	r2, r3, #18
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x1b2>
 8000f0a:	e007      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f043 0220 	orr.w	r2, r3, #32
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40012400 	.word	0x40012400
 8000f34:	20000000 	.word	0x20000000
 8000f38:	431bde83 	.word	0x431bde83

08000f3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d12e      	bne.n	8000fb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f66:	f7ff fdeb 	bl	8000b40 <HAL_GetTick>
 8000f6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f6c:	e01b      	b.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f6e:	f7ff fde7 	bl	8000b40 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d914      	bls.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10d      	bne.n	8000fa6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f043 0210 	orr.w	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e007      	b.n	8000fb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0dc      	beq.n	8000f6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4906      	ldr	r1, [pc, #24]	; (8001058 <__NVIC_EnableIRQ+0x34>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff90 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff2d 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff42 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff35 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e043      	b.n	800127a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_DMA_Init+0xa8>)
 80011fa:	4413      	add	r3, r2
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_DMA_Init+0xac>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	009a      	lsls	r2, r3, #2
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_DMA_Init+0xb0>)
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001226:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800122a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	bffdfff8 	.word	0xbffdfff8
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2204      	movs	r2, #4
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d04f      	beq.n	8001358 <HAL_DMA_IRQHandler+0xc8>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d04a      	beq.n	8001358 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0204 	bic.w	r2, r2, #4
 80012de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_DMA_IRQHandler+0x1f0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d029      	beq.n	800133e <HAL_DMA_IRQHandler+0xae>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_DMA_IRQHandler+0x1f4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d022      	beq.n	800133a <HAL_DMA_IRQHandler+0xaa>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a63      	ldr	r2, [pc, #396]	; (8001488 <HAL_DMA_IRQHandler+0x1f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01a      	beq.n	8001334 <HAL_DMA_IRQHandler+0xa4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <HAL_DMA_IRQHandler+0x1fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d012      	beq.n	800132e <HAL_DMA_IRQHandler+0x9e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a60      	ldr	r2, [pc, #384]	; (8001490 <HAL_DMA_IRQHandler+0x200>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00a      	beq.n	8001328 <HAL_DMA_IRQHandler+0x98>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <HAL_DMA_IRQHandler+0x204>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d102      	bne.n	8001322 <HAL_DMA_IRQHandler+0x92>
 800131c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001320:	e00e      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 8001322:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001326:	e00b      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 8001328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800132c:	e008      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 800132e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001332:	e005      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 8001334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001338:	e002      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 800133a:	2340      	movs	r3, #64	; 0x40
 800133c:	e000      	b.n	8001340 <HAL_DMA_IRQHandler+0xb0>
 800133e:	2304      	movs	r3, #4
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_DMA_IRQHandler+0x208>)
 8001342:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8094 	beq.w	8001476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001356:	e08e      	b.n	8001476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2202      	movs	r2, #2
 800135e:	409a      	lsls	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d056      	beq.n	8001416 <HAL_DMA_IRQHandler+0x186>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d051      	beq.n	8001416 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10b      	bne.n	8001398 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020a 	bic.w	r2, r2, #10
 800138e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a38      	ldr	r2, [pc, #224]	; (8001480 <HAL_DMA_IRQHandler+0x1f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d029      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x166>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a37      	ldr	r2, [pc, #220]	; (8001484 <HAL_DMA_IRQHandler+0x1f4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d022      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x162>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <HAL_DMA_IRQHandler+0x1f8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01a      	beq.n	80013ec <HAL_DMA_IRQHandler+0x15c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_DMA_IRQHandler+0x1fc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d012      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x156>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_DMA_IRQHandler+0x200>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00a      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x150>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a31      	ldr	r2, [pc, #196]	; (8001494 <HAL_DMA_IRQHandler+0x204>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <HAL_DMA_IRQHandler+0x14a>
 80013d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013d8:	e00e      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013de:	e00b      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e4:	e008      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	e005      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f0:	e002      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013f2:	2320      	movs	r3, #32
 80013f4:	e000      	b.n	80013f8 <HAL_DMA_IRQHandler+0x168>
 80013f6:	2302      	movs	r3, #2
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_DMA_IRQHandler+0x208>)
 80013fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d034      	beq.n	8001476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001414:	e02f      	b.n	8001476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2208      	movs	r2, #8
 800141c:	409a      	lsls	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d028      	beq.n	8001478 <HAL_DMA_IRQHandler+0x1e8>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 020e 	bic.w	r2, r2, #14
 800143e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	2101      	movs	r1, #1
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    }
  }
  return;
 8001476:	bf00      	nop
 8001478:	bf00      	nop
}
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020008 	.word	0x40020008
 8001484:	4002001c 	.word	0x4002001c
 8001488:	40020030 	.word	0x40020030
 800148c:	40020044 	.word	0x40020044
 8001490:	40020058 	.word	0x40020058
 8001494:	4002006c 	.word	0x4002006c
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b08b      	sub	sp, #44	; 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e169      	b.n	8001784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8158 	bne.w	800177e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a9a      	ldr	r2, [pc, #616]	; (800173c <HAL_GPIO_Init+0x2a0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d05e      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014d8:	4a98      	ldr	r2, [pc, #608]	; (800173c <HAL_GPIO_Init+0x2a0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d875      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014de:	4a98      	ldr	r2, [pc, #608]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d058      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014e4:	4a96      	ldr	r2, [pc, #600]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d86f      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014ea:	4a96      	ldr	r2, [pc, #600]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d052      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014f0:	4a94      	ldr	r2, [pc, #592]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d869      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014f6:	4a94      	ldr	r2, [pc, #592]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d04c      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014fc:	4a92      	ldr	r2, [pc, #584]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d863      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 8001502:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d046      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 8001508:	4a90      	ldr	r2, [pc, #576]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d85d      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d82a      	bhi.n	8001568 <HAL_GPIO_Init+0xcc>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d859      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <HAL_GPIO_Init+0x80>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001597 	.word	0x08001597
 8001520:	08001571 	.word	0x08001571
 8001524:	08001583 	.word	0x08001583
 8001528:	080015c5 	.word	0x080015c5
 800152c:	080015cb 	.word	0x080015cb
 8001530:	080015cb 	.word	0x080015cb
 8001534:	080015cb 	.word	0x080015cb
 8001538:	080015cb 	.word	0x080015cb
 800153c:	080015cb 	.word	0x080015cb
 8001540:	080015cb 	.word	0x080015cb
 8001544:	080015cb 	.word	0x080015cb
 8001548:	080015cb 	.word	0x080015cb
 800154c:	080015cb 	.word	0x080015cb
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015cb 	.word	0x080015cb
 8001558:	080015cb 	.word	0x080015cb
 800155c:	080015cb 	.word	0x080015cb
 8001560:	08001579 	.word	0x08001579
 8001564:	0800158d 	.word	0x0800158d
 8001568:	4a79      	ldr	r2, [pc, #484]	; (8001750 <HAL_GPIO_Init+0x2b4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156e:	e02c      	b.n	80015ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e029      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	3304      	adds	r3, #4
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e024      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	3308      	adds	r3, #8
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e01f      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	330c      	adds	r3, #12
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e01a      	b.n	80015cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159e:	2304      	movs	r3, #4
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e013      	b.n	80015cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ac:	2308      	movs	r3, #8
 80015ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	611a      	str	r2, [r3, #16]
          break;
 80015b6:	e009      	b.n	80015cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	615a      	str	r2, [r3, #20]
          break;
 80015c2:	e003      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x130>
          break;
 80015ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d801      	bhi.n	80015d6 <HAL_GPIO_Init+0x13a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_Init+0x13e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2bff      	cmp	r3, #255	; 0xff
 80015e0:	d802      	bhi.n	80015e8 <HAL_GPIO_Init+0x14c>
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x152>
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3b08      	subs	r3, #8
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	210f      	movs	r1, #15
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80b1 	beq.w	800177e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800161c:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a40      	ldr	r2, [pc, #256]	; (800175c <HAL_GPIO_Init+0x2c0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1ec>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <HAL_GPIO_Init+0x2c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1e8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1e4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <HAL_GPIO_Init+0x2cc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1e0>
 8001678:	2303      	movs	r3, #3
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 800167c:	2304      	movs	r3, #4
 800167e:	e004      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001688:	2300      	movs	r3, #0
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800169a:	492f      	ldr	r1, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	492c      	ldr	r1, [pc, #176]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4928      	ldr	r1, [pc, #160]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	491e      	ldr	r1, [pc, #120]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4918      	ldr	r1, [pc, #96]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4914      	ldr	r1, [pc, #80]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d021      	beq.n	8001770 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e021      	b.n	800177e <HAL_GPIO_Init+0x2e2>
 800173a:	bf00      	nop
 800173c:	10320000 	.word	0x10320000
 8001740:	10310000 	.word	0x10310000
 8001744:	10220000 	.word	0x10220000
 8001748:	10210000 	.word	0x10210000
 800174c:	10120000 	.word	0x10120000
 8001750:	10110000 	.word	0x10110000
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00
 8001764:	40011000 	.word	0x40011000
 8001768:	40011400 	.word	0x40011400
 800176c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4909      	ldr	r1, [pc, #36]	; (80017a0 <HAL_GPIO_Init+0x304>)
 800177a:	4013      	ands	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f ae8e 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	372c      	adds	r7, #44	; 0x2c
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e12b      	b.n	8001a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff f83c 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2224      	movs	r2, #36	; 0x24
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001838:	f001 f932 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <HAL_I2C_Init+0x274>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d807      	bhi.n	8001858 <HAL_I2C_Init+0x84>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_I2C_Init+0x278>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e006      	b.n	8001866 <HAL_I2C_Init+0x92>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a7d      	ldr	r2, [pc, #500]	; (8001a50 <HAL_I2C_Init+0x27c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	bf94      	ite	ls
 8001860:	2301      	movls	r3, #1
 8001862:	2300      	movhi	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0e7      	b.n	8001a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4a78      	ldr	r2, [pc, #480]	; (8001a54 <HAL_I2C_Init+0x280>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_I2C_Init+0x274>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d802      	bhi.n	80018a8 <HAL_I2C_Init+0xd4>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3301      	adds	r3, #1
 80018a6:	e009      	b.n	80018bc <HAL_I2C_Init+0xe8>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	4a69      	ldr	r2, [pc, #420]	; (8001a58 <HAL_I2C_Init+0x284>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	3301      	adds	r3, #1
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	495c      	ldr	r1, [pc, #368]	; (8001a48 <HAL_I2C_Init+0x274>)
 80018d8:	428b      	cmp	r3, r1
 80018da:	d819      	bhi.n	8001910 <HAL_I2C_Init+0x13c>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e59      	subs	r1, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018f0:	400b      	ands	r3, r1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_I2C_Init+0x138>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1e59      	subs	r1, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fbb1 f3f3 	udiv	r3, r1, r3
 8001904:	3301      	adds	r3, #1
 8001906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190a:	e051      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 800190c:	2304      	movs	r3, #4
 800190e:	e04f      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <HAL_I2C_Init+0x168>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e012      	b.n	8001962 <HAL_I2C_Init+0x18e>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	0099      	lsls	r1, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Init+0x196>
 8001966:	2301      	movs	r3, #1
 8001968:	e022      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10e      	bne.n	8001990 <HAL_I2C_Init+0x1bc>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e58      	subs	r0, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6859      	ldr	r1, [r3, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	fbb0 f3f3 	udiv	r3, r0, r3
 8001984:	3301      	adds	r3, #1
 8001986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800198e:	e00f      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	0099      	lsls	r1, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	6809      	ldr	r1, [r1, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6911      	ldr	r1, [r2, #16]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68d2      	ldr	r2, [r2, #12]
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	000186a0 	.word	0x000186a0
 8001a4c:	001e847f 	.word	0x001e847f
 8001a50:	003d08ff 	.word	0x003d08ff
 8001a54:	431bde83 	.word	0x431bde83
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	461a      	mov	r2, r3
 8001a68:	460b      	mov	r3, r1
 8001a6a:	817b      	strh	r3, [r7, #10]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff f866 	bl	8000b40 <HAL_GetTick>
 8001a74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	f040 80e0 	bne.w	8001c44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2319      	movs	r3, #25
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4970      	ldr	r1, [pc, #448]	; (8001c50 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f964 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0d3      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_I2C_Master_Transmit+0x50>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e0cc      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d007      	beq.n	8001ad2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2221      	movs	r2, #33	; 0x21
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2210      	movs	r2, #16
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b14:	8979      	ldrh	r1, [r7, #10]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f89c 	bl	8001c58 <I2C_MasterRequestWrite>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e08d      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b40:	e066      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa22 	bl	8001f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06b      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d11b      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x188>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d017      	beq.n	8001be4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	6a39      	ldr	r1, [r7, #32]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fa19 	bl	8002020 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d107      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e01a      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d194      	bne.n	8001b42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	00100002 	.word	0x00100002
 8001c54:	ffff0000 	.word	0xffff0000

08001c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d006      	beq.n	8001c82 <I2C_MasterRequestWrite+0x2a>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d003      	beq.n	8001c82 <I2C_MasterRequestWrite+0x2a>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c80:	d108      	bne.n	8001c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00b      	b.n	8001cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d107      	bne.n	8001cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f84f 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd2:	d103      	bne.n	8001cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e035      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce8:	d108      	bne.n	8001cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e01b      	b.n	8001d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	11db      	asrs	r3, r3, #7
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 0306 	and.w	r3, r3, #6
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f063 030f 	orn	r3, r3, #15
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <I2C_MasterRequestWrite+0xfc>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f898 	bl	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e010      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <I2C_MasterRequestWrite+0x100>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f888 	bl	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	00010008 	.word	0x00010008
 8001d58:	00010002 	.word	0x00010002

08001d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6c:	e048      	b.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d044      	beq.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d76:	f7fe fee3 	bl	8000b40 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d302      	bcc.n	8001d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d139      	bne.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10d      	bne.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	4013      	ands	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	e00c      	b.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d116      	bne.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e023      	b.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10d      	bne.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	e00c      	b.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4013      	ands	r3, r2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d093      	beq.n	8001d6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e5e:	e071      	b.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6e:	d123      	bne.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e067      	b.n	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebe:	d041      	beq.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec0:	f7fe fe3e 	bl	8000b40 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d302      	bcc.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d136      	bne.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10c      	bne.n	8001efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf14      	ite	ne
 8001ef2:	2301      	movne	r3, #1
 8001ef4:	2300      	moveq	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	e00b      	b.n	8001f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e021      	b.n	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10c      	bne.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	43da      	mvns	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e00b      	b.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4013      	ands	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f af6d 	bne.w	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9c:	e034      	b.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f886 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e034      	b.n	8002018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d028      	beq.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	f7fe fdc3 	bl	8000b40 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11d      	bne.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d016      	beq.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e007      	b.n	8002018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d1c3      	bne.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202c:	e034      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f83e 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e034      	b.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d028      	beq.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fd7b 	bl	8000b40 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11d      	bne.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b04      	cmp	r3, #4
 8002068:	d016      	beq.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e007      	b.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d1c3      	bne.n	800202e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c6:	d11b      	bne.n	8002100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0204 	orr.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210e:	b08b      	sub	sp, #44	; 0x2c
 8002110:	af06      	add	r7, sp, #24
 8002112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0f1      	b.n	8002302 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fc30 	bl	8000998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f001 fbca 	bl	80038de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	687e      	ldr	r6, [r7, #4]
 8002152:	466d      	mov	r5, sp
 8002154:	f106 0410 	add.w	r4, r6, #16
 8002158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	602b      	str	r3, [r5, #0]
 8002160:	1d33      	adds	r3, r6, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f001 fbaa 	bl	80038be <USB_CoreInit>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0c2      	b.n	8002302 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fbc5 	bl	8003912 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e040      	b.n	8002210 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3301      	adds	r3, #1
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3303      	adds	r3, #3
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	; 0x3c
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3340      	adds	r3, #64	; 0x40
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3301      	adds	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d3b9      	bcc.n	800218e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e044      	b.n	80022aa <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	3301      	adds	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3b5      	bcc.n	8002220 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	687e      	ldr	r6, [r7, #4]
 80022bc:	466d      	mov	r5, sp
 80022be:	f106 0410 	add.w	r4, r6, #16
 80022c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	1d33      	adds	r3, r6, #4
 80022cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f001 fb2b 	bl	800392a <USB_DevInit>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00d      	b.n	8002302 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fb35 	bl	800396a <USB_DevDisconnect>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800230c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e272      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8087 	beq.w	800243a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b04      	cmp	r3, #4
 8002336:	d00c      	beq.n	8002352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002338:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d112      	bne.n	800236a <HAL_RCC_OscConfig+0x5e>
 8002344:	4b8c      	ldr	r3, [pc, #560]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d10b      	bne.n	800236a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d06c      	beq.n	8002438 <HAL_RCC_OscConfig+0x12c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d168      	bne.n	8002438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e24c      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x76>
 8002374:	4b80      	ldr	r3, [pc, #512]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7f      	ldr	r2, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e02e      	b.n	80023e0 <HAL_RCC_OscConfig+0xd4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x98>
 800238a:	4b7b      	ldr	r3, [pc, #492]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7a      	ldr	r2, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a77      	ldr	r2, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xd4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0xbc>
 80023ae:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a71      	ldr	r2, [pc, #452]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b6f      	ldr	r3, [pc, #444]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6e      	ldr	r2, [pc, #440]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xd4>
 80023c8:	4b6b      	ldr	r3, [pc, #428]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a6a      	ldr	r2, [pc, #424]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a67      	ldr	r2, [pc, #412]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fbaa 	bl	8000b40 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fba6 	bl	8000b40 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e200      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe4>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fb96 	bl	8000b40 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fb92 	bl	8000b40 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1ec      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x10c>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d063      	beq.n	800250e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11c      	bne.n	8002498 <HAL_RCC_OscConfig+0x18c>
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x176>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1c0      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4939      	ldr	r1, [pc, #228]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e03a      	b.n	800250e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fb4b 	bl	8000b40 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fb47 	bl	8000b40 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1a1      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4927      	ldr	r1, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fb2a 	bl	8000b40 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe fb26 	bl	8000b40 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e180      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03a      	beq.n	8002590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d019      	beq.n	8002556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe fb0a 	bl	8000b40 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fb06 	bl	8000b40 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e160      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCC_OscConfig+0x26c>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 faba 	bl	8002ac8 <RCC_Delay>
 8002554:	e01c      	b.n	8002590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe faf0 	bl	8000b40 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002562:	e00f      	b.n	8002584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe faec 	bl	8000b40 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d908      	bls.n	8002584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e146      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	42420000 	.word	0x42420000
 8002580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b92      	ldr	r3, [pc, #584]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1e9      	bne.n	8002564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a6 	beq.w	80026ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b8:	61d3      	str	r3, [r2, #28]
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_OscConfig+0x4c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d118      	bne.n	8002608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7e      	ldr	r2, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x4c8>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e2:	f7fe faad 	bl	8000b40 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fe faa9 	bl	8000b40 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	; 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e103      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCC_OscConfig+0x4c8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x312>
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	e02d      	b.n	800267a <HAL_RCC_OscConfig+0x36e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x334>
 8002626:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a66      	ldr	r2, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	e01c      	b.n	800267a <HAL_RCC_OscConfig+0x36e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x356>
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a60      	ldr	r2, [pc, #384]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e00b      	b.n	800267a <HAL_RCC_OscConfig+0x36e>
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d015      	beq.n	80026ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe fa5d 	bl	8000b40 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fa59 	bl	8000b40 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0b1      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ee      	beq.n	800268a <HAL_RCC_OscConfig+0x37e>
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fa47 	bl	8000b40 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fa43 	bl	8000b40 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e09b      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	4b40      	ldr	r3, [pc, #256]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ee      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8087 	beq.w	8002802 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d061      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d146      	bne.n	8002796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fa17 	bl	8000b40 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fa13 	bl	8000b40 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e06d      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d108      	bne.n	8002750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4921      	ldr	r1, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a19      	ldr	r1, [r3, #32]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	430b      	orrs	r3, r1
 8002762:	491b      	ldr	r1, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe f9e7 	bl	8000b40 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe f9e3 	bl	8000b40 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x46a>
 8002794:	e035      	b.n	8002802 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_RCC_OscConfig+0x4cc>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe f9d0 	bl	8000b40 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe f9cc 	bl	8000b40 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e026      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x498>
 80027c2:	e01e      	b.n	8002802 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e019      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_OscConfig+0x500>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe f91e 	bl	8000b40 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe f91a 	bl	8000b40 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f87c 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080039f0 	.word	0x080039f0
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x36>
 8002a12:	e027      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	e027      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0c5b      	lsrs	r3, r3, #17
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	fb03 f202 	mul.w	r2, r3, r2
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e004      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	613b      	str	r3, [r7, #16]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	693b      	ldr	r3, [r7, #16]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	007a1200 	.word	0x007a1200
 8002a80:	08003a08 	.word	0x08003a08
 8002a84:	08003a18 	.word	0x08003a18
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	f7ff fff2 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08003a00 	.word	0x08003a00

08002ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCC_Delay+0x34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <RCC_Delay+0x38>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae4:	bf00      	nop
  }
  while (Delay --);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <RCC_Delay+0x1c>
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000000 	.word	0x20000000
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d07d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d118      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b58:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7fd ffec 	bl	8000b40 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fd ffe8 	bl	8000b40 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e06d      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02e      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d027      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bbe:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fd ffb7 	bl	8000b40 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fd ffb3 	bl	8000b40 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4917      	ldr	r1, [pc, #92]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420440 	.word	0x42420440

08002c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e041      	b.n	8002d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fe2c 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 fab2 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e041      	b.n	8002da4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f839 	bl	8002dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 fa63 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_TIM_PWM_Start+0x24>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e022      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d109      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x3e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e015      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x58>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e05e      	b.n	8002ef0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x82>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	e013      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x92>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	e00b      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	e003      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fc50 	bl	8003718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_TIM_PWM_Start+0x138>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d107      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_TIM_PWM_Start+0x138>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_TIM_PWM_Start+0x13c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_PWM_Start+0xfa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_TIM_PWM_Start+0x140>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d111      	bne.n	8002ede <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d010      	beq.n	8002eee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	e007      	b.n	8002eee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0ae      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f200 809f 	bhi.w	8003070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08003071 	.word	0x08003071
 8002f40:	08003071 	.word	0x08003071
 8002f44:	08003071 	.word	0x08003071
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08003071 	.word	0x08003071
 8002f50:	08003071 	.word	0x08003071
 8002f54:	08003071 	.word	0x08003071
 8002f58:	08002fef 	.word	0x08002fef
 8002f5c:	08003071 	.word	0x08003071
 8002f60:	08003071 	.word	0x08003071
 8002f64:	08003071 	.word	0x08003071
 8002f68:	0800302f 	.word	0x0800302f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f9b2 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6999      	ldr	r1, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	619a      	str	r2, [r3, #24]
      break;
 8002faa:	e064      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9f8 	bl	80033a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
      break;
 8002fec:	e043      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa41 	bl	800347c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0208 	orr.w	r2, r2, #8
 8003008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0204 	bic.w	r2, r2, #4
 8003018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
      break;
 800302c:	e023      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa8b 	bl	8003550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	61da      	str	r2, [r3, #28]
      break;
 800306e:	e002      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0b4      	b.n	800320e <HAL_TIM_ConfigClockSource+0x186>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030dc:	d03e      	beq.n	800315c <HAL_TIM_ConfigClockSource+0xd4>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	f200 8087 	bhi.w	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	f000 8086 	beq.w	80031fa <HAL_TIM_ConfigClockSource+0x172>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f2:	d87f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b70      	cmp	r3, #112	; 0x70
 80030f6:	d01a      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xa6>
 80030f8:	2b70      	cmp	r3, #112	; 0x70
 80030fa:	d87b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b60      	cmp	r3, #96	; 0x60
 80030fe:	d050      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003100:	2b60      	cmp	r3, #96	; 0x60
 8003102:	d877      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b50      	cmp	r3, #80	; 0x50
 8003106:	d03c      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xfa>
 8003108:	2b50      	cmp	r3, #80	; 0x50
 800310a:	d873      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d058      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d86f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d064      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b30      	cmp	r3, #48	; 0x30
 800311a:	d86b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d060      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d867      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05c      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b10      	cmp	r3, #16
 800312a:	d05a      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	e062      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	f000 facc 	bl	80036da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	609a      	str	r2, [r3, #8]
      break;
 800315a:	e04f      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	f000 fab5 	bl	80036da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317e:	609a      	str	r2, [r3, #8]
      break;
 8003180:	e03c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa2c 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2150      	movs	r1, #80	; 0x50
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa83 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031a0:	e02c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa4a 	bl	8003648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2160      	movs	r1, #96	; 0x60
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa73 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031c0:	e01c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa0c 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2140      	movs	r1, #64	; 0x40
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa63 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e00c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 fa5a 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e003      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e000      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <TIM_Base_SetConfig+0xb8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <TIM_Base_SetConfig+0xbc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <TIM_Base_SetConfig+0xc0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <TIM_Base_SetConfig+0xb8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <TIM_Base_SetConfig+0xbc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <TIM_Base_SetConfig+0xc0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <TIM_Base_SetConfig+0xb8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 0201 	bic.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 0302 	bic.w	r3, r3, #2
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <TIM_OC1_SetConfig+0xc8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10c      	bne.n	8003352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0308 	bic.w	r3, r3, #8
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <TIM_OC1_SetConfig+0xc8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0210 	bic.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0320 	bic.w	r3, r3, #32
 80033f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <TIM_OC2_SetConfig+0xd0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a14      	ldr	r2, [pc, #80]	; (8003478 <TIM_OC2_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d113      	bne.n	8003454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00

0800347c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <TIM_OC3_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10d      	bne.n	80034f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC3_SetConfig+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d113      	bne.n	8003526 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40012c00 	.word	0x40012c00

08003550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	031b      	lsls	r3, r3, #12
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <TIM_OC4_SetConfig+0x98>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40012c00 	.word	0x40012c00

080035ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 030a 	bic.w	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0210 	bic.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	031b      	lsls	r3, r3, #12
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003684:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f043 0307 	orr.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b087      	sub	sp, #28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	609a      	str	r2, [r3, #8]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003774:	2302      	movs	r3, #2
 8003776:	e046      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800

0800381c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003834:	2302      	movs	r3, #2
 8003836:	e03d      	b.n	80038b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038be:	b084      	sub	sp, #16
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	f107 0014 	add.w	r0, r7, #20
 80038cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	b004      	add	sp, #16
 80038dc:	4770      	bx	lr

080038de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038e6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4013      	ands	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800392a:	b084      	sub	sp, #16
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	f107 0014 	add.w	r0, r7, #20
 8003938:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	b004      	add	sp, #16
 8003968:	4770      	bx	lr

0800396a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <memset>:
 800397e:	4603      	mov	r3, r0
 8003980:	4402      	add	r2, r0
 8003982:	4293      	cmp	r3, r2
 8003984:	d100      	bne.n	8003988 <memset+0xa>
 8003986:	4770      	bx	lr
 8003988:	f803 1b01 	strb.w	r1, [r3], #1
 800398c:	e7f9      	b.n	8003982 <memset+0x4>
	...

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	2600      	movs	r6, #0
 8003994:	4d0c      	ldr	r5, [pc, #48]	; (80039c8 <__libc_init_array+0x38>)
 8003996:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	f000 f81a 	bl	80039d8 <_init>
 80039a4:	2600      	movs	r6, #0
 80039a6:	4d0a      	ldr	r5, [pc, #40]	; (80039d0 <__libc_init_array+0x40>)
 80039a8:	4c0a      	ldr	r4, [pc, #40]	; (80039d4 <__libc_init_array+0x44>)
 80039aa:	1b64      	subs	r4, r4, r5
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08003a1c 	.word	0x08003a1c
 80039cc:	08003a1c 	.word	0x08003a1c
 80039d0:	08003a1c 	.word	0x08003a1c
 80039d4:	08003a20 	.word	0x08003a20

080039d8 <_init>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr

080039e4 <_fini>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr
